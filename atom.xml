<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xffyjq&#39;s Page</title>
  <subtitle>Simple, enough.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xffyjq.github.com/"/>
  <updated>2018-01-17T01:09:15.483Z</updated>
  <id>http://xffyjq.github.com/</id>
  
  <author>
    <name>xffyjq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>矩阵树小结</title>
    <link href="http://xffyjq.github.com/2017/12/30/MatrixTree/"/>
    <id>http://xffyjq.github.com/2017/12/30/MatrixTree/</id>
    <published>2017-12-30T07:52:14.000Z</published>
    <updated>2018-01-17T01:09:15.483Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-这篇博客主要是对矩阵树的一些简要总结。"><a href="#emsp-emsp-这篇博客主要是对矩阵树的一些简要总结。" class="headerlink" title="&emsp;&emsp;这篇博客主要是对矩阵树的一些简要总结。"></a>&emsp;&emsp;这篇博客主要是对矩阵树的一些简要总结。</h3><a id="more"></a>
<h4 id="emsp-emsp-一、矩阵树定理基本形式与证明思路"><a href="#emsp-emsp-一、矩阵树定理基本形式与证明思路" class="headerlink" title="&emsp;&emsp;一、矩阵树定理基本形式与证明思路"></a>&emsp;&emsp;一、矩阵树定理基本形式与证明思路</h4><p>&emsp;&emsp;矩阵树定理基本形式：一个无向图的生成树个数等于其拉普拉斯矩阵(度数矩阵-邻接矩阵)的任一余子式的值。</p>
<p>&emsp;&emsp;证明思路：</p>
<p>&emsp;&emsp;1、定义$E(G)$为无向图$G$的关联矩阵，若图$G$有$n$个点，$m$条边，则$E(G)$有$n$行$m$列。其定义如下(用$E$代指$E(G)$)：</p>
<script type="math/tex; mode=display">
E_{ij}=\begin{equation}
\left\{
\begin{array}{lr}
1,&i=v_j\\
-1,&i=u_j\\
0,&others
\end{array}
\right.
\end{equation}</script><p>&emsp;&emsp;其中$u_j​$，$v_j​$分别表示第$j​$条边的两个端点。注意到这是一个无向图，所以$u_j​$,$v_j​$的顺序可以调换。</p>
<p>&emsp;&emsp;定义$E’(G)$为$E(G)$去掉任意一行产生的矩阵。</p>
<p>&emsp;&emsp;定理：如果图$G$为一棵树(此时$m=n-1$，$E’(G)$有$n-1$行$n-1$列)，$det(E’(G))^2=1$，否则$det(E’(G))^2=0$(产生了线性组合)。</p>
<p>&emsp;&emsp;由上，有：</p>
<script type="math/tex; mode=display">
ans=
\sum_{
G'\in\begin{align}
\left(
    \begin{array}{lr}
    [G]\\
    n-1
    \end{array}
\right)
\end{align}
}
det(E'(G'))^2
=
\sum_{
G'\in\begin{aligned}
\left(
    \begin{array}{lr}
    [G]\\
    n-1
    \end{array}
\right)
\end{aligned}
}
det(E'(G'))det(E'(G')^T)</script><p>&emsp;&emsp;其中$G$为待计算的图，组合数代表图$G$中任意$n-1$条边组成的新图。</p>
<p>&emsp;&emsp;2、定理(Cauchy-Binet公式)：</p>
<script type="math/tex; mode=display">
det(AB)=\sum_{
S\in\begin{align}
\left(
    \begin{array}{lr}
    [n]\\
    m
    \end{array}
\right)
\end{align}
}
det(A_{[m]*S})det(B_{S*[m]})</script><p>&emsp;&emsp;$[n]$代表$1-n$所有整数组成的集合，组合数代表其大小为$m$的子集。</p>
<p>&emsp;&emsp;该公式中，矩阵$A$有$m$行$n$列，$B$有$n$行$m$列。矩阵下标代表该矩阵提出(行集合$*$列集合)组成的子矩阵。</p>
<p>&emsp;&emsp;结合该公式与答案式，有：</p>
<script type="math/tex; mode=display">
ans=det(E'(G))det(E'(G)^T)</script><p>&emsp;&emsp;3、定理：</p>
<script type="math/tex; mode=display">
det(E(G))det(E(G)^T)=det(deg(G)-mat(G))=det(L)</script><p>&emsp;&emsp;其中$mat(G)​$为$G​$的邻接矩阵($mat(G)_{ij}=i​$与$j​$之间边的数量)，$deg(G)​$为$G​$的度数矩阵($deg(G)_{ij}=[i=j]i​$的度数)。$L=deg(G)-mat(G)​$，即图$G​$的拉普拉斯矩阵。</p>
<p>&emsp;&emsp;这个很好证，考察左式的定义即可。</p>
<p>&emsp;&emsp;由于$E’(G)$为$E(G)$去掉任意一行得到，所以有:</p>
<script type="math/tex; mode=display">
ans=det(L')</script><p>&emsp;&emsp;其中$det(L’)$为$L$去掉$i$行$i$列的余子式$M_{ii}$($i$为不大于$n$的任意正整数)。</p>
<h4 id="emsp-emsp-二、变元矩阵树定理"><a href="#emsp-emsp-二、变元矩阵树定理" class="headerlink" title="&emsp;&emsp;二、变元矩阵树定理"></a>&emsp;&emsp;二、变元矩阵树定理</h4><p>&emsp;&emsp;若将邻接矩阵定义为($mat(G)_{ij}=i与j之间边权和$)，度数矩阵定义为($deg(G)_{ij}=[i=j]i$相连边的边权和)，则：</p>
<script type="math/tex; mode=display">
ans=det(L')=\sum_T\prod_{e\in{T}}w_e</script><p>&emsp;&emsp;$T$为图$G$所有生成树，$e$为图$G$中的边，$w_e$为$e$的边权。注意这里的边权可以为实数。</p>
<p>&emsp;&emsp;这个定理可以将矩阵树基本定理推广到概率等加强形式。</p>
<h4 id="emsp-emsp-三、有向图矩阵树定理"><a href="#emsp-emsp-三、有向图矩阵树定理" class="headerlink" title="&emsp;&emsp;三、有向图矩阵树定理"></a>&emsp;&emsp;三、有向图矩阵树定理</h4><p>&emsp;&emsp;将邻接矩阵定义为($mat(G)_{ij}=i$到$j$的边数量)，将度数矩阵定义为($deg(G)_{ij}=[i=j]i$的入度)，则$L$去掉第$i$行$i$列得到的余子式$M_{ii}=$以点$i$为根的外向生成树个数。</p>
<p>&emsp;&emsp;若将度数矩阵定义为($deg(G)_{ij}=[i=j]i$的出度)，则$L$去掉第$i$行$i$列得到的余子式$M_{ii}=$以点$i$为根的内向生成树个数。</p>
<p>&emsp;&emsp;变元矩阵树定理同样适用于有向图。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-这篇博客主要是对矩阵树的一些简要总结。&quot;&gt;&lt;a href=&quot;#emsp-emsp-这篇博客主要是对矩阵树的一些简要总结。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;这篇博客主要是对矩阵树的一些简要总结。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;这篇博客主要是对矩阵树的一些简要总结。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="矩阵树" scheme="http://xffyjq.github.com/tags/%E7%9F%A9%E9%98%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1176 Mokia</title>
    <link href="http://xffyjq.github.com/2017/06/28/BZOJ1176/"/>
    <id>http://xffyjq.github.com/2017/06/28/BZOJ1176/</id>
    <published>2017-06-28T04:45:56.000Z</published>
    <updated>2017-11-28T07:00:21.766Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-一个矩阵，最开始所有值都是0。2种操作"><a href="#emsp-emsp-题意-一个矩阵，最开始所有值都是0。2种操作" class="headerlink" title="&emsp;&emsp;题意:一个矩阵，最开始所有值都是0。2种操作:"></a>&emsp;&emsp;题意:一个矩阵，最开始所有值都是0。2种操作:</h3><h3 id="emsp-emsp-1、将-x-y-位置的值增加a"><a href="#emsp-emsp-1、将-x-y-位置的值增加a" class="headerlink" title="&emsp;&emsp;1、将$(x, y)$位置的值增加a"></a>&emsp;&emsp;1、将$(x, y)$位置的值增加a</h3><h3 id="emsp-emsp-2、查询左下角-x-1-y-1-，右上角-x-2-y-2-子矩阵权值和"><a href="#emsp-emsp-2、查询左下角-x-1-y-1-，右上角-x-2-y-2-子矩阵权值和" class="headerlink" title="&emsp;&emsp;2、查询左下角$(x_1, y_1)$，右上角$(x_2, y_2)$子矩阵权值和"></a>&emsp;&emsp;2、查询左下角$(x_1, y_1)$，右上角$(x_2, y_2)$子矩阵权值和</h3><a id="more"></a>
<p>&emsp;&emsp;第一道cdq分治的题目。<br>&emsp;&emsp;对于一次矩阵操作，我们可以通过线段树套线段树在$O(\log^2 n)$的时间内处理。这样复杂度是正确的，但是有没有更简便的，不用大数据结构的方法？cdq分治便可以解决这样的一个问题。<br>&emsp;&emsp;cdq分治主要运用于离线数据方面，其主要作用可以说是破除查询与修改的时间限制，让查询与修改能够以一个更好的顺序呈现出来，更加方便地被处理。<br>&emsp;&emsp;拿这道题来说吧。如果所有查询都在修改之后，那么这道题有没有更加简便的做法？首先对于2操作，我们可以用矩阵的二维差分来将其转化为查询右上角为$(x, y)​$的前缀矩阵和。然后我们将所有的查询和修改放在一起按$x​$坐标排序，$x​$相同的按$y​$排序，使用一个树状数组记录$y​$坐标信息，当每次扫到一个修改操作时，就把它的修改放到树状数组中，当每次扫到一个查询操作时，由于我们知道修改都在查询之前，于是前面扫到过的修改操作就是所有有可能影响该查询的修改操作。于是我们直接在树状数组里寻找想要的信息即可。<br>&emsp;&emsp;可是题目没有这个条件。那么我们是否可以”变出”这个条件呢？这就是cdq分治的精髓所在。我们将所有的操作按时间排序，接下来，分治这个时间轴。在一个分治区间$[l, r]$中，我们将$[l, mid]$时间内发生的修改操作与$[mid, r]$时间内发生的查询操作拿出来，显然这些提出来的修改操作都在查询操作之前，那么我们就可以用上面的方法更新查询操作了。那么这样就完了吗？对于一个发生在时间点$k(k &gt; mid)$的查询操作，区间$[mid + 1, k - 1]$中的修改操作也可能会对其造成影响。所以继续分治下去就好。<br>&emsp;&emsp;每次分治完别忘了还原临时信息，比如树状数组。<br>&emsp;&emsp;<strong>注意清树状数组直接一步一步撤回之前操作，不能用memset，不然复杂度是错的！</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a);</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c - <span class="string">'0'</span>; <span class="built_in">isdigit</span>(c = getchar()); (x *= <span class="number">10</span>) += c - <span class="string">'0'</span>);</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000010</span>, maxm = <span class="number">640010</span>, maxq = <span class="number">10010</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, s;</div><div class="line"><span class="keyword">int</span> ans[maxq];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> op, t, id, x, y, w;</div><div class="line"></div><div class="line">	data() &#123; &#125;</div><div class="line">	data(<span class="keyword">int</span> _op, <span class="keyword">int</span> <span class="keyword">_t</span>, <span class="keyword">int</span> _id, <span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _w): op(_op), t(<span class="keyword">_t</span>), id(_id), x(_x), y(_y), w(_w) &#123; &#125;</div><div class="line"></div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> data&amp; rhs) <span class="keyword">const</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> x != rhs.x ? x &lt; rhs.x : y != rhs.y ? y &lt; rhs.y : op &lt; rhs.op;</div><div class="line">	&#125;</div><div class="line">&#125; c[maxm], tmp[maxm];</div><div class="line"><span class="keyword">int</span> cur;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> BIT</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> T[maxn];</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">for</span>(; p &lt;= n; p += p &amp; -p) T[p] += x; &#125;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123; <span class="keyword">int</span> ret = <span class="number">0</span>; <span class="keyword">for</span>(; p; p -= p &amp; -p) ret += T[p]; <span class="keyword">return</span> ret; &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> BIT;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">	rep(i, l, r)</div><div class="line">		<span class="keyword">if</span>(c[i].op == <span class="number">1</span> &amp;&amp; c[i].t &lt;= mid) add(c[i].y, c[i].w);</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (c[i].op == <span class="number">2</span> &amp;&amp; c[i].t &gt; mid) ans[c[i].id] += c[i].w * query(c[i].y);</div><div class="line">	rep(i, l, r) <span class="keyword">if</span>(c[i].op == <span class="number">1</span> &amp;&amp; c[i].t &lt;= mid) add(c[i].y, -c[i].w);</div><div class="line">	<span class="keyword">int</span> cur1 = l, cur2 = mid + <span class="number">1</span>;</div><div class="line">	rep(i, l, r)</div><div class="line">		<span class="keyword">if</span>(c[i].t &lt;= mid) tmp[cur1++] = c[i];</div><div class="line">		<span class="keyword">else</span> tmp[cur2++] = c[i];</div><div class="line">	rep(i, l, r) c[i] = tmp[i];</div><div class="line">	solve(l, mid); solve(mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">	freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	read(s); read(n);</div><div class="line">	<span class="keyword">int</span> op, q = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(read(op) != <span class="number">3</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(op == <span class="number">1</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> x, y, w;</div><div class="line">			read(x); read(y); read(w);</div><div class="line">			c[++cur] = data(<span class="number">1</span>, cur, <span class="number">0</span>, x, y, w);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> x1, y1, x2, y2; ++q;</div><div class="line">			read(x1), read(y1), read(x2), read(y2);</div><div class="line">			c[++cur] = data(<span class="number">2</span>, cur, q, x2, y2, <span class="number">1</span>);</div><div class="line">			c[++cur] = data(<span class="number">2</span>, cur, q, x1 - <span class="number">1</span>, y2, <span class="number">-1</span>);</div><div class="line">			c[++cur] = data(<span class="number">2</span>, cur, q, x2, y1 - <span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">			c[++cur] = data(<span class="number">2</span>, cur, q, x1 - <span class="number">1</span>, y1 - <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	sort(c + <span class="number">1</span>, c + cur + <span class="number">1</span>);</div><div class="line">	solve(<span class="number">1</span>, cur);</div><div class="line">	rep(i, <span class="number">1</span>, q) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-一个矩阵，最开始所有值都是0。2种操作&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-一个矩阵，最开始所有值都是0。2种操作&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:一个矩阵，最开始所有值都是0。2种操作:&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:一个矩阵，最开始所有值都是0。2种操作:&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-1、将-x-y-位置的值增加a&quot;&gt;&lt;a href=&quot;#emsp-emsp-1、将-x-y-位置的值增加a&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;1、将$(x, y)$位置的值增加a&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;1、将$(x, y)$位置的值增加a&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-2、查询左下角-x-1-y-1-，右上角-x-2-y-2-子矩阵权值和&quot;&gt;&lt;a href=&quot;#emsp-emsp-2、查询左下角-x-1-y-1-，右上角-x-2-y-2-子矩阵权值和&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;2、查询左下角$(x_1, y_1)$，右上角$(x_2, y_2)$子矩阵权值和&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;2、查询左下角$(x_1, y_1)$，右上角$(x_2, y_2)$子矩阵权值和&lt;/h3&gt;
    
    </summary>
    
    
      <category term="cdq分治" scheme="http://xffyjq.github.com/tags/cdq%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3572 世界树</title>
    <link href="http://xffyjq.github.com/2017/06/24/BZOJ3572/"/>
    <id>http://xffyjq.github.com/2017/06/24/BZOJ3572/</id>
    <published>2017-06-24T00:20:55.000Z</published>
    <updated>2017-06-29T05:06:43.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-给你一棵树，每次询问给出-m-个关键点，树上的一个点受到离其最近的关键点-如有一样近则取编号最小-控制。求每个关键点控制多少个点。"><a href="#emsp-emsp-题意-给你一棵树，每次询问给出-m-个关键点，树上的一个点受到离其最近的关键点-如有一样近则取编号最小-控制。求每个关键点控制多少个点。" class="headerlink" title="&emsp;&emsp;题意:给你一棵树，每次询问给出$m$个关键点，树上的一个点受到离其最近的关键点(如有一样近则取编号最小)控制。求每个关键点控制多少个点。"></a>&emsp;&emsp;题意:给你一棵树，每次询问给出$m$个关键点，树上的一个点受到离其最近的关键点(如有一样近则取编号最小)控制。求每个关键点控制多少个点。</h3><a id="more"></a>
<p>&emsp;&emsp;本来虚树题只想写一篇博客的，但是这道题有点毒瘤所以又写一篇吧。<br>&emsp;&emsp;首先，把虚树建出来。<br>&emsp;&emsp;接着dp两遍，找出离每个虚树点最近的关键点(虚树点不一定为关键点，这一点应该都清楚)。<br>&emsp;&emsp;然后对于虚树上的每一条边(对应原树的一条链)，找出控制的分界点，即对于边$(u, v)$，找到原树中链$(u, v)$上的点哪些受离$u$近的关键点控制，哪些受离$v$近的关键点控制。这个需要二分一下。<br>&emsp;&emsp;倍增跳到分界点，则链上分界点以下的点及其另外子树都受离$v$近的关键点控制，以上的点及其另外子树都受离$u$近的关键点控制。将答案加上这些点及子树的size总和。<br>&emsp;&emsp;此外就是虚树上的点的另外子树，由于可能会被不同的边计算多次，所以就处理好一起更新即可。<br>&emsp;&emsp;这道题细节很多，计算”另外子树”size的部分需要好好想想，在原来树的size的基础上做一些调整，才能得到想要的答案。<br>&emsp;&emsp;另外一点就是，虚树中弹栈的地方的一个判断是大于等于而不是大于。这个细节非常重要，但又非常容易忽略。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(i, u) for(int i = head[u], v = to[i]; i; i = nxt[i], v = to[i])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c - <span class="string">'0'</span>; <span class="built_in">isdigit</span>(c = getchar()); (x *= <span class="number">10</span>) += c - <span class="string">'0'</span>);</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300010</span>, INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[maxn], nxt[maxn &lt;&lt; <span class="number">1</span>], to[maxn &lt;&lt; <span class="number">1</span>], e;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ae</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; to[++e] = y; nxt[e] = head[x]; head[x] = e; &#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> HLD</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> cur, dfn[maxn], dep[maxn], top[maxn], fa[maxn][<span class="number">20</span>], son[maxn], sz[maxn];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">    &#123;</div><div class="line">        sz[u] = <span class="number">1</span>; son[u] = <span class="number">0</span>;</div><div class="line">        rep(i, <span class="number">1</span>, <span class="number">19</span>) fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">        erep(i, u) <span class="keyword">if</span>(v != fa[u][<span class="number">0</span>])</div><div class="line">        &#123;</div><div class="line">            fa[v][<span class="number">0</span>] = u; dep[v] = dep[u] + <span class="number">1</span>;</div><div class="line">            dfs1(v); <span class="keyword">if</span>(sz[v] &gt; sz[son[u]]) son[u] = v;</div><div class="line">            sz[u] += sz[v];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> g)</span></span></div><div class="line">    &#123;</div><div class="line">        top[u] = g; dfn[u] = ++cur;</div><div class="line">        <span class="keyword">if</span>(son[u]) dfs2(son[u], g);</div><div class="line">        erep(i, u) <span class="keyword">if</span>(v != fa[u][<span class="number">0</span>] &amp;&amp; v != son[u]) dfs2(v, v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(top[u] != top[v]) (dep[top[u]] &gt; dep[top[v]] ? u = fa[top[u]][<span class="number">0</span>] : v = fa[top[v]][<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> dep[u] &lt; dep[v] ? u : v;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> HLD;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[maxn], p[maxn], k;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> vtree</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> head[maxn], nxt[maxn &lt;&lt; <span class="number">1</span>], to[maxn &lt;&lt; <span class="number">1</span>], w[maxn &lt;&lt; <span class="number">1</span>], e, Time[maxn], cur;</div><div class="line">    <span class="keyword">int</span> near[maxn], dis[maxn], book[maxn], ans[maxn], res[maxn];</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getw</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">abs</span>(dep[u] - dep[v]); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ae</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> W)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(Time[x] != cur)</div><div class="line">        &#123;</div><div class="line">            head[x] = <span class="number">0</span>;</div><div class="line">            Time[x] = cur;</div><div class="line">        &#125;</div><div class="line">        to[++e] = y; nxt[e] = head[x]; head[x] = e; w[e] = W;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123; <span class="keyword">return</span> dfn[x] &lt; dfn[y]; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        ++cur, e = <span class="number">0</span>;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> stk[maxn]; <span class="keyword">int</span> top = <span class="number">0</span>;</div><div class="line"></div><div class="line">        sort(p + <span class="number">1</span>, p + k + <span class="number">1</span>, cmp);</div><div class="line">        rep(i, <span class="number">1</span>, k) book[p[i]] = cur;</div><div class="line"></div><div class="line">        stk[++top] = <span class="number">1</span>;</div><div class="line">        rep(i, <span class="number">1</span> + (p[<span class="number">1</span>] == <span class="number">1</span>), k)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> u = p[i], lca = LCA(stk[top], u);</div><div class="line">            <span class="keyword">if</span>(lca == stk[top]) stk[++top] = u;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(top &gt;= <span class="number">2</span> &amp;&amp; dep[stk[top - <span class="number">1</span>]] &gt;= dep[lca]) <span class="comment">//不是 &gt; !!!</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">int</span> W = getw(stk[top - <span class="number">1</span>], stk[top]);</div><div class="line">                    ae(stk[top - <span class="number">1</span>], stk[top], W), ae(stk[top], stk[top - <span class="number">1</span>], W);</div><div class="line">                    --top;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(stk[top] != lca)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">int</span> W = getw(stk[top], lca);</div><div class="line">                    ae(stk[top], lca, W), ae(lca, stk[top], W);</div><div class="line">                    stk[top] = lca;</div><div class="line">                &#125;</div><div class="line">                stk[++top] = u;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        rep(i, <span class="number">1</span>, top - <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> W = getw(stk[i], stk[i + <span class="number">1</span>]);</div><div class="line">            ae(stk[i], stk[i + <span class="number">1</span>], W), ae(stk[i + <span class="number">1</span>], stk[i], W);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dp1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre)</span></span></div><div class="line">    &#123;</div><div class="line">		res[u] = sz[u];</div><div class="line">        erep(i, u) <span class="keyword">if</span>(v != pre) dp1(v, u); dis[u] = INF;</div><div class="line">        <span class="keyword">if</span>(book[u] == cur) near[u] = u, dis[u] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> erep(i, u) <span class="keyword">if</span>(v != pre)</div><div class="line">			<span class="keyword">if</span>(chkmin(dis[u], dis[v] + w[i]) || dis[u] == dis[v] + w[i] &amp;&amp; near[v] &lt; near[u]) near[u] = near[v];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dp2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre)</span></span></div><div class="line">    &#123;</div><div class="line">        erep(i, u) <span class="keyword">if</span>(v != pre)</div><div class="line">			 <span class="keyword">if</span>(chkmin(dis[v], dis[u] + w[i]) || dis[v] == dis[u] + w[i] &amp;&amp; near[u] &lt; near[v]) near[v] = near[u];</div><div class="line">        erep(i, u) <span class="keyword">if</span>(v != pre) dp2(v, u);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; dp1(<span class="number">1</span>, <span class="number">0</span>); dp2(<span class="number">1</span>, <span class="number">0</span>); &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre)</span></span></div><div class="line">    &#123;</div><div class="line">        erep(i, u) <span class="keyword">if</span>(v != pre)</div><div class="line">        &#123;</div><div class="line">			<span class="keyword">int</span> x = v;</div><div class="line">			drep(j, <span class="number">19</span>, <span class="number">0</span>) <span class="keyword">if</span>(dep[fa[x][j]] &gt; dep[u]) x = fa[x][j];</div><div class="line">			res[u] -= sz[x];</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(near[u] == near[v]) ans[near[u]] += sz[x] - sz[v];</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> L = <span class="number">0</span>, R = w[i];</div><div class="line">				<span class="keyword">if</span>(near[u] &lt; near[v])</div><div class="line">				&#123;</div><div class="line">					<span class="keyword">while</span>(L &lt; R)</div><div class="line">					&#123;</div><div class="line">						<span class="keyword">int</span> mid = (L + R + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">						<span class="keyword">if</span>(dis[v] + mid &lt; dis[u] + w[i] - mid) L = mid;</div><div class="line">						<span class="keyword">else</span> R = mid - <span class="number">1</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span></div><div class="line">				&#123;</div><div class="line">					<span class="keyword">while</span>(L &lt; R)</div><div class="line">					&#123;</div><div class="line">						<span class="keyword">int</span> mid = (L + R + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">						<span class="keyword">if</span>(dis[v] + mid &lt;= dis[u] + w[i] - mid) L = mid;</div><div class="line">						<span class="keyword">else</span> R = mid - <span class="number">1</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">int</span> h = v;</div><div class="line">				rep(j, <span class="number">0</span>, <span class="number">19</span>) <span class="keyword">if</span>(L &amp; (<span class="number">1</span> &lt;&lt; j)) h = fa[h][j];</div><div class="line">				ans[near[v]] += sz[h] - sz[v];</div><div class="line">				ans[near[u]] += sz[x] - sz[h];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">		ans[near[u]] += res[u];</div><div class="line">		</div><div class="line">		erep(i, u) <span class="keyword">if</span>(v != pre) dp(v, u);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		rep(i, <span class="number">1</span>, k) ans[a[i]] = <span class="number">0</span>;</div><div class="line">		dp(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">		rep(i, <span class="number">1</span>, k) <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[a[i]]); <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">    freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    read(n); <span class="keyword">int</span> u, v;</div><div class="line">    rep(i, <span class="number">1</span>, n - <span class="number">1</span>) read(u), read(v), ae(u, v), ae(v, u);</div><div class="line">    dfs1(<span class="number">1</span>); dfs2(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    read(q);</div><div class="line">    <span class="keyword">while</span>(q--)</div><div class="line">    &#123;</div><div class="line">        read(k);</div><div class="line">        rep(i, <span class="number">1</span>, k) p[i] = read(a[i]);</div><div class="line">        vtree::build();</div><div class="line">        vtree::init();</div><div class="line">        vtree::solve();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-给你一棵树，每次询问给出-m-个关键点，树上的一个点受到离其最近的关键点-如有一样近则取编号最小-控制。求每个关键点控制多少个点。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-给你一棵树，每次询问给出-m-个关键点，树上的一个点受到离其最近的关键点-如有一样近则取编号最小-控制。求每个关键点控制多少个点。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:给你一棵树，每次询问给出$m$个关键点，树上的一个点受到离其最近的关键点(如有一样近则取编号最小)控制。求每个关键点控制多少个点。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:给你一棵树，每次询问给出$m$个关键点，树上的一个点受到离其最近的关键点(如有一样近则取编号最小)控制。求每个关键点控制多少个点。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="虚树" scheme="http://xffyjq.github.com/tags/%E8%99%9A%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ2286 消耗战</title>
    <link href="http://xffyjq.github.com/2017/06/18/BZOJ2286/"/>
    <id>http://xffyjq.github.com/2017/06/18/BZOJ2286/</id>
    <published>2017-06-18T13:12:44.000Z</published>
    <updated>2017-06-29T05:06:35.553Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-一棵-n-个点，边带权的树，-m-次询问，每次给出k个关键点，求割掉最小代价的边使1号点不能到达任何关键点。"><a href="#emsp-emsp-题意-一棵-n-个点，边带权的树，-m-次询问，每次给出k个关键点，求割掉最小代价的边使1号点不能到达任何关键点。" class="headerlink" title="&emsp;&emsp;题意:一棵$n$个点，边带权的树，$m$次询问，每次给出k个关键点，求割掉最小代价的边使1号点不能到达任何关键点。"></a>&emsp;&emsp;题意:一棵$n$个点，边带权的树，$m$次询问，每次给出k个关键点，求割掉最小代价的边使1号点不能到达任何关键点。</h3><a id="more"></a>
<p>&emsp;&emsp;很裸的树形dp。但是数据范围太大了，承担不起$O(nm)$的复杂度。<br>&emsp;&emsp;这个时候就需要考虑虚树了。<br>&emsp;&emsp;什么是虚树?sengxian的博客讲得很好，这里就不多说了。<br>&emsp;&emsp;这是我的第一道虚树题。通过这道题也能看出很多细节。虚树的复杂度是时刻都必须要算准、保证好的。经常因为一些数组的初始化等问题使得复杂度直接回到了$O(nm)$。比如虚树的邻接表head数组初始化必须要记时间戳，将当前要用的点head清0，而不能直接调用memset。又比如这道题的dp决策，关键点和非关键点的决策是不同的。那么我们如何记录一个点是不是关键点?开数组的话显然初始化又成了问题。<br>&emsp;&emsp;对于这道题，我们发现在一个关键点下方的关键点dp值是没有任何意义的。所以我们在建虚树的时候就要首先预处理去掉这一类点。这样建出的虚树中关键点均为叶子，于是就不用担心什么了。<br>&emsp;&emsp;还有一点，建出虚树后的一条边等于原图的一条路径，那么边权怎么办?这道题中我们可以规避这个问题。令$mine[u]$为u到1号点路径中最小的边权，仅仅利用这个东西我们就能进行dp了。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(i, u) for(int i = head[u], v = to[i]; i; i = nxt[i], v = to[i])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c - <span class="string">'0'</span>; <span class="built_in">isdigit</span>(c = getchar()); (x *= <span class="number">10</span>) += c - <span class="string">'0'</span>);</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">250010</span>;</div><div class="line"><span class="keyword">const</span> LL INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[maxn], nxt[maxn &lt;&lt; <span class="number">1</span>], to[maxn &lt;&lt; <span class="number">1</span>], e;</div><div class="line">LL w[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ae</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, LL c)</span> </span>&#123; to[++e] = y; nxt[e] = head[x]; head[x] = e; w[e] = c; &#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> HLD</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> cur, fa[maxn], dep[maxn], dfn[maxn], top[maxn], son[maxn], sz[maxn];</div><div class="line">    LL mine[maxn];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">    &#123;</div><div class="line">        sz[u] = <span class="number">1</span>; son[u] = <span class="number">0</span>;</div><div class="line">        erep(i, u) <span class="keyword">if</span>(v != fa[u])</div><div class="line">        &#123;</div><div class="line">            fa[v] = u; dep[v] = dep[u] + <span class="number">1</span>; mine[v] = min(mine[u], w[i]);</div><div class="line">            dfs1(v); <span class="keyword">if</span>(sz[v] &gt; sz[son[u]]) son[u] = v;</div><div class="line">            sz[u] += sz[v];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> g)</span></span></div><div class="line">    &#123;</div><div class="line">        dfn[u] = ++cur; top[u] = g;</div><div class="line">        <span class="keyword">if</span>(son[u]) dfs2(son[u], g);</div><div class="line">        erep(i, u) <span class="keyword">if</span>(v != fa[u] &amp;&amp; v != son[u]) dfs2(v, v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(top[u] != top[v]) (dep[top[u]] &gt; dep[top[v]] ? u = fa[top[u]] : v = fa[top[v]]);</div><div class="line">        <span class="keyword">return</span> dep[u] &lt; dep[v] ? u : v;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> HLD;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> vtree</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> head[maxn], nxt[maxn &lt;&lt; <span class="number">1</span>], to[maxn &lt;&lt; <span class="number">1</span>], e, Time[maxn], cur;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ae</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(Time[x] != cur)</div><div class="line">        &#123;</div><div class="line">            head[x] = <span class="number">0</span>;</div><div class="line">            Time[x] = cur;</div><div class="line">        &#125;</div><div class="line">        to[++e] = y; nxt[e] = head[x]; head[x] = e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> dfn[x] &lt; dfn[y]; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p[], <span class="keyword">int</span> tot)</span></span></div><div class="line">    &#123;</div><div class="line">        ++cur; e = <span class="number">0</span>;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> stk[maxn]; <span class="keyword">int</span> top = <span class="number">0</span>;</div><div class="line"></div><div class="line">        sort(p + <span class="number">1</span>, p + tot + <span class="number">1</span>, cmp); <span class="keyword">int</span> tmp = <span class="number">1</span>;</div><div class="line">        rep(i, <span class="number">2</span>, tot) <span class="keyword">if</span>(LCA(p[i], p[tmp]) != p[tmp]) p[++tmp] = p[i];</div><div class="line">        tot = tmp;</div><div class="line"></div><div class="line">        stk[++top] = <span class="number">1</span>;</div><div class="line">        rep(i, <span class="number">1</span>, tot)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> u = p[i], lca = LCA(u, stk[top]);</div><div class="line">            <span class="keyword">if</span>(lca == stk[top]) stk[++top] = u;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(top &gt;= <span class="number">2</span> &amp;&amp; dep[stk[top - <span class="number">1</span>]] &gt;= dep[lca])</div><div class="line">                &#123;</div><div class="line">                    ae(stk[top], stk[top - <span class="number">1</span>]), ae(stk[top - <span class="number">1</span>], stk[top]);</div><div class="line">                    --top;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(stk[top] != lca)</div><div class="line">                &#123;</div><div class="line">                    ae(lca, stk[top]), ae(stk[top], lca);</div><div class="line">                    stk[top] = lca;</div><div class="line">                &#125;</div><div class="line">                stk[++top] = u;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        rep(i, <span class="number">1</span>, top - <span class="number">1</span>) ae(stk[i], stk[i + <span class="number">1</span>]), ae(stk[i + <span class="number">1</span>], stk[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">LL <span class="title">dp</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre)</span></span></div><div class="line">    &#123;</div><div class="line">        LL f = <span class="number">0</span>;</div><div class="line">        erep(i, u) <span class="keyword">if</span>(v != pre) f += min(dp(v, u), mine[v]);</div><div class="line">        <span class="keyword">return</span> !f ? INF : f;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[maxn], k;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">    freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    read(n); <span class="keyword">int</span> u, v; LL c;</div><div class="line">    rep(i, <span class="number">1</span>, n - <span class="number">1</span>) read(u), read(v), read(c), ae(u, v, c), ae(v, u, c);</div><div class="line">    mine[<span class="number">1</span>] = INF, dfs1(<span class="number">1</span>); dfs2(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    read(m);</div><div class="line">    <span class="keyword">while</span>(m--)</div><div class="line">    &#123;</div><div class="line">        read(k);</div><div class="line">        rep(i, <span class="number">1</span>, k) read(a[i]);</div><div class="line">        vtree::build(a, k);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, vtree::dp(<span class="number">1</span>, <span class="number">0</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-一棵-n-个点，边带权的树，-m-次询问，每次给出k个关键点，求割掉最小代价的边使1号点不能到达任何关键点。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-一棵-n-个点，边带权的树，-m-次询问，每次给出k个关键点，求割掉最小代价的边使1号点不能到达任何关键点。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:一棵$n$个点，边带权的树，$m$次询问，每次给出k个关键点，求割掉最小代价的边使1号点不能到达任何关键点。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:一棵$n$个点，边带权的树，$m$次询问，每次给出k个关键点，求割掉最小代价的边使1号点不能到达任何关键点。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="虚树" scheme="http://xffyjq.github.com/tags/%E8%99%9A%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1061 志愿者招募</title>
    <link href="http://xffyjq.github.com/2017/06/16/BZOJ1061/"/>
    <id>http://xffyjq.github.com/2017/06/16/BZOJ1061/</id>
    <published>2017-06-16T12:31:45.000Z</published>
    <updated>2017-06-16T13:06:06.658Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-一个项目有-n-天，第-i-天至少需要-A-i-个人。有-m-种志愿者可以招募，每一种可以从第-s-i-天工作到-t-i-天，费用每人-c-i-元。求用最少费用招募志愿者满足要求。"><a href="#emsp-emsp-题意-一个项目有-n-天，第-i-天至少需要-A-i-个人。有-m-种志愿者可以招募，每一种可以从第-s-i-天工作到-t-i-天，费用每人-c-i-元。求用最少费用招募志愿者满足要求。" class="headerlink" title="&emsp;&emsp;题意:一个项目有$n$天，第$i$天至少需要$A_i$个人。有$m$种志愿者可以招募，每一种可以从第$s_i$天工作到$t_i$天，费用每人$c_i$元。求用最少费用招募志愿者满足要求。"></a>&emsp;&emsp;题意:一个项目有$n$天，第$i$天至少需要$A_i$个人。有$m$种志愿者可以招募，每一种可以从第$s_i$天工作到$t_i$天，费用每人$c_i$元。求用最少费用招募志愿者满足要求。</h3><a id="more"></a>
<p>&emsp;&emsp;这道题是经典的流量平衡模型。常用来解决一类特殊的线性规划问题。<br>&emsp;&emsp;根据$n$天每天的供求关系，我们可以列出一系列不等式，最后求最大化一个线性式子。这正是线性规划。<br>&emsp;&emsp;添加上松弛变量变为等式，等式间相减，发现每个变量正好在左边出现一次，在右边出现一次。<br>&emsp;&emsp;这个时候我们就可以以等式为点，将符号为负的变量移到右边。等式左右表示入流量和出流量的平衡。假定左边为出流量，右边为入流量。每个变量由在左边的式子向在右边的式子连边，其中代表志愿者的边费用为$c_i$。将源点右边的常量连边，左边的常量与汇连边。跑一遍费用流，解决问题。<br>&emsp;&emsp;存信息的数组又开小了，调了好久。。。明明可以在线直接把边加了的啊。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(i, u) for(int i = head[u], v = to[i]; i; i = nxt[i], v = to[i])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a);</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c - <span class="string">'0'</span>; <span class="built_in">isdigit</span>(c = getchar()); (x *= <span class="number">10</span>) += c - <span class="string">'0'</span>);</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>, maxm = <span class="number">15000</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="keyword">int</span> k[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[maxn], nxt[maxm &lt;&lt; <span class="number">1</span>], to[maxm &lt;&lt; <span class="number">1</span>], e = <span class="number">1</span>, c[maxm &lt;&lt; <span class="number">1</span>], w[maxm &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ae</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> C, <span class="keyword">int</span> W)</span></span></div><div class="line">&#123;</div><div class="line">	to[++e] = y; nxt[e] = head[x]; head[x] = e;</div><div class="line">	c[e] = C; w[e] = W;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> MCMF</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> S, T, p[maxn];</div><div class="line">	<span class="keyword">int</span> dis[maxn], res[maxn], cost;</div><div class="line"></div><div class="line">	<span class="keyword">bool</span> inq[maxn];</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		ms(dis, INF);</div><div class="line">		<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; q.push(S); inq[S] = <span class="number">1</span>;</div><div class="line">		dis[S] = p[S] = <span class="number">0</span>; res[S] = INF;</div><div class="line">		<span class="keyword">while</span>(!q.empty())</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> u = q.front(); q.pop(); inq[u] = <span class="number">0</span>;</div><div class="line">			erep(i, u) <span class="keyword">if</span>(c[i] &amp;&amp; chkmin(dis[v], dis[u] + w[i]))</div><div class="line">			&#123;</div><div class="line">				res[v] = min(c[i], res[u]); p[v] = i;</div><div class="line">				<span class="keyword">if</span>(!inq[v]) inq[v] = <span class="number">1</span>, q.push(v);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(dis[T] == INF) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		cost += dis[T] * res[T];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> u = T; u != S; u = to[p[u] ^ <span class="number">1</span>]) c[p[u]] -= res[T], c[p[u] ^ <span class="number">1</span>] += res[T];</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">maxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></div><div class="line">	&#123;</div><div class="line">		S = s, T = t; cost = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(SPFA());</div><div class="line">		<span class="keyword">return</span> cost;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">	freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	read(n); read(m); <span class="keyword">int</span> s = <span class="number">0</span>, t = n + <span class="number">2</span>;</div><div class="line">	rep(i, <span class="number">1</span>, n) read(k[i]);</div><div class="line">	rep(i, <span class="number">1</span>, m)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> l, r, cost;</div><div class="line">		read(l), read(r), read(cost);</div><div class="line">		ae(l, r + <span class="number">1</span>, INF, cost), ae(r + <span class="number">1</span>, l, <span class="number">0</span>, -cost);</div><div class="line">	&#125;</div><div class="line">	rep(i, <span class="number">1</span>, n + <span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(k[i] &gt; k[i - <span class="number">1</span>]) ae(s, i, k[i] - k[i - <span class="number">1</span>], <span class="number">0</span>), ae(i, s, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span>(k[i] &lt; k[i - <span class="number">1</span>] ) ae(i, t, k[i - <span class="number">1</span>] - k[i], <span class="number">0</span>), ae(t, i, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	rep(i, <span class="number">2</span>, n + <span class="number">1</span>) ae(i, i - <span class="number">1</span>, INF, <span class="number">0</span>), ae(i - <span class="number">1</span>, i, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, MCMF::maxflow(s, t));</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-一个项目有-n-天，第-i-天至少需要-A-i-个人。有-m-种志愿者可以招募，每一种可以从第-s-i-天工作到-t-i-天，费用每人-c-i-元。求用最少费用招募志愿者满足要求。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-一个项目有-n-天，第-i-天至少需要-A-i-个人。有-m-种志愿者可以招募，每一种可以从第-s-i-天工作到-t-i-天，费用每人-c-i-元。求用最少费用招募志愿者满足要求。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:一个项目有$n$天，第$i$天至少需要$A_i$个人。有$m$种志愿者可以招募，每一种可以从第$s_i$天工作到$t_i$天，费用每人$c_i$元。求用最少费用招募志愿者满足要求。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:一个项目有$n$天，第$i$天至少需要$A_i$个人。有$m$种志愿者可以招募，每一种可以从第$s_i$天工作到$t_i$天，费用每人$c_i$元。求用最少费用招募志愿者满足要求。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="网络流" scheme="http://xffyjq.github.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3532 Lis</title>
    <link href="http://xffyjq.github.com/2017/06/16/BZOJ3532/"/>
    <id>http://xffyjq.github.com/2017/06/16/BZOJ3532/</id>
    <published>2017-06-16T05:26:15.000Z</published>
    <updated>2017-06-16T12:20:31.036Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-一个三元组序列-A-i-B-i-C-i-，求删掉若干项，使剩下项关于-A-i-的最长上升子序列长度减少1，并使得删去项-B-i-之和最小。输出最小值以及删去项按-C-i-排序后的字典序最小的方案。"><a href="#emsp-emsp-题意-一个三元组序列-A-i-B-i-C-i-，求删掉若干项，使剩下项关于-A-i-的最长上升子序列长度减少1，并使得删去项-B-i-之和最小。输出最小值以及删去项按-C-i-排序后的字典序最小的方案。" class="headerlink" title="&emsp;&emsp;题意:一个三元组序列$(A_i, B_i, C_i)$，求删掉若干项，使剩下项关于$A_i$的最长上升子序列长度减少1，并使得删去项$B_i$之和最小。输出最小值以及删去项按$C_i$排序后的字典序最小的方案。"></a>&emsp;&emsp;题意:一个三元组序列$(A_i, B_i, C_i)$，求删掉若干项，使剩下项关于$A_i$的最长上升子序列长度减少1，并使得删去项$B_i$之和最小。输出最小值以及删去项按$C_i$排序后的字典序最小的方案。</h3><a id="more"></a>
<p>&emsp;&emsp;这道题如果不输出方案，那么就是一个最小割。首先每一项拆成两个点，中间连权值为删去费用$B_i$的边。将每一项按照$A_i$的dp关系，$A_i &lt; A_j$ 且 $dp_i + 1 = dp_j$ ，即i能转移到j，则i向j连INF边。$dp_i = 1$的由原点向i连INF边，$dp_i = Max$的由i向汇点连INF边。最小割就是答案。<br>&emsp;&emsp;输出方案的话，我们考虑所有最大流之后满流且两端点互不可达的边，只有这些边可能且一定在最小割的某个可行方案中。因为要求字典序最小，我们便从最小的边开始枚举起。枚举到一条边满足条件后，便贪心地加入答案，并且去掉这条边的影响。即该边被割后，其他一些边就没有必要割了，这些边就要排除在条件之外。<br>&emsp;&emsp;怎么排除?退流。例如我们选中一条边$(u, v)$，我们由汇至v，u至源分别再跑一遍网络流，就可以退掉与$(u, v)$相关的流。相当于在原图中没有出现过$(u, v)$这条边，这时还需要割的边再继续考虑下去即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(i, u) for(int i = head[u], v = to[i]; i; i = nxt[i], v = to[i])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) (int((x).size()))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ALL(x) (x).begin(), (x).end()</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c - <span class="string">'0'</span>; <span class="built_in">isdigit</span>(c = getchar()); (x *= <span class="number">10</span>) += c - <span class="string">'0'</span>);</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">710</span>, INF = <span class="number">0x3f3f3f3f</span>, maxn = <span class="number">1410</span>, maxm = <span class="number">600010</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> a[maxN], b[maxN];</div><div class="line"><span class="keyword">int</span> f[maxN];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> val, id;</div><div class="line"></div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> info&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> val &lt; rhs.val; &#125;</div><div class="line">&#125; C[maxN];</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[maxn], nxt[maxm &lt;&lt; <span class="number">1</span>], to[maxm &lt;&lt; <span class="number">1</span>], c[maxm &lt;&lt; <span class="number">1</span>], e;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ae</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w)</span> </span>&#123; to[++e] = y; nxt[e] = head[x]; head[x] = e; c[e] = w; &#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> dinic</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> S, T, dis[maxn], cur[maxn];</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; q.push(S);</div><div class="line">		ms(dis, <span class="number">0</span>); dis[S] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">while</span>(!q.empty())</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line">			erep(i, u) <span class="keyword">if</span>(c[i] &amp;&amp; !dis[v]) dis[v] = dis[u] + <span class="number">1</span>, q.push(v);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> dis[T];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(u == T) <span class="keyword">return</span> flow;</div><div class="line">		<span class="keyword">int</span> res = flow;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; i; i = nxt[i])</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> v = to[i];</div><div class="line">			<span class="keyword">if</span>(c[i] &amp;&amp; dis[u] + <span class="number">1</span> == dis[v])</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">int</span> d = dfs(v, min(c[i], res));</div><div class="line">				c[i] -= d; c[i ^ <span class="number">1</span>] += d;</div><div class="line">				res -= d; <span class="keyword">if</span>(!res) <span class="keyword">return</span> flow;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> flow - res;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">maxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></div><div class="line">	&#123;</div><div class="line">		S = s, T = t; <span class="keyword">int</span> flow = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(bfs())</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">memcpy</span>(cur, head, <span class="keyword">sizeof</span> head);</div><div class="line">			flow += dfs(S, INF);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> flow;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; q.push(s);</div><div class="line">	ms(vis, <span class="number">0</span>); vis[s] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span>(!q.empty())</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line">		<span class="keyword">if</span>(u == t) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		erep(i, u) <span class="keyword">if</span>(c[i] &amp;&amp; !vis[v]) vis[v] = <span class="number">1</span>, q.push(v);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	ms(head, <span class="number">0</span>); e = <span class="number">1</span>;</div><div class="line">	ms(f, <span class="number">0</span>); ans.clear();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">	freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	<span class="keyword">int</span> _; read(_);</div><div class="line">	<span class="keyword">while</span>(_--)</div><div class="line">	&#123;</div><div class="line">		init();</div><div class="line">		read(n); <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">		rep(i, <span class="number">1</span>, n) read(a[i]);</div><div class="line">		rep(i, <span class="number">1</span>, n) read(b[i]);</div><div class="line">		rep(i, <span class="number">1</span>, n) read(C[i].val), C[i].id = i;</div><div class="line">		</div><div class="line">		rep(i, <span class="number">1</span>, n) rep(j, <span class="number">0</span>, i - <span class="number">1</span>) <span class="keyword">if</span>(a[j] &lt; a[i]) chkmax(f[i], f[j] + <span class="number">1</span>);</div><div class="line">		rep(i, <span class="number">1</span>, n) chkmax(tmp, f[i]);</div><div class="line"></div><div class="line">		rep(i, <span class="number">1</span>, n) ae(i, n + i, b[i]), ae(n + i, i, <span class="number">0</span>);</div><div class="line">		rep(i, <span class="number">1</span>, n) <span class="keyword">if</span>(f[i] == <span class="number">1</span>) ae(<span class="number">0</span>, i, INF), ae(i, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">		rep(i, <span class="number">1</span>, n) <span class="keyword">if</span>(f[i] == tmp)</div><div class="line">			ae(n + i, <span class="number">2</span> * n + <span class="number">1</span>, INF), ae(<span class="number">2</span> * n + <span class="number">1</span>, n + i, <span class="number">0</span>);</div><div class="line">		rep(i, <span class="number">1</span>, n) rep(j, i + <span class="number">1</span>, n)</div><div class="line">			<span class="keyword">if</span>(a[i] &lt; a[j] &amp;&amp; f[i] + <span class="number">1</span> == f[j]) ae(n + i, j, INF), ae(j, n + i, <span class="number">0</span>);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, dinic::maxflow(<span class="number">0</span>, <span class="number">2</span> * n + <span class="number">1</span>));</div><div class="line">		sort(C + <span class="number">1</span>, C + n + <span class="number">1</span>);</div><div class="line">		rep(i, <span class="number">1</span>, n)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> x = C[i].id;</div><div class="line">			<span class="keyword">if</span>(c[x * <span class="number">2</span>] || bfs(x, x + n)) <span class="keyword">continue</span>;</div><div class="line">			ans.pb(x);</div><div class="line">			dinic::maxflow(<span class="number">2</span> * n + <span class="number">1</span>, x + n);</div><div class="line">			dinic::maxflow(x, <span class="number">0</span>);</div><div class="line">			c[x * <span class="number">2</span>] = c[x * <span class="number">2</span> + <span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, SZ(ans)); sort(ALL(ans));</div><div class="line">		rep(i, <span class="number">0</span>, SZ(ans) - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], (i == SZ(ans) - <span class="number">1</span>) ? <span class="string">'\n'</span> : <span class="string">' '</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-一个三元组序列-A-i-B-i-C-i-，求删掉若干项，使剩下项关于-A-i-的最长上升子序列长度减少1，并使得删去项-B-i-之和最小。输出最小值以及删去项按-C-i-排序后的字典序最小的方案。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-一个三元组序列-A-i-B-i-C-i-，求删掉若干项，使剩下项关于-A-i-的最长上升子序列长度减少1，并使得删去项-B-i-之和最小。输出最小值以及删去项按-C-i-排序后的字典序最小的方案。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:一个三元组序列$(A_i, B_i, C_i)$，求删掉若干项，使剩下项关于$A_i$的最长上升子序列长度减少1，并使得删去项$B_i$之和最小。输出最小值以及删去项按$C_i$排序后的字典序最小的方案。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:一个三元组序列$(A_i, B_i, C_i)$，求删掉若干项，使剩下项关于$A_i$的最长上升子序列长度减少1，并使得删去项$B_i$之和最小。输出最小值以及删去项按$C_i$排序后的字典序最小的方案。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="网络流" scheme="http://xffyjq.github.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3876 支线剧情</title>
    <link href="http://xffyjq.github.com/2017/06/16/BZOJ3876/"/>
    <id>http://xffyjq.github.com/2017/06/16/BZOJ3876/</id>
    <published>2017-06-16T05:14:55.000Z</published>
    <updated>2017-06-16T05:25:30.338Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-一个DAG，每条路径的起点固定为1，每条边带权，用几条路径，以最少权值代价使整个DAG每条边都至少被覆盖一次。"><a href="#emsp-emsp-题意-一个DAG，每条路径的起点固定为1，每条边带权，用几条路径，以最少权值代价使整个DAG每条边都至少被覆盖一次。" class="headerlink" title="&emsp;&emsp;题意:一个DAG，每条路径的起点固定为1，每条边带权，用几条路径，以最少权值代价使整个DAG每条边都至少被覆盖一次。"></a>&emsp;&emsp;题意:一个DAG，每条路径的起点固定为1，每条边带权，用几条路径，以最少权值代价使整个DAG每条边都至少被覆盖一次。</h3><a id="more"></a>
<p>&emsp;&emsp;每条边至少被覆盖一次，这可以设计成下界为1，上界INF的上下界网络流。但是边带权，而且权最少，要跑费用流?<br>&emsp;&emsp;上下界最小费用可行流!将汇点向源点连边之后原图变成一个无源汇的图。从超级源向超级汇跑一个最小费用最大流即可。因为保证有解，不用担心其他问题。<br>&emsp;&emsp;话说写费用流总是不记得更新p数组(用来记录pre)啊。要注意。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(i, u) for(int i = head[u], v = to[i]; i; i = nxt[i], v = to[i])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a);</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c - <span class="string">'0'</span>; <span class="built_in">isdigit</span>(c = getchar()); (x *= <span class="number">10</span>) += c - <span class="string">'0'</span>);</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">310</span>, maxm = <span class="number">16000</span>, INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[maxn], to[maxm &lt;&lt; <span class="number">1</span>], nxt[maxm &lt;&lt; <span class="number">1</span>], c[maxm &lt;&lt; <span class="number">1</span>], w[maxm &lt;&lt; <span class="number">1</span>], e = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ae</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> C, <span class="keyword">int</span> W)</span> </span>&#123; to[++e] = y; nxt[e] = head[x]; head[x] = e; c[e] = C; w[e] = W; &#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> MCMF</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> S, T, dis[maxn], res[maxn], p[maxn], cost;</div><div class="line"></div><div class="line">	<span class="keyword">bool</span> inq[maxn];</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		ms(dis, INF);</div><div class="line">		<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; ms(inq, <span class="number">0</span>);</div><div class="line">		q.push(S); dis[S] = p[S] = <span class="number">0</span>; res[S] = INF;</div><div class="line">		<span class="keyword">while</span>(!q.empty())</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> u = q.front(); q.pop(); inq[u] = <span class="number">0</span>;</div><div class="line">			erep(i, u) <span class="keyword">if</span>(c[i] &amp;&amp; chkmin(dis[v], dis[u] + w[i]))</div><div class="line">			&#123;</div><div class="line">				res[v] = min(res[u], c[i]); p[v] = i;</div><div class="line">				<span class="keyword">if</span>(!inq[v]) q.push(v), inq[v] = <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(dis[T] == INF) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		cost += res[T] * dis[T];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> u = T; u != S; u = to[p[u] ^ <span class="number">1</span>]) c[p[u]] -= res[T], c[p[u] ^ <span class="number">1</span>] += res[T];</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">maxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></div><div class="line">	&#123;</div><div class="line">		S = s, T = t; cost = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(SPFA());</div><div class="line">		<span class="keyword">return</span> cost;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">	freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	read(n); <span class="keyword">int</span> s = <span class="number">0</span>, t = n + <span class="number">1</span>, ss = n + <span class="number">2</span>, tt = n + <span class="number">3</span>;</div><div class="line">	ae(s, <span class="number">1</span>, INF, <span class="number">0</span>), ae(<span class="number">1</span>, s, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">	rep(i, <span class="number">1</span>, n) ae(i, t, INF, <span class="number">0</span>), ae(t, i, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">	ae(t, s, INF, <span class="number">0</span>); ae(s, t, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">	rep(i, <span class="number">1</span>, n)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> k, v, W; read(k);</div><div class="line">		rep(j, <span class="number">1</span>, k)</div><div class="line">		&#123;</div><div class="line">			read(v), read(W);</div><div class="line">			ae(ss, v, <span class="number">1</span>, W); ae(v, ss, <span class="number">0</span>, -W);</div><div class="line">			ae(i, v, INF, W); ae(v, i, <span class="number">0</span>, -W);</div><div class="line">			ae(i, tt, <span class="number">1</span>, <span class="number">0</span>); ae(tt, i, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, MCMF::maxflow(ss, tt));</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-一个DAG，每条路径的起点固定为1，每条边带权，用几条路径，以最少权值代价使整个DAG每条边都至少被覆盖一次。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-一个DAG，每条路径的起点固定为1，每条边带权，用几条路径，以最少权值代价使整个DAG每条边都至少被覆盖一次。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:一个DAG，每条路径的起点固定为1，每条边带权，用几条路径，以最少权值代价使整个DAG每条边都至少被覆盖一次。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:一个DAG，每条路径的起点固定为1，每条边带权，用几条路径，以最少权值代价使整个DAG每条边都至少被覆盖一次。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="网络流" scheme="http://xffyjq.github.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ2132 圈地计划</title>
    <link href="http://xffyjq.github.com/2017/06/16/BZOJ2132/"/>
    <id>http://xffyjq.github.com/2017/06/16/BZOJ2132/</id>
    <published>2017-06-16T05:03:07.000Z</published>
    <updated>2017-06-16T05:22:14.638Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-一个矩形区域，每个小区域可以建商业区或工业区，可以获得不同价值。对每个区域，如果相邻区域建的区不同，则该区域可以获得额外价值。求最大总价值。"><a href="#emsp-emsp-题意-一个矩形区域，每个小区域可以建商业区或工业区，可以获得不同价值。对每个区域，如果相邻区域建的区不同，则该区域可以获得额外价值。求最大总价值。" class="headerlink" title="&emsp;&emsp;题意:一个矩形区域，每个小区域可以建商业区或工业区，可以获得不同价值。对每个区域，如果相邻区域建的区不同，则该区域可以获得额外价值。求最大总价值。"></a>&emsp;&emsp;题意:一个矩形区域，每个小区域可以建商业区或工业区，可以获得不同价值。对每个区域，如果相邻区域建的区不同，则该区域可以获得额外价值。求最大总价值。</h3><a id="more"></a>
<p>&emsp;&emsp;相邻区域相同则获得价值的建模，之前也提到过。只需要新建两个点用对应价值连向两种不同决策。如果对两种决策而言，同时选获得的价值一样，则可以直接将两区域互相连边即可。<br>&emsp;&emsp;那么不同呢?我们发现这个图是一个矩阵，也就是一个二分图。我们将节点黑白染色放在两部，对白节点，源点为建商业区的决策，汇点为建工业区的决策。黑点正好相反。这样我们就巧妙地转化为区域相同的问题了。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(i, u) for(int i = head[u], v = to[i]; i; i = nxt[i], v = to[i])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a);</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c - <span class="string">'0'</span>; <span class="built_in">isdigit</span>(c = getchar()); (x *= <span class="number">10</span>) += c - <span class="string">'0'</span>);</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>, maxm = <span class="number">60010</span>, INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, sum;</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[maxn], nxt[maxm &lt;&lt; <span class="number">1</span>], to[maxm &lt;&lt; <span class="number">1</span>], c[maxm &lt;&lt; <span class="number">1</span>], e = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ae</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w)</span> </span>&#123; to[++e] = y; nxt[e] = head[x]; head[x] = e; c[e] = w; &#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> isap</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> S, T, N, gap[maxn], dis[maxn];</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(u == T) <span class="keyword">return</span> flow;</div><div class="line">		<span class="keyword">int</span> res = flow;</div><div class="line">		erep(i, u) <span class="keyword">if</span>(c[i] &amp;&amp; dis[u] == dis[v] + <span class="number">1</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> d = dfs(v, min(c[i], res));</div><div class="line">			c[i] -= d; c[i ^ <span class="number">1</span>] += d; res -= d;</div><div class="line">			<span class="keyword">if</span>(!res) <span class="keyword">return</span> flow;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(!--gap[dis[u]]) dis[S] = N;</div><div class="line">		++gap[++dis[u]];</div><div class="line">		<span class="keyword">return</span> flow - res;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">maxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> tot)</span></span></div><div class="line">	&#123;</div><div class="line">		S = s, T = t, N = tot; <span class="keyword">int</span> flow = <span class="number">0</span>;</div><div class="line">		ms(gap, <span class="number">0</span>); ms(dis, <span class="number">0</span>);</div><div class="line">		<span class="keyword">for</span>(gap[<span class="number">0</span>] = N; dis[S] &lt; N;) flow += dfs(S, INF);</div><div class="line">		<span class="keyword">return</span> flow;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[<span class="number">110</span>][<span class="number">110</span>], b[<span class="number">110</span>][<span class="number">110</span>], w[<span class="number">110</span>][<span class="number">110</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= n &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= m; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">	freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	read(n); read(m); <span class="keyword">int</span> t = n * m + <span class="number">1</span>;</div><div class="line">	rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, m) sum += read(a[i][j]);</div><div class="line">	rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, m) sum += read(b[i][j]);</div><div class="line">	rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, m) read(w[i][j]);</div><div class="line">	rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, m)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> id = (i - <span class="number">1</span>) * m + j;</div><div class="line">		<span class="keyword">if</span>((i &amp; <span class="number">1</span>) ^ (j &amp; <span class="number">1</span>))</div><div class="line">		&#123;</div><div class="line">			ae(<span class="number">0</span>, id, a[i][j]); ae(id, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">			ae(id, t, b[i][j]); ae(t, id, <span class="number">0</span>);</div><div class="line">			rep(k, <span class="number">0</span>, <span class="number">3</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">int</span> x = i + d[k][<span class="number">0</span>], y = j + d[k][<span class="number">1</span>];</div><div class="line">				<span class="keyword">if</span>(in(x, y))</div><div class="line">				&#123;</div><div class="line">					<span class="keyword">int</span> idx = (x - <span class="number">1</span>) * m + y;</div><div class="line">					ae(id, idx, w[i][j] + w[x][y]); ae(idx, id, <span class="number">0</span>);</div><div class="line">					ae(idx, id, w[i][j] + w[x][y]); ae(id, idx, <span class="number">0</span>);</div><div class="line">					sum += w[i][j] + w[x][y];</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			ae(<span class="number">0</span>, id, b[i][j]); ae(id, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">			ae(id, t, a[i][j]); ae(t, id, <span class="number">0</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum - isap::maxflow(<span class="number">0</span>, t, t + <span class="number">1</span>));</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-一个矩形区域，每个小区域可以建商业区或工业区，可以获得不同价值。对每个区域，如果相邻区域建的区不同，则该区域可以获得额外价值。求最大总价值。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-一个矩形区域，每个小区域可以建商业区或工业区，可以获得不同价值。对每个区域，如果相邻区域建的区不同，则该区域可以获得额外价值。求最大总价值。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:一个矩形区域，每个小区域可以建商业区或工业区，可以获得不同价值。对每个区域，如果相邻区域建的区不同，则该区域可以获得额外价值。求最大总价值。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:一个矩形区域，每个小区域可以建商业区或工业区，可以获得不同价值。对每个区域，如果相邻区域建的区不同，则该区域可以获得额外价值。求最大总价值。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="网络流" scheme="http://xffyjq.github.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ2127 happiness</title>
    <link href="http://xffyjq.github.com/2017/06/16/BZOJ2127/"/>
    <id>http://xffyjq.github.com/2017/06/16/BZOJ2127/</id>
    <published>2017-06-16T04:51:04.000Z</published>
    <updated>2017-06-16T05:21:56.869Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-文理分科，全班每个同学分到文科或理科有不同的喜悦值。相邻两个同学同时分到文科和理科有额外喜悦值。求分配方案使总喜悦值最大。"><a href="#emsp-emsp-题意-文理分科，全班每个同学分到文科或理科有不同的喜悦值。相邻两个同学同时分到文科和理科有额外喜悦值。求分配方案使总喜悦值最大。" class="headerlink" title="&emsp;&emsp;题意:文理分科，全班每个同学分到文科或理科有不同的喜悦值。相邻两个同学同时分到文科和理科有额外喜悦值。求分配方案使总喜悦值最大。"></a>&emsp;&emsp;题意:文理分科，全班每个同学分到文科或理科有不同的喜悦值。相邻两个同学同时分到文科和理科有额外喜悦值。求分配方案使总喜悦值最大。</h3><a id="more"></a>
<p>&emsp;&emsp;这道题是比较经典的最小割模型了。<br>&emsp;&emsp;源点文，汇点理，将每个同学与对应点连对应喜悦值的边。处理相邻就新建点，向对应文或理科点连对应喜悦值的边，向两个人连INF。最小割即为答案。<br>&emsp;&emsp;不过这道题调了比较长的时间。最后发现时建点时编号过于”精打细算”，将点数与实际编到的号数混淆导致弄错了。以后建点与边的时候一定要算准，而且在条件允许的情况下开得宽松一些，才可以防止难以调试的错误发生。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(i, u) for(int i = head[u], v = to[i]; i; i = nxt[i], v = to[i])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a);</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c - <span class="string">'0'</span>; <span class="built_in">isdigit</span>(c = getchar()); (x *= <span class="number">10</span>) += c - <span class="string">'0'</span>);</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50010</span>, maxm = <span class="number">140010</span>, INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, tot;</div><div class="line"><span class="keyword">int</span> a[<span class="number">110</span>][<span class="number">110</span>], b[<span class="number">110</span>][<span class="number">110</span>], samed_a[<span class="number">110</span>][<span class="number">110</span>], samed_b[<span class="number">110</span>][<span class="number">110</span>], samer_a[<span class="number">110</span>][<span class="number">110</span>], samer_b[<span class="number">110</span>][<span class="number">110</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[maxn], nxt[maxm &lt;&lt; <span class="number">1</span>], to[maxm &lt;&lt; <span class="number">1</span>], c[maxm &lt;&lt; <span class="number">1</span>], e = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ae</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w)</span> </span>&#123; to[++e] = y; nxt[e] = head[x]; head[x] = e; c[e] = w; &#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> dinic</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> S, T, dis[maxn], cur[maxn];</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; ms(dis, <span class="number">0</span>);</div><div class="line">		q.push(S); dis[S] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">while</span>(!q.empty())</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> u = q.front(); q.pop();</div><div class="line">			erep(i, u) <span class="keyword">if</span>(c[i] &amp;&amp; !dis[v]) dis[v] = dis[u] + <span class="number">1</span>, q.push(v);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> dis[T];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(u == T) <span class="keyword">return</span> flow;</div><div class="line">		<span class="keyword">int</span> res = flow;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span>&amp; i = cur[u]; i; i = nxt[i])</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> v = to[i];</div><div class="line">			<span class="keyword">if</span>(c[i] &amp;&amp; dis[u] + <span class="number">1</span> == dis[v])</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">int</span> d = dfs(v, min(c[i], res));</div><div class="line">				c[i] -= d; c[i ^ <span class="number">1</span>] += d;</div><div class="line">				res -= d; <span class="keyword">if</span>(!res) <span class="keyword">return</span> flow;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> flow - res;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">maxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></div><div class="line">	&#123;</div><div class="line">		S = s, T = t; <span class="keyword">int</span> flow = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(bfs())</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">memcpy</span>(cur, head, <span class="keyword">sizeof</span> head);</div><div class="line">			flow += dfs(S, INF);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> flow;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">	freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	read(n); read(m); <span class="keyword">int</span> t = <span class="number">5</span> * n * m + <span class="number">1</span>;</div><div class="line">	rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, m) tot += read(a[i][j]);</div><div class="line">	rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, m) tot += read(b[i][j]);</div><div class="line">	rep(i, <span class="number">1</span>, n - <span class="number">1</span>) rep(j, <span class="number">1</span>, m) tot += read(samed_a[i][j]);</div><div class="line">	rep(i, <span class="number">1</span>, n - <span class="number">1</span>) rep(j, <span class="number">1</span>, m) tot += read(samed_b[i][j]);</div><div class="line">	rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, m - <span class="number">1</span>) tot += read(samer_a[i][j]);</div><div class="line">	rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, m - <span class="number">1</span>) tot += read(samer_b[i][j]);</div><div class="line"></div><div class="line">	rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, m)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> id = (i - <span class="number">1</span>) * m + j;</div><div class="line">		ae(<span class="number">0</span>, id, a[i][j]), ae(id, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">		ae(id, t, b[i][j]), ae(t, id, <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span>(i != n)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> idx = n * m + id;</div><div class="line">			ae(<span class="number">0</span>, idx, samed_a[i][j]), ae(idx, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">			ae(idx, id, INF), ae(id, idx, <span class="number">0</span>);</div><div class="line">			ae(idx, id + m, INF), ae(id + m, idx, <span class="number">0</span>);</div><div class="line"></div><div class="line">			idx = <span class="number">2</span> * n * m + id;</div><div class="line">			ae(id, idx, INF), ae(idx, id, <span class="number">0</span>);</div><div class="line">			ae(id + m, idx, INF), ae(idx, id + m, <span class="number">0</span>);</div><div class="line">			ae(idx, t, samed_b[i][j]), ae(t, idx, <span class="number">0</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(j != m)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> idx = <span class="number">3</span> * n * m + id;</div><div class="line">			ae(<span class="number">0</span>, idx, samer_a[i][j]), ae(idx, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">			ae(idx, id, INF), ae(id, idx, <span class="number">0</span>);</div><div class="line">			ae(idx, id + <span class="number">1</span>, INF), ae(id + <span class="number">1</span>, idx, <span class="number">0</span>);</div><div class="line"></div><div class="line">			idx = <span class="number">4</span> * n * m + id;</div><div class="line">			ae(id, idx, INF), ae(idx, id, <span class="number">0</span>);</div><div class="line">			ae(id + <span class="number">1</span>, idx, INF), ae(idx, id + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">			ae(idx, t, samer_b[i][j]), ae(t, idx, <span class="number">0</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, tot - dinic::maxflow(<span class="number">0</span>, t));</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-文理分科，全班每个同学分到文科或理科有不同的喜悦值。相邻两个同学同时分到文科和理科有额外喜悦值。求分配方案使总喜悦值最大。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-文理分科，全班每个同学分到文科或理科有不同的喜悦值。相邻两个同学同时分到文科和理科有额外喜悦值。求分配方案使总喜悦值最大。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:文理分科，全班每个同学分到文科或理科有不同的喜悦值。相邻两个同学同时分到文科和理科有额外喜悦值。求分配方案使总喜悦值最大。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:文理分科，全班每个同学分到文科或理科有不同的喜悦值。相邻两个同学同时分到文科和理科有额外喜悦值。求分配方案使总喜悦值最大。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="网络流" scheme="http://xffyjq.github.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3674 可持久化并查集加强版</title>
    <link href="http://xffyjq.github.com/2017/06/09/BZOJ3674/"/>
    <id>http://xffyjq.github.com/2017/06/09/BZOJ3674/</id>
    <published>2017-06-09T00:19:29.000Z</published>
    <updated>2017-06-09T00:58:19.705Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-n个点，3种操作，强制在线"><a href="#emsp-emsp-题意-n个点，3种操作，强制在线" class="headerlink" title="&emsp;&emsp;题意:n个点，3种操作，强制在线:"></a>&emsp;&emsp;题意:n个点，3种操作，强制在线:</h3><h3 id="emsp-emsp-1、连边-a-b"><a href="#emsp-emsp-1、连边-a-b" class="headerlink" title="&emsp;&emsp;1、连边(a, b)"></a>&emsp;&emsp;1、连边(a, b)</h3><h3 id="emsp-emsp-2、跳到第k次操作之后的状态"><a href="#emsp-emsp-2、跳到第k次操作之后的状态" class="headerlink" title="&emsp;&emsp;2、跳到第k次操作之后的状态"></a>&emsp;&emsp;2、跳到第k次操作之后的状态</h3><h3 id="emsp-emsp-3、询问-a-b-是否连通"><a href="#emsp-emsp-3、询问-a-b-是否连通" class="headerlink" title="&emsp;&emsp;3、询问(a, b) 是否连通"></a>&emsp;&emsp;3、询问(a, b) 是否连通</h3><a id="more"></a>
<p>&emsp;&emsp;1和3操作是一个裸的并查集。<br>&emsp;&emsp;2操作?暴力加边删边显然不可行。可持久化?<br>&emsp;&emsp;我们发现并查集本质上就是一个数组。于是我们就是要将一个数组可持久化，支持查询每一个历史版本。<br>&emsp;&emsp;我们可以用主席树来维护。主席树的叶子节点保存并查集数组，非叶子节点什么也不做。这样我们就保存下了每一个版本，只是数组中每一个元素的访问时间是$O(\log n)$的。<br>&emsp;&emsp;需要注意的是不能只用路径压缩而不按秩合并。因为某一次路径压缩的复杂度是得不到保证的，我们不停退回执行某个卡路径压缩的操作就可以卡掉。事实上，使用了按秩合并之后，不用路径压缩复杂度也不会出现问题。<br>&emsp;&emsp;代码中有一些细节，在注释中标出。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a);</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c - <span class="string">'0'</span>; <span class="built_in">isdigit</span>(c = getchar()); (x *= <span class="number">10</span>) += c - <span class="string">'0'</span>);</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200010</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, lstans;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> PSGT</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lc l, mid</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rc mid + 1, r</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> ls, rs;</div><div class="line">        <span class="keyword">int</span> f, rnk;</div><div class="line">        </div><div class="line">        node(): ls(<span class="number">0</span>), rs(<span class="number">0</span>), f(<span class="number">0</span>), rnk(<span class="number">0</span>) &#123; &#125;</div><div class="line">    &#125; T[maxn * <span class="number">2</span> * <span class="number">18</span>];</div><div class="line"></div><div class="line">    <span class="keyword">int</span> rt[maxn], cur;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">(<span class="keyword">int</span>&amp; h, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line">    &#123;</div><div class="line">        h = ++cur;</div><div class="line">        <span class="keyword">if</span>(l == r) &#123; T[h].f = l; <span class="keyword">return</span>; &#125;</div><div class="line">        creat(T[h].ls, lc); creat(T[h].rs, rc);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span>&amp; h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> x)</span> <span class="comment">// 新建版本;查找位置pos与修改值x均为真实节点编号</span></span></div><div class="line">    &#123;</div><div class="line">        T[++cur] = T[h]; h = cur;</div><div class="line">        <span class="keyword">if</span>(l == r) &#123; T[h].f = x; <span class="keyword">return</span>; &#125;</div><div class="line">        <span class="keyword">if</span>(pos &lt;= mid) update(T[h].ls, lc, pos, x);</div><div class="line">        <span class="keyword">else</span> update(T[h].rs, rc, pos, x);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addrnk</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> <span class="comment">// 无需新建版本</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(l == r) &#123; ++T[h].rnk; <span class="keyword">return</span>; &#125;</div><div class="line">        <span class="keyword">if</span>(pos &lt;= mid) addrnk(T[h].ls, lc, pos);</div><div class="line">        <span class="keyword">else</span> addrnk(T[h].rs, rc, pos);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> h;</div><div class="line">        <span class="keyword">if</span>(x &lt;= mid) <span class="keyword">return</span> query(T[h].ls, lc, x);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(T[h].rs, rc, x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> PSGT;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> v)</span> <span class="comment">// 返回真实节点在线段树上对应节点</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> p = query(h, <span class="number">1</span>, n, v);</div><div class="line">    <span class="keyword">if</span>(v == T[p].f) <span class="keyword">return</span> p;</div><div class="line">    <span class="keyword">return</span> getf(h, T[p].f);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> h)</span></span></div><div class="line">&#123;</div><div class="line">    a = getf(rt[h], a), b = getf(rt[h], b);</div><div class="line">    <span class="keyword">if</span>(T[a].f != T[b].f) <span class="comment">// T[a].f == 真实a编号, T[b].f == 真实b编号</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(T[a].rnk &gt; T[b].rnk) swap(a, b);</div><div class="line">        update(rt[h], <span class="number">1</span>, n, T[a].f, T[b].f);</div><div class="line">        <span class="keyword">if</span>(T[a].rnk == T[b].rnk) addrnk(rt[h], <span class="number">1</span>, n, T[b].f);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">    freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    read(n); read(m);</div><div class="line">    creat(rt[<span class="number">0</span>], <span class="number">1</span>, n);</div><div class="line">    rep(i, <span class="number">1</span>, m)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> op, a, b; read(op);</div><div class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            rt[i] = rt[i - <span class="number">1</span>];</div><div class="line">            read(a), read(b); a ^= lstans, b ^= lstans;</div><div class="line">            merge(a, b, i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(op == <span class="number">2</span>) read(a), a ^= lstans, rt[i] = rt[a];</div><div class="line">        <span class="keyword">if</span>(op == <span class="number">3</span>)</div><div class="line">        &#123;</div><div class="line">            rt[i] = rt[i - <span class="number">1</span>];</div><div class="line">            read(a), read(b); a ^= lstans, b ^= lstans;</div><div class="line">            lstans = (T[getf(rt[i], a)].f == T[getf(rt[i], b)].f ? <span class="number">1</span> : <span class="number">0</span>);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lstans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-n个点，3种操作，强制在线&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-n个点，3种操作，强制在线&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:n个点，3种操作，强制在线:&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:n个点，3种操作，强制在线:&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-1、连边-a-b&quot;&gt;&lt;a href=&quot;#emsp-emsp-1、连边-a-b&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;1、连边(a, b)&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;1、连边(a, b)&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-2、跳到第k次操作之后的状态&quot;&gt;&lt;a href=&quot;#emsp-emsp-2、跳到第k次操作之后的状态&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;2、跳到第k次操作之后的状态&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;2、跳到第k次操作之后的状态&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-3、询问-a-b-是否连通&quot;&gt;&lt;a href=&quot;#emsp-emsp-3、询问-a-b-是否连通&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;3、询问(a, b) 是否连通&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;3、询问(a, b) 是否连通&lt;/h3&gt;
    
    </summary>
    
    
      <category term="并查集" scheme="http://xffyjq.github.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="主席树" scheme="http://xffyjq.github.com/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>UOJ261【NOIP2016】天天爱跑步</title>
    <link href="http://xffyjq.github.com/2017/05/25/UOJ261/"/>
    <id>http://xffyjq.github.com/2017/05/25/UOJ261/</id>
    <published>2017-05-25T02:02:35.000Z</published>
    <updated>2017-05-25T03:36:32.445Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-一棵-n-个点的树，每个点-i-有权值-w-i-，-m-条路径，对每个点i求出有多少条路径经过i且路径起点与-i-的距离为-w-i-。"><a href="#emsp-emsp-题意-一棵-n-个点的树，每个点-i-有权值-w-i-，-m-条路径，对每个点i求出有多少条路径经过i且路径起点与-i-的距离为-w-i-。" class="headerlink" title="&emsp;&emsp;题意:一棵$n$个点的树，每个点$i$有权值$w_i$，$m$条路径，对每个点i求出有多少条路径经过i且路径起点与$i$的距离为$w_i$。"></a>&emsp;&emsp;题意:一棵$n$个点的树，每个点$i$有权值$w_i$，$m$条路径，对每个点i求出有多少条路径经过i且路径起点与$i$的距离为$w_i$。</h3><a id="more"></a>
<p>&emsp;&emsp;最近清noip题目发现这道题还没有做。回头来看，这道题仍然给我不小的收获。<br>&emsp;&emsp;我们将路径$(u, v)$拆成向上路径$(u, lca)$和向下路径$(lca, v)$。首先考虑向上的路径。<br>&emsp;&emsp;一条向上的路径$(u, v)$对点i有贡献，当且仅当:<br>&emsp;&emsp;1、u在i的子树中<br>&emsp;&emsp;2、$dep[u] = dep[i] + w[i]$<br>&emsp;&emsp;3、路径经过i，即不会在到达i之前结束。<br>&emsp;&emsp;由于2条件中的$dep[i] + w[i]$只与i有关，$dep[u]$只与u有关，我们便有了如下做法:<br>&emsp;&emsp;存储下以每个节点i作为起点的路径$(u, v)$的$dep[u]$值(这里就是$dep[i]$)，以每个节点i作为终点的路径$(u, v)$的$dep[u]$值。维护一个全局的桶，每当遍历到一个点i时:<br>&emsp;&emsp;1、处理i的子树<br>&emsp;&emsp;2、将以i为起点路径的$dep[u]$值加入桶。<br>&emsp;&emsp;3、统计桶里值=$dep[i] + w[i]$的元素个数，更新$ans[i]$。<br>&emsp;&emsp;4、将以i为终点路径的$dep[u]$值从桶里删去。<br>&emsp;&emsp;这里本质上是将桶中+1/-1事件挂在每个点上，每到一个点时查询桶中对应位置的子树和。这个打正负标记求和的思想在线性结构和树结构上都有广泛运用，常常与差分一起出现。<br>&emsp;&emsp;这里呢?我们发现我们通过这种办法求出来的元素可能并不全在i子树中，也包括了从其他子树出发的向上路径。我们可以在dfs进入i点时，记录一下当前的答案，处理完i子树之后，将现在的答案与刚刚进入i时的答案相减，就得到了真正的答案了。这就是差分思想的一次体现。<br>&emsp;&emsp;对于向下的路径，我们发现条件变化了。重新考虑原路径。对于原路径$(u, v)$分出的向下路径$(lca, v)$，对i有贡献的条件是:$dep[u] - 2 \times dep[lca] = w[i] - dep[i]$。于是我们也可以仿照上面的做法，先把向下路径反过来变为向上路径，将左边式子的值放入桶里，用右边式子的值查询。但是这个桶可能会有负数下标，要注意一下。<br>&emsp;&emsp;最后，我们发现对于一条完整的路径，lca可能会被算两次贡献。这在读入路径的时候就判断减掉即可。<br>&emsp;&emsp;做了一些noip的题目，发现近两年的最难题目都出在树上，而且都与正负标记求和与树上差分联系起来。这一点要着实注意啊。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(i, u) for(int i = head[u], v = to[i]; i; i = nxt[i], v = to[i])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) (int((x).size()))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300010</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[maxn], nxt[maxn &lt;&lt; <span class="number">1</span>], to[maxn &lt;&lt; <span class="number">1</span>], e;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ae</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; to[++e] = y; nxt[e] = head[x]; head[x] = e; &#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> fa[maxn][<span class="number">20</span>], dep[maxn], w[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">&#123;</div><div class="line">    rep(i, <span class="number">1</span>, <span class="number">19</span>) fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">    erep(i, u) <span class="keyword">if</span>(v != fa[u][<span class="number">0</span>])</div><div class="line">    &#123;</div><div class="line">        fa[v][<span class="number">0</span>] = u; dep[v] = dep[u] + <span class="number">1</span>;</div><div class="line">        dfs1(v);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getlca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(dep[u] &lt; dep[v]) swap(u, v);</div><div class="line"></div><div class="line">    drep(i, <span class="number">19</span>, <span class="number">0</span>) <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; i) &amp; (dep[u] - dep[v])) u = fa[u][i];</div><div class="line">    drep(i, <span class="number">19</span>, <span class="number">0</span>) <span class="keyword">if</span>(fa[u][i] != fa[v][i]) u = fa[u][i], v = fa[v][i];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> u == v ? u : fa[u][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Begin[<span class="number">2</span>][maxn], End[<span class="number">2</span>][maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt[<span class="number">2</span>][maxn * <span class="number">2</span>], ans[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> last = cnt[<span class="number">0</span>][dep[u] + w[u]] + cnt[<span class="number">1</span>][w[u] - dep[u] + n];</div><div class="line">    erep(i, u) <span class="keyword">if</span>(v != fa[u][<span class="number">0</span>]) dfs2(v);</div><div class="line">    rep(i, <span class="number">0</span>, SZ(Begin[<span class="number">0</span>][u]) - <span class="number">1</span>) ++cnt[<span class="number">0</span>][Begin[<span class="number">0</span>][u][i]];</div><div class="line">    rep(i, <span class="number">0</span>, SZ(Begin[<span class="number">1</span>][u]) - <span class="number">1</span>) ++cnt[<span class="number">1</span>][Begin[<span class="number">1</span>][u][i] + n];</div><div class="line">    ans[u] += cnt[<span class="number">0</span>][dep[u] + w[u]] + cnt[<span class="number">1</span>][w[u] - dep[u] + n] - last;</div><div class="line">    rep(i, <span class="number">0</span>, SZ(End[<span class="number">0</span>][u]) - <span class="number">1</span>) --cnt[<span class="number">0</span>][End[<span class="number">0</span>][u][i]];</div><div class="line">    rep(i, <span class="number">0</span>, SZ(End[<span class="number">1</span>][u]) - <span class="number">1</span>) --cnt[<span class="number">1</span>][End[<span class="number">1</span>][u][i] + n];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">    freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    read(n); read(m); <span class="keyword">int</span> u, v, lca;</div><div class="line">    rep(i, <span class="number">1</span>, n - <span class="number">1</span>) read(u), read(v), ae(u, v), ae(v, u);</div><div class="line">    rep(i, <span class="number">1</span>, n) read(w[i]);</div><div class="line">    dfs1(<span class="number">1</span>);</div><div class="line">    rep(i, <span class="number">1</span>, m)</div><div class="line">    &#123;</div><div class="line">        read(u), read(v);</div><div class="line">        lca = getlca(u, v);</div><div class="line">        <span class="keyword">if</span>(dep[u] - dep[lca] == w[lca]) --ans[lca];</div><div class="line">        Begin[<span class="number">0</span>][u].pb(dep[u]); End[<span class="number">0</span>][lca].pb(dep[u]);</div><div class="line">        Begin[<span class="number">1</span>][v].pb(dep[u]- <span class="number">2</span> * dep[lca]); End[<span class="number">1</span>][lca].pb(dep[u] - <span class="number">2</span> * dep[lca]);</div><div class="line">    &#125;</div><div class="line">    dfs2(<span class="number">1</span>);</div><div class="line">    rep(i, <span class="number">1</span>, n) <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]); <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-一棵-n-个点的树，每个点-i-有权值-w-i-，-m-条路径，对每个点i求出有多少条路径经过i且路径起点与-i-的距离为-w-i-。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-一棵-n-个点的树，每个点-i-有权值-w-i-，-m-条路径，对每个点i求出有多少条路径经过i且路径起点与-i-的距离为-w-i-。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:一棵$n$个点的树，每个点$i$有权值$w_i$，$m$条路径，对每个点i求出有多少条路径经过i且路径起点与$i$的距离为$w_i$。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:一棵$n$个点的树，每个点$i$有权值$w_i$，$m$条路径，对每个点i求出有多少条路径经过i且路径起点与$i$的距离为$w_i$。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="树上差分" scheme="http://xffyjq.github.com/tags/%E6%A0%91%E4%B8%8A%E5%B7%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ4552 排序</title>
    <link href="http://xffyjq.github.com/2017/05/22/BZOJ4552/"/>
    <id>http://xffyjq.github.com/2017/05/22/BZOJ4552/</id>
    <published>2017-05-22T08:10:50.000Z</published>
    <updated>2017-05-22T08:43:04.626Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-一个1-n的全排列，进行m次局部排序-选定一个区间，升序或降序排序-，最后求第q位置上数字。"><a href="#emsp-emsp-题意-一个1-n的全排列，进行m次局部排序-选定一个区间，升序或降序排序-，最后求第q位置上数字。" class="headerlink" title="&emsp;&emsp;题意:一个1-n的全排列，进行m次局部排序(选定一个区间，升序或降序排序)，最后求第q位置上数字。"></a>&emsp;&emsp;题意:一个1-n的全排列，进行m次局部排序(选定一个区间，升序或降序排序)，最后求第q位置上数字。</h3><a id="more"></a>
<p>&emsp;&emsp;这道题有个咸鱼做法:二分数字，转化为01序列然后就很好办了。但是这样时间要多一个log而且不支持在线。<br>&emsp;&emsp;而如果使用线段树合并的话，就可以不用最后求，而是随时求q位置数字了。<br>&emsp;&emsp;对每个操作区间建立一棵权值线段树，并且记录当前顺序是升序还是降序，操作一个区间时，先找到包含该区间一部分的权值线段树，将两端多出去的地方割裂(要用到线段树分裂)，然后一个个合并起来。对于每个区间的开头我们用一个set存储，这样可以实现快速插入删除区间。<br>&emsp;&emsp;注意分裂的时候没有下传l与r端点，所以k值等于左儿子size的时候就不要下传了，以免陷入死循环。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) (int((x).size()))</span></div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, a[maxn];</div><div class="line"></div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</div><div class="line"><span class="keyword">int</span> tp[maxn], End[maxn];</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> SGT</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lc l, mid</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rc mid + 1, r</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> ls, rs;</div><div class="line">        <span class="keyword">int</span> sz;</div><div class="line"></div><div class="line">		node(): ls(<span class="number">0</span>), rs(<span class="number">0</span>), sz(<span class="number">0</span>) &#123; &#125;</div><div class="line">    &#125;T[maxn * <span class="number">18</span> * <span class="number">3</span>];</div><div class="line"></div><div class="line">    <span class="keyword">int</span> rt[maxn], cur;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123; T[h].sz = T[T[h].ls].sz + T[T[h].rs].sz; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span>&amp; h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!h) h = ++cur;</div><div class="line">        <span class="keyword">if</span>(l == r) &#123; ++T[h].sz; <span class="keyword">return</span>; &#125;</div><div class="line">        <span class="keyword">if</span>(x &lt;= mid) update(T[h].ls, lc, x);</div><div class="line">        <span class="keyword">else</span> update(T[h].rs, rc, x);</div><div class="line">        pushup(h);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> h1, <span class="keyword">int</span>&amp; h2, <span class="keyword">int</span> k)</span></span></div><div class="line">	&#123;</div><div class="line">		h2 = ++cur;</div><div class="line">		<span class="keyword">if</span>(k &gt; T[T[h1].ls].sz) split(T[h1].rs, T[h2].rs, k - T[T[h1].ls].sz);</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			swap(T[h1].rs, T[h2].rs);</div><div class="line">			<span class="keyword">if</span>(k &lt; T[T[h1].ls].sz) split(T[h1].ls, T[h2].ls, k);</div><div class="line">		&#125;</div><div class="line">		T[h2].sz = T[h1].sz - k; T[h1].sz = k;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>&amp; h1, <span class="keyword">int</span> h2)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!h2) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">if</span>(!h1) &#123; h1 = h2; <span class="keyword">return</span>; &#125;</div><div class="line">		merge(T[h1].ls, T[h2].ls);</div><div class="line">		merge(T[h1].rs, T[h2].rs);</div><div class="line">		pushup(h1);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</div><div class="line">		<span class="keyword">if</span>(k &gt; T[T[h].ls].sz) <span class="keyword">return</span> query(T[h].rs, rc, k - T[T[h].ls].sz);</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> query(T[h].ls, lc, k);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SGT;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pos)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(pos &gt;= End[x] || pos &lt; x) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(!tp[x]) split(rt[x], rt[pos + <span class="number">1</span>], pos - x + <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        rt[pos + <span class="number">1</span>] = rt[x];</div><div class="line">        split(rt[pos + <span class="number">1</span>], rt[x], End[x] - pos);</div><div class="line">    &#125;</div><div class="line">    End[pos + <span class="number">1</span>] = End[x]; End[x] = pos;</div><div class="line">    S.insert(pos + <span class="number">1</span>); tp[pos + <span class="number">1</span>] = tp[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">	S.erase(y);</div><div class="line">	merge(rt[x], rt[y]);</div><div class="line">	End[x] = End[y];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></div><div class="line">&#123;</div><div class="line">	k -= x - <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(!tp[x]) <span class="keyword">return</span> query(rt[x], <span class="number">1</span>, n, k);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> query(rt[x], <span class="number">1</span>, n, (End[x] - x + <span class="number">1</span>) - k + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">    freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    read(n); read(m);</div><div class="line">    rep(i, <span class="number">1</span>, n)</div><div class="line">    &#123;</div><div class="line">        read(a[i]);</div><div class="line">        update(rt[i], <span class="number">1</span>, n, a[i]);</div><div class="line">        S.insert(i); End[i] = i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(m--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> op, l, r;</div><div class="line">        read(op), read(l), read(r);</div><div class="line"></div><div class="line">        it = S.upper_bound(l); --it;</div><div class="line">        Split(*it, l - <span class="number">1</span>);</div><div class="line">        it = S.upper_bound(r); --it;</div><div class="line">        Split(*it, r);</div><div class="line"></div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator L, R;</div><div class="line">        L = S.lower_bound(l);</div><div class="line">        R = S.upper_bound(r);</div><div class="line">        <span class="keyword">if</span>(L != R)</div><div class="line">		&#123;</div><div class="line">			tmp.clear();</div><div class="line">			<span class="keyword">for</span>(it = L, ++it; it != R; ++it) tmp.pb(*it); </div><div class="line">			rep(i, <span class="number">0</span>, SZ(tmp) - <span class="number">1</span>) Merge(*L, tmp[i]);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">        tp[*L] = op;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> q; read(q); it = S.upper_bound(q); --it;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Query(*it, q));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-一个1-n的全排列，进行m次局部排序-选定一个区间，升序或降序排序-，最后求第q位置上数字。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-一个1-n的全排列，进行m次局部排序-选定一个区间，升序或降序排序-，最后求第q位置上数字。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:一个1-n的全排列，进行m次局部排序(选定一个区间，升序或降序排序)，最后求第q位置上数字。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:一个1-n的全排列，进行m次局部排序(选定一个区间，升序或降序排序)，最后求第q位置上数字。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="线段树" scheme="http://xffyjq.github.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3064 CPU监控</title>
    <link href="http://xffyjq.github.com/2017/05/22/BZOJ3064/"/>
    <id>http://xffyjq.github.com/2017/05/22/BZOJ3064/</id>
    <published>2017-05-22T05:33:44.000Z</published>
    <updated>2017-05-22T05:43:02.985Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-维护一个序列，4个操作"><a href="#emsp-emsp-题意-维护一个序列，4个操作" class="headerlink" title="&emsp;&emsp;题意:维护一个序列，4个操作:"></a>&emsp;&emsp;题意:维护一个序列，4个操作:</h3><h3 id="emsp-emsp-1、区间加上x"><a href="#emsp-emsp-1、区间加上x" class="headerlink" title="&emsp;&emsp;1、区间加上x"></a>&emsp;&emsp;1、区间加上x</h3><h3 id="emsp-emsp-2、区间赋值为x"><a href="#emsp-emsp-2、区间赋值为x" class="headerlink" title="&emsp;&emsp;2、区间赋值为x"></a>&emsp;&emsp;2、区间赋值为x</h3><h3 id="emsp-emsp-3、询问区间最大值"><a href="#emsp-emsp-3、询问区间最大值" class="headerlink" title="&emsp;&emsp;3、询问区间最大值"></a>&emsp;&emsp;3、询问区间最大值</h3><h3 id="emsp-emsp-4、询问区间历史最大值"><a href="#emsp-emsp-4、询问区间历史最大值" class="headerlink" title="&emsp;&emsp;4、询问区间历史最大值"></a>&emsp;&emsp;4、询问区间历史最大值</h3><a id="more"></a>
<p>&emsp;&emsp;区间历史最值，涉及到多次add和set操作的先后顺序，不是个好办的东西。<br>&emsp;&emsp;参考吉如一2016集训队论文，发现了一个巧妙的做法。<br>&emsp;&emsp;支持add和set操作的线段树有一个性质:<br>&emsp;&emsp;当一次set操作之后，在下一次节点pushdown之前，由于此时区间均为一个数，所以区间add操作可以全部视为区间set。<br>&emsp;&emsp;所以我们只需要考虑第一次set之前的add标记达到过的最值maxadd和后面的set标记达到过的最值maxset。<br>&emsp;&emsp;至此问题已经解决。<br>&emsp;&emsp;程序有点长，在过程中始终要牢记第一次set之后的add全部变成set，不管何处都是一样。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line">  </div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line">  </div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>, INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"> </div><div class="line"><span class="keyword">namespace</span> SGT</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ls h &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rs h &lt;&lt; 1 | 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lc l, mid</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rc mid + 1, r</span></div><div class="line"> </div><div class="line">    <span class="keyword">int</span> Max[maxn * <span class="number">3</span>], PastMax[maxn * <span class="number">3</span>];</div><div class="line">    <span class="keyword">int</span> add[maxn * <span class="number">3</span>], <span class="built_in">set</span>[maxn * <span class="number">3</span>], pastadd[maxn * <span class="number">3</span>], pastset[maxn * <span class="number">3</span>];</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> h)</span></span></div><div class="line">    &#123;</div><div class="line">        Max[h] = max(Max[ls], Max[rs]);</div><div class="line">        PastMax[h] = max(PastMax[ls], PastMax[rs]);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">set</span>[h] = pastset[h] = -INF;</div><div class="line">        <span class="keyword">if</span>(l == r) &#123; PastMax[h] = read(Max[h]); <span class="keyword">return</span>; &#125;</div><div class="line">        creat(ls, lc); creat(rs, rc);</div><div class="line">        pushup(h);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> h)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(pastadd[h])</div><div class="line">        &#123;</div><div class="line">            chkmax(PastMax[ls], Max[ls] + pastadd[h]);</div><div class="line">            <span class="keyword">if</span>(pastset[ls] == -INF) chkmax(pastadd[ls], add[ls] + pastadd[h]);</div><div class="line">            <span class="keyword">else</span> chkmax(pastset[ls], <span class="built_in">set</span>[ls] + pastadd[h]);</div><div class="line"> </div><div class="line">            chkmax(PastMax[rs], Max[rs] + pastadd[h]);</div><div class="line">            <span class="keyword">if</span>(pastset[rs] == -INF) chkmax(pastadd[rs], add[rs] + pastadd[h]);</div><div class="line">            <span class="keyword">else</span> chkmax(pastset[rs], <span class="built_in">set</span>[rs] + pastadd[h]);</div><div class="line"> </div><div class="line">            pastadd[h] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(pastset[h] != -INF)</div><div class="line">        &#123;</div><div class="line">            chkmax(PastMax[ls], pastset[h]);</div><div class="line">            chkmax(pastset[ls], pastset[h]);</div><div class="line">            chkmax(PastMax[rs], pastset[h]);</div><div class="line">            chkmax(pastset[rs], pastset[h]);</div><div class="line"> </div><div class="line">            pastset[h] = -INF;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(<span class="built_in">set</span>[h] != -INF)</div><div class="line">        &#123;</div><div class="line">            Max[ls] = Max[rs] = <span class="built_in">set</span>[h]; </div><div class="line">            <span class="built_in">set</span>[ls] = <span class="built_in">set</span>[rs] = <span class="built_in">set</span>[h];</div><div class="line">			add[ls] = add[rs] = <span class="number">0</span>;</div><div class="line">            <span class="built_in">set</span>[h] = -INF;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(add[h])</div><div class="line">        &#123;</div><div class="line">            Max[ls] += add[h], Max[rs] += add[h];</div><div class="line">			<span class="keyword">if</span>(pastset[ls] == -INF) add[ls] += add[h];</div><div class="line">			<span class="keyword">else</span> <span class="built_in">set</span>[ls] += add[h];</div><div class="line">			<span class="keyword">if</span>(pastset[rs] == -INF) add[rs] += add[h];</div><div class="line">			<span class="keyword">else</span> <span class="built_in">set</span>[rs] += add[h];</div><div class="line">            add[h] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upd_add</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</div><div class="line">        &#123;</div><div class="line">            Max[h] += x;</div><div class="line">            chkmax(PastMax[h], Max[h]);</div><div class="line">            <span class="keyword">if</span>(pastset[h] == -INF)</div><div class="line">			&#123;</div><div class="line">				add[h] += x;</div><div class="line">				chkmax(pastadd[h], add[h]);</div><div class="line">			&#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				<span class="built_in">set</span>[h] += x;</div><div class="line">				chkmax(pastset[h], <span class="built_in">set</span>[h]);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        pushdown(h);</div><div class="line">        <span class="keyword">if</span>(L &lt;= mid) upd_add(ls, lc, L, R, x);</div><div class="line">        <span class="keyword">if</span>(R &gt; mid) upd_add(rs, rc, L, R, x);</div><div class="line">        pushup(h);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upd_set</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</div><div class="line">        &#123;</div><div class="line">            Max[h] = <span class="built_in">set</span>[h] = x; add[h] = <span class="number">0</span>;</div><div class="line">            chkmax(PastMax[h], Max[h]);</div><div class="line">            chkmax(pastset[h], <span class="built_in">set</span>[h]);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        pushdown(h);</div><div class="line">        <span class="keyword">if</span>(L &lt;= mid) upd_set(ls, lc, L, R, x);</div><div class="line">        <span class="keyword">if</span>(R &gt; mid) upd_set(rs, rc, L, R, x);</div><div class="line">        pushup(h);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">bool</span> op)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> op ? Max[h] : PastMax[h];</div><div class="line">        pushdown(h); <span class="keyword">int</span> ret = -INF;</div><div class="line">        <span class="keyword">if</span>(L &lt;= mid) chkmax(ret, query(ls, lc, L, R, op));</div><div class="line">        <span class="keyword">if</span>(R &gt; mid) chkmax(ret, query(rs, rc, L, R, op));</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SGT;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">	freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    read(n); creat(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">    read(m);</div><div class="line">    <span class="keyword">while</span>(m--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">char</span> op[<span class="number">2</span>]; <span class="keyword">int</span> l, r, w;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, op); read(l), read(r);</div><div class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'P'</span>) read(w), upd_add(<span class="number">1</span>, <span class="number">1</span>, n, l, r, w);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'C'</span>) read(w), upd_set(<span class="number">1</span>, <span class="number">1</span>, n, l, r, w);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(<span class="number">1</span>, <span class="number">1</span>, n, l, r, op[<span class="number">0</span>] == <span class="string">'Q'</span>));</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-维护一个序列，4个操作&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-维护一个序列，4个操作&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:维护一个序列，4个操作:&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:维护一个序列，4个操作:&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-1、区间加上x&quot;&gt;&lt;a href=&quot;#emsp-emsp-1、区间加上x&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;1、区间加上x&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;1、区间加上x&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-2、区间赋值为x&quot;&gt;&lt;a href=&quot;#emsp-emsp-2、区间赋值为x&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;2、区间赋值为x&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;2、区间赋值为x&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-3、询问区间最大值&quot;&gt;&lt;a href=&quot;#emsp-emsp-3、询问区间最大值&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;3、询问区间最大值&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;3、询问区间最大值&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-4、询问区间历史最大值&quot;&gt;&lt;a href=&quot;#emsp-emsp-4、询问区间历史最大值&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;4、询问区间历史最大值&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;4、询问区间历史最大值&lt;/h3&gt;
    
    </summary>
    
    
      <category term="线段树" scheme="http://xffyjq.github.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>UOJ164 V</title>
    <link href="http://xffyjq.github.com/2017/05/22/UOJ164/"/>
    <id>http://xffyjq.github.com/2017/05/22/UOJ164/</id>
    <published>2017-05-22T04:56:00.000Z</published>
    <updated>2017-05-22T05:32:30.260Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-维护一个序列，5个操作"><a href="#emsp-emsp-题意-维护一个序列，5个操作" class="headerlink" title="&emsp;&emsp;题意:维护一个序列，5个操作:"></a>&emsp;&emsp;题意:维护一个序列，5个操作:</h3><h3 id="emsp-emsp-1、区间加x"><a href="#emsp-emsp-1、区间加x" class="headerlink" title="&emsp;&emsp;1、区间加x"></a>&emsp;&emsp;1、区间加x</h3><h3 id="emsp-emsp-2、区间减x后对0取max"><a href="#emsp-emsp-2、区间减x后对0取max" class="headerlink" title="&emsp;&emsp;2、区间减x后对0取max"></a>&emsp;&emsp;2、区间减x后对0取max</h3><h3 id="emsp-emsp-3、区间覆盖成x"><a href="#emsp-emsp-3、区间覆盖成x" class="headerlink" title="&emsp;&emsp;3、区间覆盖成x"></a>&emsp;&emsp;3、区间覆盖成x</h3><h3 id="emsp-emsp-4、询问单点值"><a href="#emsp-emsp-4、询问单点值" class="headerlink" title="&emsp;&emsp;4、询问单点值"></a>&emsp;&emsp;4、询问单点值</h3><h3 id="emsp-emsp-5、询问单点历史最大值"><a href="#emsp-emsp-5、询问单点历史最大值" class="headerlink" title="&emsp;&emsp;5、询问单点历史最大值"></a>&emsp;&emsp;5、询问单点历史最大值</h3><a id="more"></a>
<p>&emsp;&emsp;又是一眼线段树。但是同样也有新东西。<br>&emsp;&emsp;首先，区间减x后对0取max这个操作看起来十分的棘手。还有就是历史最大值。<br>&emsp;&emsp;但是这道题的好处是单点查询，也就是说我们的每个节点并不需要维护实际信息，而只需要维护lazy-tag。将初始信息记录在叶节点tag上，在询问单点时，将一路上的tag给pushdown下去，最后一个点的tag上的值就用来更新答案了。<br>&emsp;&emsp;我们定义节点tag为一个二元组$(a, b)$&emsp;代表执行这个标记时，对于区间内的数，先加上a然后对b取max。<br>&emsp;&emsp;那么操作1 2 3分别对应标记$(x, {- \infty})$ $(-x, 0)$ $({- \infty}, x)$<br>&emsp;&emsp;如何pushdown这个标记?设下传的标记为$(A, B)$，直接将当前标记$(a, b)$更新为<script type="math/tex">(a + A, \max(b + A, B))</script>即可。<br>&emsp;&emsp;在实际应用中由于数字可能爆-INF的下界，所以左边要对-INF取个max。<br>&emsp;&emsp;如何维护历史标记?同样用一个二元组$(c, d)$，分别代表该节点在上次与这次pushdown之间的最大add值和最大取max值。pushdown的话，设下传的标记为$(C, D)$，当前历史标记更新为:<script type="math/tex">(\max(c, a + C), \max(d, b + C, D))</script><br>&emsp;&emsp;左侧同样要对-INF取max。注意到更新标记涉及到节点当前标记$(a, b)$，所以pushdown时先下传历史标记再下传当前标记。<br>&emsp;&emsp;最后pushdown到叶子时，节点的$\max(a, b)$、$\max(c, d)$就分别为当前和历史的答案。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500010</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> LL INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;LL, LL&gt; PLL;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> SGT</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ls h &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rs h &lt;&lt; 1 | 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lc l, mid</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rc mid + 1, r</span></div><div class="line"></div><div class="line">    PLL T[maxn * <span class="number">3</span>], Past[maxn * <span class="number">3</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(l == r)</div><div class="line">        &#123;</div><div class="line">            Past[h].x = Past[h].y = T[h].x = read(T[h].y);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        creat(ls, lc); creat(rs, rc);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> h)</span></span></div><div class="line">    &#123;</div><div class="line">        chkmax(Past[ls].x, max(Past[h].x + T[ls].x, -INF));</div><div class="line">        chkmax(Past[ls].y, max(Past[h].y, Past[h].x + T[ls].y));</div><div class="line">        chkmax(Past[rs].x, max(Past[h].x + T[rs].x, -INF));</div><div class="line">        chkmax(Past[rs].y, max(Past[h].y, Past[h].x + T[rs].y));</div><div class="line">        T[ls] = mp(max(T[ls].x + T[h].x, -INF), max(T[ls].y + T[h].x, T[h].y));</div><div class="line">        T[rs] = mp(max(T[rs].x + T[h].x, -INF), max(T[rs].y + T[h].x, T[h].y));</div><div class="line">        T[h] = Past[h] = mp(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, PLL w)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</div><div class="line">        &#123;</div><div class="line">            T[h] = mp(max(T[h].x + w.x, -INF), max(T[h].y + w.x, w.y));</div><div class="line">            chkmax(Past[h].x, T[h].x); chkmax(Past[h].y, T[h].y);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        pushdown(h);</div><div class="line">        <span class="keyword">if</span>(L &lt;= mid) update(ls, lc, L, R, w);</div><div class="line">        <span class="keyword">if</span>(R &gt; mid) update(rs, rc, L, R, w);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">bool</span> op)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> op ? max(T[h].x, T[h].y) : max(Past[h].x, Past[h].y);</div><div class="line">        pushdown(h);</div><div class="line">        <span class="keyword">if</span>(p &lt;= mid) <span class="keyword">return</span> query(ls, lc, p, op);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(rs, rc, p, op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SGT;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    read(n); read(m);</div><div class="line">    creat(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">    <span class="keyword">while</span>(m--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> op, l, r; LL w; read(op);</div><div class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) read(l), read(r), read(w), update(<span class="number">1</span>, <span class="number">1</span>, n, l, r, mp(w, <span class="number">0</span>));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) read(l), read(r), read(w), update(<span class="number">1</span>, <span class="number">1</span>, n, l, r, mp(-w, <span class="number">0</span>));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>) read(l), read(r), read(w), update(<span class="number">1</span>, <span class="number">1</span>, n, l, r, mp(-INF, w));</div><div class="line">        <span class="keyword">else</span> read(l), <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(<span class="number">1</span>, <span class="number">1</span>, n, l, op == <span class="number">4</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-维护一个序列，5个操作&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-维护一个序列，5个操作&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:维护一个序列，5个操作:&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:维护一个序列，5个操作:&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-1、区间加x&quot;&gt;&lt;a href=&quot;#emsp-emsp-1、区间加x&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;1、区间加x&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;1、区间加x&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-2、区间减x后对0取max&quot;&gt;&lt;a href=&quot;#emsp-emsp-2、区间减x后对0取max&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;2、区间减x后对0取max&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;2、区间减x后对0取max&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-3、区间覆盖成x&quot;&gt;&lt;a href=&quot;#emsp-emsp-3、区间覆盖成x&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;3、区间覆盖成x&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;3、区间覆盖成x&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-4、询问单点值&quot;&gt;&lt;a href=&quot;#emsp-emsp-4、询问单点值&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;4、询问单点值&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;4、询问单点值&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-5、询问单点历史最大值&quot;&gt;&lt;a href=&quot;#emsp-emsp-5、询问单点历史最大值&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;5、询问单点历史最大值&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;5、询问单点历史最大值&lt;/h3&gt;
    
    </summary>
    
    
      <category term="线段树" scheme="http://xffyjq.github.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>HDU5306 Gorgeous Sequence</title>
    <link href="http://xffyjq.github.com/2017/05/21/HDU5306/"/>
    <id>http://xffyjq.github.com/2017/05/21/HDU5306/</id>
    <published>2017-05-21T13:46:03.000Z</published>
    <updated>2017-05-22T04:55:52.186Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-维护一个数列，三个操作"><a href="#emsp-emsp-题意-维护一个数列，三个操作" class="headerlink" title="&emsp;&emsp;题意:维护一个数列，三个操作:"></a>&emsp;&emsp;题意:维护一个数列，三个操作:</h3><h3 id="emsp-emsp-1、区间对一个数取min"><a href="#emsp-emsp-1、区间对一个数取min" class="headerlink" title="&emsp;&emsp;1、区间对一个数取min"></a>&emsp;&emsp;1、区间对一个数取min</h3><h3 id="emsp-emsp-2、询问区间max"><a href="#emsp-emsp-2、询问区间max" class="headerlink" title="&emsp;&emsp;2、询问区间max"></a>&emsp;&emsp;2、询问区间max</h3><h3 id="emsp-emsp-3、询问区间sum"><a href="#emsp-emsp-3、询问区间sum" class="headerlink" title="&emsp;&emsp;3、询问区间sum"></a>&emsp;&emsp;3、询问区间sum</h3><a id="more"></a>
<p>&emsp;&emsp;这道题看着就是一个线段树。<br>&emsp;&emsp;仔细观察发现，1操作似乎不是很好维护，如果要维护似乎只能暴力下传。(其实暴力下传也能够过)<br>&emsp;&emsp;有什么更好的办法?<br>&emsp;&emsp;参考吉如一2016集训队论文，发现虽然不能有更好的替代方法，但是可以进行优化，减少下传次数。<br>&emsp;&emsp;维护最大值$max$与区间和$sum$之外，再维护次大值$second$，最大值出现次数$times$。<br>&emsp;&emsp;每次区间对一个数$x$取min时:<br>&emsp;&emsp;若区间$max &lt;= x$，忽略。<br>&emsp;&emsp;区间$max &gt; x$ 但 $second &lt; x$，则$sum$减去$(max - x) \times times$，$max$变为$times$。<br>&emsp;&emsp;$second &gt;= x$，没办法，暴力递归解决。<br>&emsp;&emsp;但是这样好像会递归到不存在的区间呀怎么办?没关系。不存在的区间max与second均为0，到了就会返回回来。唯一带来的坑点就是数组要看到$maxn \times 8$!!!!!(神坑)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000010</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> SGT</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ls h &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rs h &lt;&lt; 1 | 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lc l, mid</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rc mid + 1, r</span></div><div class="line"></div><div class="line">    LL T[maxn * <span class="number">8</span>], Max[maxn * <span class="number">8</span>], Times[maxn * <span class="number">8</span>], Second[maxn * <span class="number">8</span>];</div><div class="line">    LL min[maxn * <span class="number">8</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> h)</span></span></div><div class="line">    &#123;</div><div class="line">        T[h] = T[ls] + T[rs];</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(Max[ls] == Max[rs])</div><div class="line">        &#123;</div><div class="line">            Max[h] = Max[ls];</div><div class="line">            Times[h] = Times[ls] + Times[rs];</div><div class="line">            Second[h] = <span class="built_in">std</span>::max(Second[ls], Second[rs]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(Max[ls] &gt; Max[rs])</div><div class="line">            &#123;</div><div class="line">                Max[h] = Max[ls];</div><div class="line">                Times[h] = Times[ls];</div><div class="line">                Second[h] = <span class="built_in">std</span>::max(Second[ls], Max[rs]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                Max[h] = Max[rs];</div><div class="line">                Times[h] = Times[rs];</div><div class="line">                Second[h] = <span class="built_in">std</span>::max(Second[rs], Max[ls]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> h)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(~min[h])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(Max[ls] &gt; min[h])</div><div class="line">            &#123;</div><div class="line">                T[ls] -= Times[ls] * (Max[ls] - min[h]);</div><div class="line">                Max[ls] = min[ls] = min[h];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(Max[rs] &gt; min[h])</div><div class="line">            &#123;</div><div class="line">                T[rs] -= Times[rs] * (Max[rs] - min[h]);</div><div class="line">                Max[rs] = min[rs] = min[h];</div><div class="line">            &#125;</div><div class="line">            min[h] = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line">    &#123;</div><div class="line">        min[h] = <span class="number">-1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(l == r)</div><div class="line">        &#123;</div><div class="line">            Max[h] = read(T[h]);</div><div class="line">            Second[h] = <span class="number">0</span>; Times[h] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        creat(ls, lc); creat(rs, rc);</div><div class="line">        pushup(h);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, LL t)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(Max[h] &lt;= t) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(Second[h] &lt; t)</div><div class="line">            &#123;</div><div class="line">                T[h] -= Times[h] * (Max[h] - t);</div><div class="line">                Max[h] = min[h] = t;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                pushdown(h);</div><div class="line">                update(ls, lc, L, R, t);</div><div class="line">                update(rs, rc, L, R, t);</div><div class="line">                pushup(h);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        pushdown(h);</div><div class="line">        <span class="keyword">if</span>(L &lt;= mid) update(ls, lc, L, R, t);</div><div class="line">        <span class="keyword">if</span>(R &gt; mid) update(rs, rc, L, R, t);</div><div class="line">        pushup(h);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">LL <span class="title">qry_max</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> Max[h];</div><div class="line">        pushdown(h); LL ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(L &lt;= mid) chkmax(ret, qry_max(ls, lc, L, R)); </div><div class="line">        <span class="keyword">if</span>(R &gt; mid) chkmax(ret, qry_max(rs, rc, L, R)); </div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">LL <span class="title">qry_sum</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> T[h];</div><div class="line">        pushdown(h); LL ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(L &lt;= mid) ret += qry_sum(ls, lc, L, R); </div><div class="line">        <span class="keyword">if</span>(R &gt; mid) ret += qry_sum(rs, rc, L, R); </div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SGT;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> _; read(_);</div><div class="line">    <span class="keyword">while</span>(_--)</div><div class="line">    &#123;</div><div class="line">        read(n); read(m);</div><div class="line">        creat(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">        <span class="keyword">while</span>(m--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> op, L, R; LL t; read(op);</div><div class="line">            <span class="keyword">if</span>(op == <span class="number">0</span>) read(L), read(R), read(t), update(<span class="number">1</span>, <span class="number">1</span>, n, L, R, t);</div><div class="line">            <span class="keyword">if</span>(op == <span class="number">1</span>) read(L), read(R), <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, qry_max(<span class="number">1</span>, <span class="number">1</span>, n, L, R));</div><div class="line">            <span class="keyword">if</span>(op == <span class="number">2</span>) read(L), read(R), <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, qry_sum(<span class="number">1</span>, <span class="number">1</span>, n, L, R));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-维护一个数列，三个操作&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-维护一个数列，三个操作&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:维护一个数列，三个操作:&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:维护一个数列，三个操作:&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-1、区间对一个数取min&quot;&gt;&lt;a href=&quot;#emsp-emsp-1、区间对一个数取min&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;1、区间对一个数取min&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;1、区间对一个数取min&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-2、询问区间max&quot;&gt;&lt;a href=&quot;#emsp-emsp-2、询问区间max&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;2、询问区间max&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;2、询问区间max&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-3、询问区间sum&quot;&gt;&lt;a href=&quot;#emsp-emsp-3、询问区间sum&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;3、询问区间sum&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;3、询问区间sum&lt;/h3&gt;
    
    </summary>
    
    
      <category term="线段树" scheme="http://xffyjq.github.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ2555 Substring</title>
    <link href="http://xffyjq.github.com/2017/05/15/BZOJ2555/"/>
    <id>http://xffyjq.github.com/2017/05/15/BZOJ2555/</id>
    <published>2017-05-15T10:45:20.000Z</published>
    <updated>2017-05-15T11:36:22.336Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-一个字符串，两种操作，强制在线"><a href="#emsp-emsp-题意-一个字符串，两种操作，强制在线" class="headerlink" title="&emsp;&emsp;题意:一个字符串，两种操作，强制在线:"></a>&emsp;&emsp;题意:一个字符串，两种操作，强制在线:</h3><h3 id="emsp-emsp-1、在当前字符串后接上一个字符串"><a href="#emsp-emsp-1、在当前字符串后接上一个字符串" class="headerlink" title="&emsp;&emsp;1、在当前字符串后接上一个字符串"></a>&emsp;&emsp;1、在当前字符串后接上一个字符串</h3><h3 id="emsp-emsp-2、查询某一串在当前字符串的出现次数"><a href="#emsp-emsp-2、查询某一串在当前字符串的出现次数" class="headerlink" title="&emsp;&emsp;2、查询某一串在当前字符串的出现次数"></a>&emsp;&emsp;2、查询某一串在当前字符串的出现次数</h3><a id="more"></a>
<p>&emsp;&emsp;维护每一个子串的出现次数，很容易想到SAM维护right集合大小。在SAM上运行这个串，在next边形成的树结构中，到达节点为根的子树的节点个数就是答案。<br>&emsp;&emsp;暴力做法自然就是每次新加入一个字符，沿着next边向上更新节点信息。鉴于这是一个树结构，我们考虑用动态树来加速。<br>&emsp;&emsp;但是好像要维护子树大小?虽然这样可做，但是有没有更简洁的方法?我们注意到这道题是没有换根操作的，树本身的形态不会改变，于是我们可以类似与暴力，将子树大小当做信息记在节点上。每次连next边的时候cut、link一下改变树的形态，暴力更新信息变成打tag就好。由于节点信息是独立的，所以连pushup都不要。注意每次在复制、输出节点信息时别忘了relax一波。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">1500010</span>, SIGMA = <span class="number">26</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> q, mask, ans;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></div><div class="line">&#123;</div><div class="line">    node *p, *c[<span class="number">2</span>];</div><div class="line">    <span class="keyword">bool</span> rev;</div><div class="line">    <span class="keyword">int</span> val, add;</div><div class="line"> </div><div class="line">    node(): p(<span class="number">0</span>), rev(<span class="number">0</span>), val(<span class="number">0</span>), add(<span class="number">0</span>) &#123; c[<span class="number">0</span>] = c[<span class="number">1</span>] = <span class="number">0</span>; &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setc</span><span class="params">(node* o, <span class="keyword">bool</span> b)</span> </span>&#123; c[b] = o; <span class="keyword">if</span>(o) o-&gt;p = <span class="keyword">this</span>; &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> !p || p-&gt;c[<span class="number">0</span>] != <span class="keyword">this</span> &amp;&amp; p-&gt;c[<span class="number">1</span>] != <span class="keyword">this</span>; &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">getpos</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> p-&gt;c[<span class="number">1</span>] == <span class="keyword">this</span>; &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updrev</span><span class="params">()</span> </span>&#123; rev ^= <span class="number">1</span>; &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(rev)</div><div class="line">        &#123;</div><div class="line">            rep(i, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">if</span>(c[i]) c[i]-&gt;updrev();</div><div class="line">            swap(c[<span class="number">0</span>], c[<span class="number">1</span>]); rev ^= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(add)</div><div class="line">        &#123;</div><div class="line">            rep(i, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">if</span>(c[i])</div><div class="line">            &#123;</div><div class="line">                c[i]-&gt;val += add;</div><div class="line">                c[i]-&gt;add += add;</div><div class="line">            &#125;</div><div class="line">            add = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rot</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        node* f = p; <span class="keyword">bool</span> b = getpos();</div><div class="line">        <span class="keyword">if</span>(f-&gt;isroot()) p = f-&gt;p;</div><div class="line">        <span class="keyword">else</span> f-&gt;p-&gt;setc(<span class="keyword">this</span>, f-&gt;getpos());</div><div class="line">        f-&gt;setc(c[!b], b); setc(f, !b);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">relax</span><span class="params">()</span> </span>&#123; <span class="keyword">if</span>(!isroot()) p-&gt;relax(); pushdown(); &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(relax(); !isroot(); rot())</div><div class="line">            <span class="keyword">if</span>(!p-&gt;isroot()) (p-&gt;getpos() == getpos() ? p : <span class="keyword">this</span>)-&gt;rot();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(node *u = <span class="keyword">this</span>, *v = <span class="number">0</span>; u; v = u, u = u-&gt;p)</div><div class="line">            u-&gt;splay(), u-&gt;setc(v, <span class="number">1</span>);</div><div class="line">        splay();</div><div class="line">    &#125;</div><div class="line">&#125;nd[SIZE];</div><div class="line"> </div><div class="line"><span class="keyword">namespace</span> LCT</div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">    &#123;</div><div class="line">        node* u = nd + x;</div><div class="line">        u-&gt;access(); u-&gt;c[<span class="number">0</span>] = u-&gt;c[<span class="number">0</span>]-&gt;p = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        node *u = nd + x, *v = nd + y;</div><div class="line">        u-&gt;p = v;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">    &#123;</div><div class="line">        node* u = nd + x;</div><div class="line">        u-&gt;access();</div><div class="line">        ++u-&gt;val; ++u-&gt;add;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> LCT;</div><div class="line"> </div><div class="line"><span class="keyword">namespace</span> SAM</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ch[SIZE][SIGMA], next[SIZE], Max[SIZE];</div><div class="line">    <span class="keyword">int</span> cur, last;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; cur = last = <span class="number">1</span>; &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">New</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; Max[++cur] = x; <span class="keyword">return</span> cur; &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u = New(Max[last] + <span class="number">1</span>), v = last;</div><div class="line">        <span class="keyword">for</span>(; v &amp;&amp; !ch[v][c]; v = next[v]) ch[v][c] = u;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(!v)</div><div class="line">        &#123;</div><div class="line">            next[u] = <span class="number">1</span>;</div><div class="line">            link(u, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> h = ch[v][c];</div><div class="line">            <span class="keyword">if</span>(Max[h] == Max[v] + <span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                next[u] = h;</div><div class="line">                link(u, h);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> o = New(Max[v] + <span class="number">1</span>);</div><div class="line">                <span class="built_in">memcpy</span>(ch[o], ch[h], <span class="keyword">sizeof</span> ch[h]);</div><div class="line">                next[o] = next[h];</div><div class="line">                link(o, next[h]);</div><div class="line">                next[h] = next[u] = o;</div><div class="line">                cut(h); link(h, o);</div><div class="line">                link(u, o);</div><div class="line">                (nd + h)-&gt;relax();</div><div class="line">                (nd + o)-&gt;val = (nd + h)-&gt;val;</div><div class="line">                <span class="keyword">for</span>(; v &amp;&amp; ch[v][c] == h; v = next[v]) ch[v][c] = o;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        last = u;</div><div class="line">        update(u);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span>* s)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> h = <span class="number">1</span>;</div><div class="line">        rep(i, <span class="number">0</span>, <span class="built_in">strlen</span>(s) - <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!ch[h][s[i] - <span class="string">'A'</span>]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            h = ch[h][s[i] - <span class="string">'A'</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (nd + h)-&gt;relax(), (nd + h)-&gt;val;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SAM;</div><div class="line"> </div><div class="line"><span class="keyword">char</span> op[<span class="number">10</span>], s[SIZE &lt;&lt; <span class="number">1</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> base)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</div><div class="line">    rep(i, <span class="number">0</span>, len - <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        base = (base * <span class="number">131</span> + i) % len;</div><div class="line">        swap(s[i], s[base]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    init();</div><div class="line">    read(q); <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">    rep(i, <span class="number">0</span>, <span class="built_in">strlen</span>(s) - <span class="number">1</span>) extend(s[i] - <span class="string">'A'</span>);</div><div class="line">    <span class="keyword">while</span>(q--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, op, s);</div><div class="line">        decode(s, mask);</div><div class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'A'</span>) rep(i, <span class="number">0</span>, <span class="built_in">strlen</span>(s) - <span class="number">1</span>) extend(s[i] - <span class="string">'A'</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            ans = query(s);</div><div class="line">            mask ^= ans; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-一个字符串，两种操作，强制在线&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-一个字符串，两种操作，强制在线&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:一个字符串，两种操作，强制在线:&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:一个字符串，两种操作，强制在线:&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-1、在当前字符串后接上一个字符串&quot;&gt;&lt;a href=&quot;#emsp-emsp-1、在当前字符串后接上一个字符串&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;1、在当前字符串后接上一个字符串&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;1、在当前字符串后接上一个字符串&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-2、查询某一串在当前字符串的出现次数&quot;&gt;&lt;a href=&quot;#emsp-emsp-2、查询某一串在当前字符串的出现次数&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;2、查询某一串在当前字符串的出现次数&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;2、查询某一串在当前字符串的出现次数&lt;/h3&gt;
    
    </summary>
    
    
      <category term="SAM" scheme="http://xffyjq.github.com/tags/SAM/"/>
    
      <category term="LCT" scheme="http://xffyjq.github.com/tags/LCT/"/>
    
  </entry>
  
  <entry>
    <title>UOJ35 后缀排序</title>
    <link href="http://xffyjq.github.com/2017/05/15/UOJ35/"/>
    <id>http://xffyjq.github.com/2017/05/15/UOJ35/</id>
    <published>2017-05-15T05:22:11.000Z</published>
    <updated>2017-05-15T10:54:04.003Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-造出一个字符串的后缀数组，将sa数组与height数组输出。"><a href="#emsp-emsp-题意-造出一个字符串的后缀数组，将sa数组与height数组输出。" class="headerlink" title="&emsp;&emsp;题意:造出一个字符串的后缀数组，将sa数组与height数组输出。"></a>&emsp;&emsp;题意:造出一个字符串的后缀数组，将sa数组与height数组输出。</h3><a id="more"></a>
<p>&emsp;&emsp;这道题当然是一道后缀数组的模板。但是为了更高的效率，我们不用倍增法，而是使用SAM造出后缀树，再用后缀树造出后缀数组。<br>&emsp;&emsp;关于后缀树的资料可以去网上找，在此不赘述。我们唯一需要知道的是，后缀树每一条边对应的字符串首字符都是互不相同的，仅仅依靠首字符就可以区别从一个节点伸出的所有边。<br>&emsp;&emsp;首先，由于原串的SAM的next链接就是反串的后缀树，于是我们将原串的反串插入SAM，这样造出的后缀树就是原串的后缀树了。但是这样造出的仅仅是只有点和边的空后缀树，我们需要在上面添加信息。<br>&emsp;&emsp;我们对于每个节点记录一个pos——代表其中最长串(反串前缀)在原串后缀中对应的首字符位置，方便以后造sa数组。我们还需要维护一个right数组，这个数组并不代表right集合。对于每个插入字符时为接纳新子串产生的节点(而非分裂出来的节点)，其right值=自身max值。而对于分裂出来的节点，其right值=该轮新产生节点的max。<br>&emsp;&emsp;在造后缀树的时候，节点本身的right值-其next节点的max值=后缀树中next节点到该节点边的首字符在反串中的位置。更进一步地，将反串起始位置到该位置的子串翻转，就是这条边对应的字符串。其实这一点不难理解，结合一下定义就很容易明白，这里不多说了。<br>&emsp;&emsp;将反串中的位置对应到原串上，找到那个字符作为边的首字符，我们就可以区分每条边，也就可以按照字典序遍历后缀树，依照每个节点的pos造出后缀数组了。<br>&emsp;&emsp;上代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(i, u) for(int i = head[u], v = E[i].v; i; i = E[i].nxt, v = E[i].v)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">	<span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>, SIZE = maxn &lt;&lt; <span class="number">2</span>, SIGMA = <span class="number">26</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sa[maxn], sa_cur, rnk[maxn], height[maxn];</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> SAM</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ch[SIZE][SIGMA], next[SIZE], Max[SIZE], pos[SIZE], right[SIZE];</div><div class="line">    <span class="keyword">int</span> cur, last;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; cur = last = <span class="number">1</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">New</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; Max[++cur] = x; <span class="keyword">return</span> cur; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> p)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u = New(Max[last] + <span class="number">1</span>), v = last;</div><div class="line">        pos[u] = p; right[u] = Max[u];</div><div class="line">        <span class="keyword">for</span>(; v &amp;&amp; !ch[v][c]; v = next[v]) ch[v][c] = u;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!v) next[u] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> h = ch[v][c];</div><div class="line">            <span class="keyword">if</span>(Max[h] == Max[v] + <span class="number">1</span>) next[u] = h;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> o = New(Max[v] + <span class="number">1</span>);</div><div class="line">                right[o] = right[u];</div><div class="line">                <span class="built_in">memcpy</span>(ch[o], ch[h], <span class="keyword">sizeof</span> ch[h]);</div><div class="line">                next[o] = next[h];</div><div class="line">                next[h] = next[u] = o;</div><div class="line">                <span class="keyword">for</span>(; v &amp;&amp; ch[v][c] == h; v = next[v]) ch[v][c] = o;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        last = u;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">namespace</span> ST</div><div class="line">    &#123;</div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> u, v, w;</div><div class="line">            <span class="keyword">int</span> nxt;</div><div class="line">        &#125;E[SIZE];</div><div class="line"></div><div class="line">        <span class="keyword">int</span> head[SIZE], en;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ae</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; E[i].nxt = head[E[i].u]; head[E[i].u] = i; &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">build_sa</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(pos[u]) sa[++sa_cur] = pos[u];</div><div class="line">            erep(i, u) build_sa(v);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> sum[SIGMA], t[SIZE];</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">build_ST</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            rep(i, <span class="number">2</span>, cur)</div><div class="line">            &#123;</div><div class="line">                E[++en] = (edge) &#123; next[i], i, s[n - (right[i] - Max[next[i]]) + <span class="number">1</span>] - <span class="string">'a'</span>, <span class="number">0</span> &#125;;</div><div class="line">                ++sum[E[en].w];</div><div class="line">            &#125;</div><div class="line">            rep(i, <span class="number">1</span>, SIGMA - <span class="number">1</span>) sum[i] += sum[i - <span class="number">1</span>];</div><div class="line">            rep(i, <span class="number">1</span>, en) t[sum[E[i].w]--] = i;</div><div class="line">            drep(i, en, <span class="number">1</span>) ae(t[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> ST;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SAM;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_height</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">    rep(i, <span class="number">1</span>, n) <span class="keyword">if</span>(rnk[i] != n)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(s[i + j] == s[sa[rnk[i] + <span class="number">1</span>] + j]) ++j;</div><div class="line">        height[rnk[i]] = j; <span class="keyword">if</span>(j) --j;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    init();</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>); n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</div><div class="line">    drep(i, n, <span class="number">1</span>) extend(s[i] - <span class="string">'a'</span>, i);</div><div class="line"></div><div class="line">    build_ST();</div><div class="line"></div><div class="line">    build_sa(<span class="number">1</span>);</div><div class="line">    rep(i, <span class="number">1</span>, n) rnk[sa[i]] = i;</div><div class="line">    build_height();</div><div class="line"></div><div class="line">    rep(i, <span class="number">1</span>, n) <span class="built_in">printf</span>(<span class="string">"%d "</span>, sa[i]); <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    rep(i, <span class="number">1</span>, n - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d "</span>, height[i]); <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-造出一个字符串的后缀数组，将sa数组与height数组输出。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-造出一个字符串的后缀数组，将sa数组与height数组输出。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:造出一个字符串的后缀数组，将sa数组与height数组输出。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:造出一个字符串的后缀数组，将sa数组与height数组输出。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="SAM" scheme="http://xffyjq.github.com/tags/SAM/"/>
    
      <category term="后缀树" scheme="http://xffyjq.github.com/tags/%E5%90%8E%E7%BC%80%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>UOJ207 共价大爷游长沙</title>
    <link href="http://xffyjq.github.com/2017/05/14/UOJ207/"/>
    <id>http://xffyjq.github.com/2017/05/14/UOJ207/</id>
    <published>2017-05-14T11:50:16.000Z</published>
    <updated>2017-05-14T13:01:12.427Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-一棵树，四个操作"><a href="#emsp-emsp-题意-一棵树，四个操作" class="headerlink" title="&emsp;&emsp;题意: 一棵树，四个操作:"></a>&emsp;&emsp;题意: 一棵树，四个操作:</h3><h3 id="emsp-emsp-1、删边-加边"><a href="#emsp-emsp-1、删边-加边" class="headerlink" title="&emsp;&emsp;1、删边 + 加边"></a>&emsp;&emsp;1、删边 + 加边</h3><h3 id="emsp-emsp-2、加入点对-x-y"><a href="#emsp-emsp-2、加入点对-x-y" class="headerlink" title="&emsp;&emsp;2、加入点对(x, y)"></a>&emsp;&emsp;2、加入点对(x, y)</h3><h3 id="emsp-emsp-3、删除第x个加入的点对"><a href="#emsp-emsp-3、删除第x个加入的点对" class="headerlink" title="&emsp;&emsp;3、删除第x个加入的点对"></a>&emsp;&emsp;3、删除第x个加入的点对</h3><h3 id="emsp-emsp-4、询问当前所有点对之间的路径是否均经过边-x-y"><a href="#emsp-emsp-4、询问当前所有点对之间的路径是否均经过边-x-y" class="headerlink" title="&emsp;&emsp;4、询问当前所有点对之间的路径是否均经过边(x, y)"></a>&emsp;&emsp;4、询问当前所有点对之间的路径是否均经过边(x, y)</h3><a id="more"></a>
<p>&emsp;&emsp;这道题是动态树维护虚边信息的好题。<br>&emsp;&emsp;考察操作4，所有点对路径均经过边(x, y)，就代表着将x作为树根后，所有点对均有且只有一个点在y的子树中。(包括y)<br>&emsp;&emsp;我们将每一条路径随机一个很大的权值，并异或到对应点对的两个点上。则x作为根并access(y)后，y的实子树中只有点x。那么所有路径有且只有一个点在y子树中-&gt;y及其虚子树异或和=所有路径异或和。当然以上成立的条件是随机出的权值没有重复，异或和也不能有重复的。在int范围内随机就可以避免这个问题了。<br>&emsp;&emsp;维护一个所有路径异或和now和每个节点的信息，加入与删除路径点对时记得在总异或和与路径两端点权值中加上(清掉)该路径权值，异或一下就好。<br>&emsp;&emsp;这道题需要维护子树和，由于是第一次练习，为了写得更模板化，我多使用了几个变量:<br>&emsp;&emsp;val —&gt; 节点权值<br>&emsp;&emsp;sum_chain —&gt; 节点实子树权值和(包括节点本身)<br>&emsp;&emsp;val_tree —&gt; 节点虚子树权值和(不包括节点本身)<br>&emsp;&emsp;sum_tree —&gt; 节点及其实子树所有节点的虚子树权值和(不包括实子树节点及本身)<br>&emsp;&emsp;以上所有权值和在本题中均指异或和。<br>&emsp;&emsp;前两项是平时维护的东西，后面多出来的两项是额外维护的东西。<br>&emsp;&emsp;这些东西可以干很多事情,比如: sum_tree + sum_chain = 该节点为根的子树的和<br>&emsp;&emsp;又比如，将加法换成异或，则val ^ val_tree 就是我们要找的节点及虚子树的异或和。<br>&emsp;&emsp;在题目中，有些东西可以合在一起维护，具体问题具体分析。<br>&emsp;&emsp;维护虚边信息的动态树在写法上面有改变，尤其是node中的access操作。要留心。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar getchar_unlocked</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">	<span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>, maxm = <span class="number">300010</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></div><div class="line">&#123;</div><div class="line">	node *p, *c[<span class="number">2</span>];</div><div class="line"></div><div class="line">	<span class="keyword">bool</span> rev;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> val_tree, val;</div><div class="line">	<span class="keyword">int</span> sum_tree, sum_chain;</div><div class="line"></div><div class="line">	node(): p(<span class="number">0</span>), rev(<span class="number">0</span>), val_tree(<span class="number">0</span>), val(<span class="number">0</span>), sum_tree(<span class="number">0</span>), sum_chain(<span class="number">0</span>) &#123; ms(c, <span class="number">0</span>); &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setc</span><span class="params">(node* o, <span class="keyword">bool</span> b)</span> </span>&#123; c[b] = o; <span class="keyword">if</span>(o) o-&gt;p = <span class="keyword">this</span>; &#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> !p || p-&gt;c[<span class="number">0</span>] != <span class="keyword">this</span> &amp;&amp; p-&gt;c[<span class="number">1</span>] != <span class="keyword">this</span>; &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">getpos</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> p-&gt;c[<span class="number">1</span>] == <span class="keyword">this</span>; &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">updrev</span><span class="params">()</span> </span>&#123; rev ^= <span class="number">1</span>; &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		sum_tree = val_tree;</div><div class="line">		sum_chain = val;</div><div class="line">		rep(i, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">if</span>(c[i])</div><div class="line">		&#123;</div><div class="line">			sum_chain ^= c[i]-&gt;sum_chain;</div><div class="line">			sum_tree ^= c[i]-&gt;sum_tree;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(rev)</div><div class="line">		&#123;</div><div class="line">			rep(i, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">if</span>(c[i]) c[i]-&gt;updrev();</div><div class="line">			swap(c[<span class="number">0</span>], c[<span class="number">1</span>]); rev = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rot</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		node *f = p; <span class="keyword">bool</span> b = getpos();</div><div class="line">		<span class="keyword">if</span>(f-&gt;isroot()) p = f-&gt;p;</div><div class="line">		<span class="keyword">else</span> f-&gt;p-&gt;setc(<span class="keyword">this</span>, f-&gt;getpos());</div><div class="line">		f-&gt;setc(c[!b], b); setc(f, !b);</div><div class="line">		f-&gt;pushup();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">relax</span><span class="params">()</span> </span>&#123; <span class="keyword">if</span>(!isroot()) p-&gt;relax(); pushdown(); &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(relax(); !isroot(); rot())</div><div class="line">			<span class="keyword">if</span>(!p-&gt;isroot()) (p-&gt;getpos() == getpos() ? p : <span class="keyword">this</span>)-&gt;rot();</div><div class="line">		pushup();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(node *u = <span class="keyword">this</span>, *v = <span class="number">0</span>; u; v = u, u = u-&gt;p)</div><div class="line">		&#123;</div><div class="line">			u-&gt;splay();</div><div class="line">			<span class="keyword">if</span>(u-&gt;c[<span class="number">1</span>]) u-&gt;val_tree ^= u-&gt;c[<span class="number">1</span>]-&gt;sum_tree ^ u-&gt;c[<span class="number">1</span>]-&gt;sum_chain;</div><div class="line">			<span class="keyword">if</span>(v) u-&gt;val_tree ^= v-&gt;sum_tree ^ v-&gt;sum_chain;</div><div class="line">			u-&gt;setc(v, <span class="number">1</span>), u-&gt;pushup();</div><div class="line">		&#125;</div><div class="line">		splay();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">beroot</span><span class="params">()</span> </span>&#123; access(); updrev(); &#125;</div><div class="line">&#125;nd[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, now;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[maxm], cnt;</div><div class="line"></div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; path[maxm];</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> LCT</div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">	&#123;</div><div class="line">		node *u = nd + x, *v = nd + y;</div><div class="line">		u-&gt;beroot(); v-&gt;access();</div><div class="line">		u-&gt;p = v; v-&gt;val_tree ^= u-&gt;sum_tree ^ u-&gt;sum_chain;</div><div class="line">		v-&gt;pushup();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">	&#123;</div><div class="line">		node *u = nd + x, *v = nd + y;</div><div class="line">		u-&gt;beroot(); v-&gt;access();</div><div class="line">		u-&gt;p = v-&gt;c[<span class="number">0</span>] = <span class="literal">NULL</span>;</div><div class="line">		v-&gt;pushup();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">	&#123;</div><div class="line">		node *u = nd + x;</div><div class="line">		u-&gt;access(); u-&gt;val ^= y; u-&gt;pushup();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">	&#123;</div><div class="line">		node *u = nd + x, *v = nd + y;</div><div class="line">		u-&gt;beroot(); v-&gt;access();</div><div class="line">		<span class="keyword">return</span> (v-&gt;val ^ v-&gt;val_tree) == now;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> LCT;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">	freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	srand(time(<span class="number">0</span>)); <span class="built_in">scanf</span>(<span class="string">"%*d"</span>);</div><div class="line">	read(n); read(m); <span class="keyword">int</span> x, y;</div><div class="line">	rep(i, <span class="number">1</span>, n - <span class="number">1</span>) read(x), read(y), link(x, y);</div><div class="line">	<span class="keyword">while</span>(m--)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> op; read(op);</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(op == <span class="number">1</span>)</div><div class="line">		&#123;</div><div class="line">			read(x); read(y); cut(x, y);</div><div class="line">			read(x); read(y); link(x, y);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(op == <span class="number">2</span>)</div><div class="line">		&#123;</div><div class="line">			read(x); read(y);</div><div class="line">			<span class="keyword">int</span> Hash = rand();</div><div class="line">			now ^= Hash;</div><div class="line">			change(x, Hash); change(y, Hash);</div><div class="line">			path[++cnt] = mp(x, y);</div><div class="line">			a[cnt] = Hash;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(op == <span class="number">3</span>)</div><div class="line">		&#123;</div><div class="line">			read(x);</div><div class="line">			change(path[x].first, a[x]);</div><div class="line">			change(path[x].second, a[x]);</div><div class="line">			now ^= a[x];</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(op == <span class="number">4</span>) read(x), read(y), <span class="built_in">puts</span>(query(x, y) ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-一棵树，四个操作&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-一棵树，四个操作&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意: 一棵树，四个操作:&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意: 一棵树，四个操作:&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-1、删边-加边&quot;&gt;&lt;a href=&quot;#emsp-emsp-1、删边-加边&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;1、删边 + 加边&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;1、删边 + 加边&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-2、加入点对-x-y&quot;&gt;&lt;a href=&quot;#emsp-emsp-2、加入点对-x-y&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;2、加入点对(x, y)&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;2、加入点对(x, y)&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-3、删除第x个加入的点对&quot;&gt;&lt;a href=&quot;#emsp-emsp-3、删除第x个加入的点对&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;3、删除第x个加入的点对&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;3、删除第x个加入的点对&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-4、询问当前所有点对之间的路径是否均经过边-x-y&quot;&gt;&lt;a href=&quot;#emsp-emsp-4、询问当前所有点对之间的路径是否均经过边-x-y&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;4、询问当前所有点对之间的路径是否均经过边(x, y)&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;4、询问当前所有点对之间的路径是否均经过边(x, y)&lt;/h3&gt;
    
    </summary>
    
    
      <category term="LCT" scheme="http://xffyjq.github.com/tags/LCT/"/>
    
  </entry>
  
  <entry>
    <title>SPOJ1812 LCS2</title>
    <link href="http://xffyjq.github.com/2017/05/09/SPOJ1812/"/>
    <id>http://xffyjq.github.com/2017/05/09/SPOJ1812/</id>
    <published>2017-05-09T04:38:00.000Z</published>
    <updated>2017-05-11T05:07:57.543Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-给你n个串，求它们的LCS。"><a href="#emsp-emsp-题意-给你n个串，求它们的LCS。" class="headerlink" title="&emsp;&emsp;题意:给你n个串，求它们的LCS。"></a>&emsp;&emsp;题意:给你n个串，求它们的LCS。</h3><a id="more"></a>
<p>&emsp;&emsp;后缀系列的经典问题。<br>&emsp;&emsp;这道题用后缀数组+二分当然可以做。将n个串连接成一个长串，只需要每次二分LCP，看是否有n个后缀LCP大于该值，又正好分属n个串就好。<br>&emsp;&emsp;但这个复杂度显然是$O(n \log n)$的，在这里过不了。我们考虑用SAM解决这个问题。<br>&emsp;&emsp;首先我们从两个串的情况入手: (SPOJ LCS正是两串LCS的题目)<br>&emsp;&emsp;将第一个串$s_1$的SAM构建出来，然后在上面运行第二个串$s_2$。记录一个到当前位的LCS长度，记作len。如果当前到了第i位，节点u有$s_2[i]$的转移边,则走转移边，len长度+1。如果没有该转移边，由于next边上节点所包含的串均为当前点u包含串的后缀，所以沿着next边向前走，走到第一个有该转移边的节点v。根据节点的定义，一个节点有转移边，则其中所有串均可以通过这条转移边到另一个合法子串。于是我们只需要取最长的一个。即走过v的转移边，将len重新赋值为$Max[v] + 1$。如果走到根都没有转移边的话，就从根重新开始，并将len赋值为0。每走一步更新答案即可。<br>&emsp;&emsp;如何处理多个串的情况?我们对于每个节点多记录两个值，一个代表所有串运行到当前点时的LCS值，一个代表当前串运行到当前点时的LCS，即上面的len。注:一个串可能被运行到一个点多次，记录最大值即可。要注意的是，在之前的双串LCS中，我们忽略了一个东西:当我们运行到一个点，即代表这个点包含的串在原串出现时，该节点通过next边连接的所有点，即该串的所有后缀也都在原串出现了，所以之前的点的len值也需要更新。在两个串的情况里，运行到一个点时，其代表串的后缀显然不会更优，并不用在意这一点。但是在多串中，我们需要考虑其他串的影响，就要基数排序排出节点间的拓扑序，按照其逆序更新所有节点的真正len值。运行完一个串后，将每个节点的所有串运行到当前点的LCS值对当前len取min即可。(如果没运行到则len=0，说明该节点代表的串不会参与答案更新)<br>&emsp;&emsp;最后运行完所有串后，所有节点LCS的max值就是答案了。<br>&emsp;&emsp;这道题卡时间，多清空几个数组都会T。不过错误算法(不基数排序)可以水过去。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">	<span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>, SIZE = maxn &lt;&lt; <span class="number">2</span>, SIGMA = <span class="number">26</span>;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> SAM</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ch[SIZE][SIGMA], next[SIZE], Max[SIZE];</div><div class="line">    <span class="keyword">int</span> LCS[SIZE], LEN[SIZE];</div><div class="line">    <span class="keyword">int</span> cur, last;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; cur = last = <span class="number">1</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">New</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; Max[++cur] = x; <span class="keyword">return</span> cur; &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u = New(Max[last] + <span class="number">1</span>), v = last;</div><div class="line">        <span class="keyword">for</span>(; v &amp;&amp; !ch[v][c]; v = next[v]) ch[v][c] = u;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!v) next[u] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> h = ch[v][c];</div><div class="line">            <span class="keyword">if</span>(Max[h] == Max[v] + <span class="number">1</span>) next[u] = h;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> o = New(Max[v] + <span class="number">1</span>);</div><div class="line">                <span class="built_in">memcpy</span>(ch[o], ch[h], <span class="keyword">sizeof</span> ch[h]);</div><div class="line">                next[o] = next[h];</div><div class="line">                next[h] = next[u] = o;</div><div class="line">                <span class="keyword">for</span>(; v &amp;&amp; ch[v][c] == h; v = next[v]) ch[v][c] = o;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        last = u;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SAM;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, ans;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum[maxn], t[SIZE];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    init();</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s); n = <span class="built_in">strlen</span>(s);</div><div class="line">    rep(i, <span class="number">0</span>, n - <span class="number">1</span>) extend(s[i] - <span class="string">'a'</span>);</div><div class="line">    rep(i, <span class="number">1</span>, cur) LCS[i] = Max[i];</div><div class="line"></div><div class="line">    rep(i, <span class="number">1</span>, cur) ++sum[Max[i]];</div><div class="line">    rep(i, <span class="number">1</span>, n) sum[i] += sum[i - <span class="number">1</span>];</div><div class="line">    drep(i, cur, <span class="number">1</span>) t[sum[Max[i]]--] = i;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> h = <span class="number">1</span>, len = <span class="number">0</span>;</div><div class="line">        ms(LEN, <span class="number">0</span>);</div><div class="line">        rep(i, <span class="number">0</span>, <span class="built_in">strlen</span>(s) - <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(ch[h][s[i] - <span class="string">'a'</span>]) ++len, h = ch[h][s[i] - <span class="string">'a'</span>];</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(h &amp;&amp; !ch[h][s[i] - <span class="string">'a'</span>]) h = next[h];</div><div class="line">                <span class="keyword">if</span>(!h) h = <span class="number">1</span>, len = <span class="number">0</span>;</div><div class="line">                <span class="keyword">else</span> len = Max[h] + <span class="number">1</span>, h = ch[h][s[i] - <span class="string">'a'</span>];</div><div class="line">            &#125;</div><div class="line">            chkmax(LEN[h], len);</div><div class="line">        &#125;</div><div class="line">        drep(i, cur, <span class="number">1</span>) chkmax(LEN[next[t[i]]], LEN[t[i]]);</div><div class="line">        rep(i, <span class="number">1</span>, cur) chkmin(LCS[i], LEN[i]);</div><div class="line">    &#125;</div><div class="line">    rep(i, <span class="number">1</span>, cur) chkmax(ans, LCS[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-给你n个串，求它们的LCS。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-给你n个串，求它们的LCS。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:给你n个串，求它们的LCS。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:给你n个串，求它们的LCS。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="SAM" scheme="http://xffyjq.github.com/tags/SAM/"/>
    
  </entry>
  
  <entry>
    <title>POJ1509 Glass Beads</title>
    <link href="http://xffyjq.github.com/2017/05/07/POJ1509/"/>
    <id>http://xffyjq.github.com/2017/05/07/POJ1509/</id>
    <published>2017-05-07T13:16:39.000Z</published>
    <updated>2017-05-07T13:36:12.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-给你一个循环串-首尾相接-，求出使其字典序最小的起始位置。"><a href="#emsp-emsp-题意-给你一个循环串-首尾相接-，求出使其字典序最小的起始位置。" class="headerlink" title="&emsp;&emsp;题意:给你一个循环串(首尾相接)，求出使其字典序最小的起始位置。"></a>&emsp;&emsp;题意:给你一个循环串(首尾相接)，求出使其字典序最小的起始位置。</h3><a id="more"></a>
<p>&emsp;&emsp;后缀自动机(SAM)的第一道题。<br>&emsp;&emsp;看后缀自动机有关的东西看了很久，差不多明白了一些。<br>&emsp;&emsp;这道题其实本来有更加简单的暴力做法，不过就全当练习SAM了。<br>&emsp;&emsp;首先将原串S扩展至两倍SS，这是循环串的惯用套路。<br>&emsp;&emsp;接着将SAM增量构造出来，由于SAM包含了原串的所有子串，所以在SAM上，每次沿着字典序最小的边走，走$|S|$次，到达节点u一定包含要找的字典序最小的串。<br>&emsp;&emsp;那么如何将其提取出来?也就是，如何在u表示的众多串中，找到那个串，并且知道其在原串中的起始位置呢?<br>&emsp;&emsp;其实并不用找到那个串。注意到u表示的最长的串一定是从原串的开头到我们要找的串的末尾的。而根据SAM的性质，我们要找的串一定是最长串的后缀，且长度为n。于是$Max[u]-n+1$便是答案了。<br>&emsp;&emsp;要注意一点:SAM中是否有某个节点是用其对应下标是否为0来判断的。所以SAM的start节点不能设为0。为了方便，设为1即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>, SIZE = (maxn &lt;&lt; <span class="number">3</span>), SIGMA = <span class="number">26</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">	<span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> SAM</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> cur, last;</div><div class="line">    <span class="keyword">int</span> ch[SIZE][SIGMA], next[SIZE], Max[SIZE];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">New</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; Max[++cur] = x; <span class="keyword">return</span> cur; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; ms(next, <span class="number">0</span>); ms(Max, <span class="number">0</span>); ms(ch, <span class="number">0</span>); cur = last = <span class="number">1</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u = New(Max[last] + <span class="number">1</span>), v = last;</div><div class="line">        <span class="keyword">for</span>(; v &amp;&amp; !ch[v][c]; v = next[v]) ch[v][c] = u;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!v) next[u] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> h = ch[v][c];</div><div class="line">            <span class="keyword">if</span>(Max[h] == Max[v] + <span class="number">1</span>) next[u] = h;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> o = New(Max[v] + <span class="number">1</span>);</div><div class="line">                <span class="built_in">memcpy</span>(ch[o], ch[h], <span class="keyword">sizeof</span> ch[h]);</div><div class="line">                next[o] = next[h];</div><div class="line">                next[h] = next[u] = o;</div><div class="line">                <span class="keyword">for</span>(; v &amp;&amp; ch[v][c] == h; v = next[v]) ch[v][c] = o;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        last = u;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SAM;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="keyword">int</span> _; read(_);</div><div class="line">    <span class="keyword">while</span>(_--)</div><div class="line">    &#123;</div><div class="line">        init();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s); n = <span class="built_in">strlen</span>(s);</div><div class="line">        rep(i, <span class="number">0</span>, n - <span class="number">1</span>) extend(s[i] - <span class="string">'a'</span>);</div><div class="line">        rep(i, <span class="number">0</span>, n - <span class="number">1</span>) extend(s[i] - <span class="string">'a'</span>);</div><div class="line">        <span class="keyword">int</span> h = <span class="number">1</span>;</div><div class="line">        rep(i, <span class="number">1</span>, n) rep(c, <span class="number">0</span>, <span class="number">25</span>)</div><div class="line">            <span class="keyword">if</span>(ch[h][c]) &#123; h = ch[h][c]; <span class="keyword">break</span>; &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Max[h] - n + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-给你一个循环串-首尾相接-，求出使其字典序最小的起始位置。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-给你一个循环串-首尾相接-，求出使其字典序最小的起始位置。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:给你一个循环串(首尾相接)，求出使其字典序最小的起始位置。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:给你一个循环串(首尾相接)，求出使其字典序最小的起始位置。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="SAM" scheme="http://xffyjq.github.com/tags/SAM/"/>
    
  </entry>
  
</feed>
