<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xffyjq&#39;s Page</title>
  <subtitle>Simple, enough.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xffyjq.github.com/"/>
  <updated>2017-05-22T05:43:02.985Z</updated>
  <id>http://xffyjq.github.com/</id>
  
  <author>
    <name>xffyjq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BZOJ3064 CPU监控</title>
    <link href="http://xffyjq.github.com/2017/05/22/BZOJ3064/"/>
    <id>http://xffyjq.github.com/2017/05/22/BZOJ3064/</id>
    <published>2017-05-22T05:33:44.000Z</published>
    <updated>2017-05-22T05:43:02.985Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-维护一个序列，4个操作"><a href="#emsp-emsp-题意-维护一个序列，4个操作" class="headerlink" title="&emsp;&emsp;题意:维护一个序列，4个操作:"></a>&emsp;&emsp;题意:维护一个序列，4个操作:</h3><h3 id="emsp-emsp-1、区间加上x"><a href="#emsp-emsp-1、区间加上x" class="headerlink" title="&emsp;&emsp;1、区间加上x"></a>&emsp;&emsp;1、区间加上x</h3><h3 id="emsp-emsp-2、区间赋值为x"><a href="#emsp-emsp-2、区间赋值为x" class="headerlink" title="&emsp;&emsp;2、区间赋值为x"></a>&emsp;&emsp;2、区间赋值为x</h3><h3 id="emsp-emsp-3、询问区间最大值"><a href="#emsp-emsp-3、询问区间最大值" class="headerlink" title="&emsp;&emsp;3、询问区间最大值"></a>&emsp;&emsp;3、询问区间最大值</h3><h3 id="emsp-emsp-4、询问区间历史最大值"><a href="#emsp-emsp-4、询问区间历史最大值" class="headerlink" title="&emsp;&emsp;4、询问区间历史最大值"></a>&emsp;&emsp;4、询问区间历史最大值</h3><a id="more"></a>
<p>&emsp;&emsp;区间历史最值，涉及到多次add和set操作的先后顺序，不是个好办的东西。<br>&emsp;&emsp;参考吉如一2016集训队论文，发现了一个巧妙的做法。<br>&emsp;&emsp;支持add和set操作的线段树有一个性质:<br>&emsp;&emsp;当一次set操作之后，在下一次节点pushdown之前，由于此时区间均为一个数，所以区间add操作可以全部视为区间set。<br>&emsp;&emsp;所以我们只需要考虑第一次set之前的add标记达到过的最值maxadd和后面的set标记达到过的最值maxset。<br>&emsp;&emsp;至此问题已经解决。<br>&emsp;&emsp;程序有点长，在过程中始终要牢记第一次set之后的add全部变成set，不管何处都是一样。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line">  </div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line">  </div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>, INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"> </div><div class="line"><span class="keyword">namespace</span> SGT</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ls h &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rs h &lt;&lt; 1 | 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lc l, mid</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rc mid + 1, r</span></div><div class="line"> </div><div class="line">    <span class="keyword">int</span> Max[maxn * <span class="number">3</span>], PastMax[maxn * <span class="number">3</span>];</div><div class="line">    <span class="keyword">int</span> add[maxn * <span class="number">3</span>], <span class="built_in">set</span>[maxn * <span class="number">3</span>], pastadd[maxn * <span class="number">3</span>], pastset[maxn * <span class="number">3</span>];</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> h)</span></span></div><div class="line">    &#123;</div><div class="line">        Max[h] = max(Max[ls], Max[rs]);</div><div class="line">        PastMax[h] = max(PastMax[ls], PastMax[rs]);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">set</span>[h] = pastset[h] = -INF;</div><div class="line">        <span class="keyword">if</span>(l == r) &#123; PastMax[h] = read(Max[h]); <span class="keyword">return</span>; &#125;</div><div class="line">        creat(ls, lc); creat(rs, rc);</div><div class="line">        pushup(h);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> h)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(pastadd[h])</div><div class="line">        &#123;</div><div class="line">            chkmax(PastMax[ls], Max[ls] + pastadd[h]);</div><div class="line">            <span class="keyword">if</span>(pastset[ls] == -INF) chkmax(pastadd[ls], add[ls] + pastadd[h]);</div><div class="line">            <span class="keyword">else</span> chkmax(pastset[ls], <span class="built_in">set</span>[ls] + pastadd[h]);</div><div class="line"> </div><div class="line">            chkmax(PastMax[rs], Max[rs] + pastadd[h]);</div><div class="line">            <span class="keyword">if</span>(pastset[rs] == -INF) chkmax(pastadd[rs], add[rs] + pastadd[h]);</div><div class="line">            <span class="keyword">else</span> chkmax(pastset[rs], <span class="built_in">set</span>[rs] + pastadd[h]);</div><div class="line"> </div><div class="line">            pastadd[h] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(pastset[h] != -INF)</div><div class="line">        &#123;</div><div class="line">            chkmax(PastMax[ls], pastset[h]);</div><div class="line">            chkmax(pastset[ls], pastset[h]);</div><div class="line">            chkmax(PastMax[rs], pastset[h]);</div><div class="line">            chkmax(pastset[rs], pastset[h]);</div><div class="line"> </div><div class="line">            pastset[h] = -INF;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(<span class="built_in">set</span>[h] != -INF)</div><div class="line">        &#123;</div><div class="line">            Max[ls] = Max[rs] = <span class="built_in">set</span>[h]; </div><div class="line">            <span class="built_in">set</span>[ls] = <span class="built_in">set</span>[rs] = <span class="built_in">set</span>[h];</div><div class="line">			add[ls] = add[rs] = <span class="number">0</span>;</div><div class="line">            <span class="built_in">set</span>[h] = -INF;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(add[h])</div><div class="line">        &#123;</div><div class="line">            Max[ls] += add[h], Max[rs] += add[h];</div><div class="line">			<span class="keyword">if</span>(pastset[ls] == -INF) add[ls] += add[h];</div><div class="line">			<span class="keyword">else</span> <span class="built_in">set</span>[ls] += add[h];</div><div class="line">			<span class="keyword">if</span>(pastset[rs] == -INF) add[rs] += add[h];</div><div class="line">			<span class="keyword">else</span> <span class="built_in">set</span>[rs] += add[h];</div><div class="line">            add[h] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upd_add</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</div><div class="line">        &#123;</div><div class="line">            Max[h] += x;</div><div class="line">            chkmax(PastMax[h], Max[h]);</div><div class="line">            <span class="keyword">if</span>(pastset[h] == -INF)</div><div class="line">			&#123;</div><div class="line">				add[h] += x;</div><div class="line">				chkmax(pastadd[h], add[h]);</div><div class="line">			&#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				<span class="built_in">set</span>[h] += x;</div><div class="line">				chkmax(pastset[h], <span class="built_in">set</span>[h]);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        pushdown(h);</div><div class="line">        <span class="keyword">if</span>(L &lt;= mid) upd_add(ls, lc, L, R, x);</div><div class="line">        <span class="keyword">if</span>(R &gt; mid) upd_add(rs, rc, L, R, x);</div><div class="line">        pushup(h);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upd_set</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</div><div class="line">        &#123;</div><div class="line">            Max[h] = <span class="built_in">set</span>[h] = x; add[h] = <span class="number">0</span>;</div><div class="line">            chkmax(PastMax[h], Max[h]);</div><div class="line">            chkmax(pastset[h], <span class="built_in">set</span>[h]);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        pushdown(h);</div><div class="line">        <span class="keyword">if</span>(L &lt;= mid) upd_set(ls, lc, L, R, x);</div><div class="line">        <span class="keyword">if</span>(R &gt; mid) upd_set(rs, rc, L, R, x);</div><div class="line">        pushup(h);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">bool</span> op)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> op ? Max[h] : PastMax[h];</div><div class="line">        pushdown(h); <span class="keyword">int</span> ret = -INF;</div><div class="line">        <span class="keyword">if</span>(L &lt;= mid) chkmax(ret, query(ls, lc, L, R, op));</div><div class="line">        <span class="keyword">if</span>(R &gt; mid) chkmax(ret, query(rs, rc, L, R, op));</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SGT;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">	freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    read(n); creat(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">    read(m);</div><div class="line">    <span class="keyword">while</span>(m--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">char</span> op[<span class="number">2</span>]; <span class="keyword">int</span> l, r, w;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, op); read(l), read(r);</div><div class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'P'</span>) read(w), upd_add(<span class="number">1</span>, <span class="number">1</span>, n, l, r, w);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'C'</span>) read(w), upd_set(<span class="number">1</span>, <span class="number">1</span>, n, l, r, w);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(<span class="number">1</span>, <span class="number">1</span>, n, l, r, op[<span class="number">0</span>] == <span class="string">'Q'</span>));</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-维护一个序列，4个操作&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-维护一个序列，4个操作&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:维护一个序列，4个操作:&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:维护一个序列，4个操作:&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-1、区间加上x&quot;&gt;&lt;a href=&quot;#emsp-emsp-1、区间加上x&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;1、区间加上x&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;1、区间加上x&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-2、区间赋值为x&quot;&gt;&lt;a href=&quot;#emsp-emsp-2、区间赋值为x&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;2、区间赋值为x&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;2、区间赋值为x&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-3、询问区间最大值&quot;&gt;&lt;a href=&quot;#emsp-emsp-3、询问区间最大值&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;3、询问区间最大值&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;3、询问区间最大值&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-4、询问区间历史最大值&quot;&gt;&lt;a href=&quot;#emsp-emsp-4、询问区间历史最大值&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;4、询问区间历史最大值&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;4、询问区间历史最大值&lt;/h3&gt;
    
    </summary>
    
    
      <category term="线段树" scheme="http://xffyjq.github.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>UOJ164 V</title>
    <link href="http://xffyjq.github.com/2017/05/22/UOJ164/"/>
    <id>http://xffyjq.github.com/2017/05/22/UOJ164/</id>
    <published>2017-05-22T04:56:00.000Z</published>
    <updated>2017-05-22T05:32:30.260Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-维护一个序列，5个操作"><a href="#emsp-emsp-题意-维护一个序列，5个操作" class="headerlink" title="&emsp;&emsp;题意:维护一个序列，5个操作:"></a>&emsp;&emsp;题意:维护一个序列，5个操作:</h3><h3 id="emsp-emsp-1、区间加x"><a href="#emsp-emsp-1、区间加x" class="headerlink" title="&emsp;&emsp;1、区间加x"></a>&emsp;&emsp;1、区间加x</h3><h3 id="emsp-emsp-2、区间减x后对0取max"><a href="#emsp-emsp-2、区间减x后对0取max" class="headerlink" title="&emsp;&emsp;2、区间减x后对0取max"></a>&emsp;&emsp;2、区间减x后对0取max</h3><h3 id="emsp-emsp-3、区间覆盖成x"><a href="#emsp-emsp-3、区间覆盖成x" class="headerlink" title="&emsp;&emsp;3、区间覆盖成x"></a>&emsp;&emsp;3、区间覆盖成x</h3><h3 id="emsp-emsp-4、询问单点值"><a href="#emsp-emsp-4、询问单点值" class="headerlink" title="&emsp;&emsp;4、询问单点值"></a>&emsp;&emsp;4、询问单点值</h3><h3 id="emsp-emsp-5、询问单点历史最大值"><a href="#emsp-emsp-5、询问单点历史最大值" class="headerlink" title="&emsp;&emsp;5、询问单点历史最大值"></a>&emsp;&emsp;5、询问单点历史最大值</h3><a id="more"></a>
<p>&emsp;&emsp;又是一眼线段树。但是同样也有新东西。<br>&emsp;&emsp;首先，区间减x后对0取max这个操作看起来十分的棘手。还有就是历史最大值。<br>&emsp;&emsp;但是这道题的好处是单点查询，也就是说我们的每个节点并不需要维护实际信息，而只需要维护lazy-tag。将初始信息记录在叶节点tag上，在询问单点时，将一路上的tag给pushdown下去，最后一个点的tag上的值就用来更新答案了。<br>&emsp;&emsp;我们定义节点tag为一个二元组$(a, b)$&emsp;代表执行这个标记时，对于区间内的数，先加上a然后对b取max。<br>&emsp;&emsp;那么操作1 2 3分别对应标记$(x, {- \infty})$ $(-x, 0)$ $({- \infty}, x)$<br>&emsp;&emsp;如何pushdown这个标记?设下传的标记为$(A, B)$，直接将当前标记$(a, b)$更新为$$(a + A, \max(b + A, B))$$即可。<br>&emsp;&emsp;在实际应用中由于数字可能爆-INF的下界，所以左边要对-INF取个max。<br>&emsp;&emsp;如何维护历史标记?同样用一个二元组$(c, d)$，分别代表该节点在上次与这次pushdown之间的最大add值和最大取max值。pushdown的话，设下传的标记为$(C, D)$，当前历史标记更新为:$$(\max(c, a + C), \max(d, b + C, D))$$<br>&emsp;&emsp;左侧同样要对-INF取max。注意到更新标记涉及到节点当前标记$(a, b)$，所以pushdown时先下传历史标记再下传当前标记。<br>&emsp;&emsp;最后pushdown到叶子时，节点的$\max(a, b)$、$\max(c, d)$就分别为当前和历史的答案。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500010</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> LL INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;LL, LL&gt; PLL;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> SGT</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ls h &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rs h &lt;&lt; 1 | 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lc l, mid</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rc mid + 1, r</span></div><div class="line"></div><div class="line">    PLL T[maxn * <span class="number">3</span>], Past[maxn * <span class="number">3</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(l == r)</div><div class="line">        &#123;</div><div class="line">            Past[h].x = Past[h].y = T[h].x = read(T[h].y);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        creat(ls, lc); creat(rs, rc);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> h)</span></span></div><div class="line">    &#123;</div><div class="line">        chkmax(Past[ls].x, max(Past[h].x + T[ls].x, -INF));</div><div class="line">        chkmax(Past[ls].y, max(Past[h].y, Past[h].x + T[ls].y));</div><div class="line">        chkmax(Past[rs].x, max(Past[h].x + T[rs].x, -INF));</div><div class="line">        chkmax(Past[rs].y, max(Past[h].y, Past[h].x + T[rs].y));</div><div class="line">        T[ls] = mp(max(T[ls].x + T[h].x, -INF), max(T[ls].y + T[h].x, T[h].y));</div><div class="line">        T[rs] = mp(max(T[rs].x + T[h].x, -INF), max(T[rs].y + T[h].x, T[h].y));</div><div class="line">        T[h] = Past[h] = mp(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, PLL w)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</div><div class="line">        &#123;</div><div class="line">            T[h] = mp(max(T[h].x + w.x, -INF), max(T[h].y + w.x, w.y));</div><div class="line">            chkmax(Past[h].x, T[h].x); chkmax(Past[h].y, T[h].y);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        pushdown(h);</div><div class="line">        <span class="keyword">if</span>(L &lt;= mid) update(ls, lc, L, R, w);</div><div class="line">        <span class="keyword">if</span>(R &gt; mid) update(rs, rc, L, R, w);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">bool</span> op)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> op ? max(T[h].x, T[h].y) : max(Past[h].x, Past[h].y);</div><div class="line">        pushdown(h);</div><div class="line">        <span class="keyword">if</span>(p &lt;= mid) <span class="keyword">return</span> query(ls, lc, p, op);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(rs, rc, p, op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SGT;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    read(n); read(m);</div><div class="line">    creat(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">    <span class="keyword">while</span>(m--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> op, l, r; LL w; read(op);</div><div class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) read(l), read(r), read(w), update(<span class="number">1</span>, <span class="number">1</span>, n, l, r, mp(w, <span class="number">0</span>));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) read(l), read(r), read(w), update(<span class="number">1</span>, <span class="number">1</span>, n, l, r, mp(-w, <span class="number">0</span>));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>) read(l), read(r), read(w), update(<span class="number">1</span>, <span class="number">1</span>, n, l, r, mp(-INF, w));</div><div class="line">        <span class="keyword">else</span> read(l), <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(<span class="number">1</span>, <span class="number">1</span>, n, l, op == <span class="number">4</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-维护一个序列，5个操作&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-维护一个序列，5个操作&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:维护一个序列，5个操作:&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:维护一个序列，5个操作:&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-1、区间加x&quot;&gt;&lt;a href=&quot;#emsp-emsp-1、区间加x&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;1、区间加x&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;1、区间加x&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-2、区间减x后对0取max&quot;&gt;&lt;a href=&quot;#emsp-emsp-2、区间减x后对0取max&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;2、区间减x后对0取max&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;2、区间减x后对0取max&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-3、区间覆盖成x&quot;&gt;&lt;a href=&quot;#emsp-emsp-3、区间覆盖成x&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;3、区间覆盖成x&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;3、区间覆盖成x&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-4、询问单点值&quot;&gt;&lt;a href=&quot;#emsp-emsp-4、询问单点值&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;4、询问单点值&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;4、询问单点值&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-5、询问单点历史最大值&quot;&gt;&lt;a href=&quot;#emsp-emsp-5、询问单点历史最大值&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;5、询问单点历史最大值&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;5、询问单点历史最大值&lt;/h3&gt;
    
    </summary>
    
    
      <category term="线段树" scheme="http://xffyjq.github.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>HDU5306 Gorgeous Sequence</title>
    <link href="http://xffyjq.github.com/2017/05/21/HDU5306/"/>
    <id>http://xffyjq.github.com/2017/05/21/HDU5306/</id>
    <published>2017-05-21T13:46:03.000Z</published>
    <updated>2017-05-22T04:55:52.186Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-维护一个数列，三个操作"><a href="#emsp-emsp-题意-维护一个数列，三个操作" class="headerlink" title="&emsp;&emsp;题意:维护一个数列，三个操作:"></a>&emsp;&emsp;题意:维护一个数列，三个操作:</h3><h3 id="emsp-emsp-1、区间对一个数取min"><a href="#emsp-emsp-1、区间对一个数取min" class="headerlink" title="&emsp;&emsp;1、区间对一个数取min"></a>&emsp;&emsp;1、区间对一个数取min</h3><h3 id="emsp-emsp-2、询问区间max"><a href="#emsp-emsp-2、询问区间max" class="headerlink" title="&emsp;&emsp;2、询问区间max"></a>&emsp;&emsp;2、询问区间max</h3><h3 id="emsp-emsp-3、询问区间sum"><a href="#emsp-emsp-3、询问区间sum" class="headerlink" title="&emsp;&emsp;3、询问区间sum"></a>&emsp;&emsp;3、询问区间sum</h3><a id="more"></a>
<p>&emsp;&emsp;这道题看着就是一个线段树。<br>&emsp;&emsp;仔细观察发现，1操作似乎不是很好维护，如果要维护似乎只能暴力下传。(其实暴力下传也能够过)<br>&emsp;&emsp;有什么更好的办法?<br>&emsp;&emsp;参考吉如一2016集训队论文，发现虽然不能有更好的替代方法，但是可以进行优化，减少下传次数。<br>&emsp;&emsp;维护最大值$max$与区间和$sum$之外，再维护次大值$second$，最大值出现次数$times$。<br>&emsp;&emsp;每次区间对一个数$x$取min时:<br>&emsp;&emsp;若区间$max &lt;= x$，忽略。<br>&emsp;&emsp;区间$max &gt; x$ 但 $second &lt; x$，则$sum$减去$(max - x) \times times$，$max$变为$times$。<br>&emsp;&emsp;$second &gt;= x$，没办法，暴力递归解决。<br>&emsp;&emsp;但是这样好像会递归到不存在的区间呀怎么办?没关系。不存在的区间max与second均为0，到了就会返回回来。唯一带来的坑点就是数组要看到$maxn \times 8$!!!!!(神坑)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000010</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> SGT</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ls h &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rs h &lt;&lt; 1 | 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lc l, mid</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rc mid + 1, r</span></div><div class="line"></div><div class="line">    LL T[maxn * <span class="number">8</span>], Max[maxn * <span class="number">8</span>], Times[maxn * <span class="number">8</span>], Second[maxn * <span class="number">8</span>];</div><div class="line">    LL min[maxn * <span class="number">8</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> h)</span></span></div><div class="line">    &#123;</div><div class="line">        T[h] = T[ls] + T[rs];</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(Max[ls] == Max[rs])</div><div class="line">        &#123;</div><div class="line">            Max[h] = Max[ls];</div><div class="line">            Times[h] = Times[ls] + Times[rs];</div><div class="line">            Second[h] = <span class="built_in">std</span>::max(Second[ls], Second[rs]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(Max[ls] &gt; Max[rs])</div><div class="line">            &#123;</div><div class="line">                Max[h] = Max[ls];</div><div class="line">                Times[h] = Times[ls];</div><div class="line">                Second[h] = <span class="built_in">std</span>::max(Second[ls], Max[rs]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                Max[h] = Max[rs];</div><div class="line">                Times[h] = Times[rs];</div><div class="line">                Second[h] = <span class="built_in">std</span>::max(Second[rs], Max[ls]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> h)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(~min[h])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(Max[ls] &gt; min[h])</div><div class="line">            &#123;</div><div class="line">                T[ls] -= Times[ls] * (Max[ls] - min[h]);</div><div class="line">                Max[ls] = min[ls] = min[h];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(Max[rs] &gt; min[h])</div><div class="line">            &#123;</div><div class="line">                T[rs] -= Times[rs] * (Max[rs] - min[h]);</div><div class="line">                Max[rs] = min[rs] = min[h];</div><div class="line">            &#125;</div><div class="line">            min[h] = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line">    &#123;</div><div class="line">        min[h] = <span class="number">-1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(l == r)</div><div class="line">        &#123;</div><div class="line">            Max[h] = read(T[h]);</div><div class="line">            Second[h] = <span class="number">0</span>; Times[h] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        creat(ls, lc); creat(rs, rc);</div><div class="line">        pushup(h);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, LL t)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(Max[h] &lt;= t) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(Second[h] &lt; t)</div><div class="line">            &#123;</div><div class="line">                T[h] -= Times[h] * (Max[h] - t);</div><div class="line">                Max[h] = min[h] = t;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                pushdown(h);</div><div class="line">                update(ls, lc, L, R, t);</div><div class="line">                update(rs, rc, L, R, t);</div><div class="line">                pushup(h);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        pushdown(h);</div><div class="line">        <span class="keyword">if</span>(L &lt;= mid) update(ls, lc, L, R, t);</div><div class="line">        <span class="keyword">if</span>(R &gt; mid) update(rs, rc, L, R, t);</div><div class="line">        pushup(h);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">LL <span class="title">qry_max</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> Max[h];</div><div class="line">        pushdown(h); LL ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(L &lt;= mid) chkmax(ret, qry_max(ls, lc, L, R)); </div><div class="line">        <span class="keyword">if</span>(R &gt; mid) chkmax(ret, qry_max(rs, rc, L, R)); </div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">LL <span class="title">qry_sum</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> T[h];</div><div class="line">        pushdown(h); LL ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(L &lt;= mid) ret += qry_sum(ls, lc, L, R); </div><div class="line">        <span class="keyword">if</span>(R &gt; mid) ret += qry_sum(rs, rc, L, R); </div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SGT;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> _; read(_);</div><div class="line">    <span class="keyword">while</span>(_--)</div><div class="line">    &#123;</div><div class="line">        read(n); read(m);</div><div class="line">        creat(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">        <span class="keyword">while</span>(m--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> op, L, R; LL t; read(op);</div><div class="line">            <span class="keyword">if</span>(op == <span class="number">0</span>) read(L), read(R), read(t), update(<span class="number">1</span>, <span class="number">1</span>, n, L, R, t);</div><div class="line">            <span class="keyword">if</span>(op == <span class="number">1</span>) read(L), read(R), <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, qry_max(<span class="number">1</span>, <span class="number">1</span>, n, L, R));</div><div class="line">            <span class="keyword">if</span>(op == <span class="number">2</span>) read(L), read(R), <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, qry_sum(<span class="number">1</span>, <span class="number">1</span>, n, L, R));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-维护一个数列，三个操作&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-维护一个数列，三个操作&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:维护一个数列，三个操作:&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:维护一个数列，三个操作:&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-1、区间对一个数取min&quot;&gt;&lt;a href=&quot;#emsp-emsp-1、区间对一个数取min&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;1、区间对一个数取min&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;1、区间对一个数取min&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-2、询问区间max&quot;&gt;&lt;a href=&quot;#emsp-emsp-2、询问区间max&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;2、询问区间max&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;2、询问区间max&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-3、询问区间sum&quot;&gt;&lt;a href=&quot;#emsp-emsp-3、询问区间sum&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;3、询问区间sum&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;3、询问区间sum&lt;/h3&gt;
    
    </summary>
    
    
      <category term="线段树" scheme="http://xffyjq.github.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ2555 Substring</title>
    <link href="http://xffyjq.github.com/2017/05/15/BZOJ2555/"/>
    <id>http://xffyjq.github.com/2017/05/15/BZOJ2555/</id>
    <published>2017-05-15T10:45:20.000Z</published>
    <updated>2017-05-15T11:36:22.336Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-一个字符串，两种操作，强制在线"><a href="#emsp-emsp-题意-一个字符串，两种操作，强制在线" class="headerlink" title="&emsp;&emsp;题意:一个字符串，两种操作，强制在线:"></a>&emsp;&emsp;题意:一个字符串，两种操作，强制在线:</h3><h3 id="emsp-emsp-1、在当前字符串后接上一个字符串"><a href="#emsp-emsp-1、在当前字符串后接上一个字符串" class="headerlink" title="&emsp;&emsp;1、在当前字符串后接上一个字符串"></a>&emsp;&emsp;1、在当前字符串后接上一个字符串</h3><h3 id="emsp-emsp-2、查询某一串在当前字符串的出现次数"><a href="#emsp-emsp-2、查询某一串在当前字符串的出现次数" class="headerlink" title="&emsp;&emsp;2、查询某一串在当前字符串的出现次数"></a>&emsp;&emsp;2、查询某一串在当前字符串的出现次数</h3><a id="more"></a>
<p>&emsp;&emsp;维护每一个子串的出现次数，很容易想到SAM维护right集合大小。在SAM上运行这个串，在next边形成的树结构中，到达节点为根的子树的节点个数就是答案。<br>&emsp;&emsp;暴力做法自然就是每次新加入一个字符，沿着next边向上更新节点信息。鉴于这是一个树结构，我们考虑用动态树来加速。<br>&emsp;&emsp;但是好像要维护子树大小?虽然这样可做，但是有没有更简洁的方法?我们注意到这道题是没有换根操作的，树本身的形态不会改变，于是我们可以类似与暴力，将子树大小当做信息记在节点上。每次连next边的时候cut、link一下改变树的形态，暴力更新信息变成打tag就好。由于节点信息是独立的，所以连pushup都不要。注意每次在复制、输出节点信息时别忘了relax一波。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">    <span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">1500010</span>, SIGMA = <span class="number">26</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> q, mask, ans;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></div><div class="line">&#123;</div><div class="line">    node *p, *c[<span class="number">2</span>];</div><div class="line">    <span class="keyword">bool</span> rev;</div><div class="line">    <span class="keyword">int</span> val, add;</div><div class="line"> </div><div class="line">    node(): p(<span class="number">0</span>), rev(<span class="number">0</span>), val(<span class="number">0</span>), add(<span class="number">0</span>) &#123; c[<span class="number">0</span>] = c[<span class="number">1</span>] = <span class="number">0</span>; &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setc</span><span class="params">(node* o, <span class="keyword">bool</span> b)</span> </span>&#123; c[b] = o; <span class="keyword">if</span>(o) o-&gt;p = <span class="keyword">this</span>; &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> !p || p-&gt;c[<span class="number">0</span>] != <span class="keyword">this</span> &amp;&amp; p-&gt;c[<span class="number">1</span>] != <span class="keyword">this</span>; &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">getpos</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> p-&gt;c[<span class="number">1</span>] == <span class="keyword">this</span>; &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updrev</span><span class="params">()</span> </span>&#123; rev ^= <span class="number">1</span>; &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(rev)</div><div class="line">        &#123;</div><div class="line">            rep(i, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">if</span>(c[i]) c[i]-&gt;updrev();</div><div class="line">            swap(c[<span class="number">0</span>], c[<span class="number">1</span>]); rev ^= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(add)</div><div class="line">        &#123;</div><div class="line">            rep(i, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">if</span>(c[i])</div><div class="line">            &#123;</div><div class="line">                c[i]-&gt;val += add;</div><div class="line">                c[i]-&gt;add += add;</div><div class="line">            &#125;</div><div class="line">            add = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rot</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        node* f = p; <span class="keyword">bool</span> b = getpos();</div><div class="line">        <span class="keyword">if</span>(f-&gt;isroot()) p = f-&gt;p;</div><div class="line">        <span class="keyword">else</span> f-&gt;p-&gt;setc(<span class="keyword">this</span>, f-&gt;getpos());</div><div class="line">        f-&gt;setc(c[!b], b); setc(f, !b);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">relax</span><span class="params">()</span> </span>&#123; <span class="keyword">if</span>(!isroot()) p-&gt;relax(); pushdown(); &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(relax(); !isroot(); rot())</div><div class="line">            <span class="keyword">if</span>(!p-&gt;isroot()) (p-&gt;getpos() == getpos() ? p : <span class="keyword">this</span>)-&gt;rot();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(node *u = <span class="keyword">this</span>, *v = <span class="number">0</span>; u; v = u, u = u-&gt;p)</div><div class="line">            u-&gt;splay(), u-&gt;setc(v, <span class="number">1</span>);</div><div class="line">        splay();</div><div class="line">    &#125;</div><div class="line">&#125;nd[SIZE];</div><div class="line"> </div><div class="line"><span class="keyword">namespace</span> LCT</div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">    &#123;</div><div class="line">        node* u = nd + x;</div><div class="line">        u-&gt;access(); u-&gt;c[<span class="number">0</span>] = u-&gt;c[<span class="number">0</span>]-&gt;p = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        node *u = nd + x, *v = nd + y;</div><div class="line">        u-&gt;p = v;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">    &#123;</div><div class="line">        node* u = nd + x;</div><div class="line">        u-&gt;access();</div><div class="line">        ++u-&gt;val; ++u-&gt;add;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> LCT;</div><div class="line"> </div><div class="line"><span class="keyword">namespace</span> SAM</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ch[SIZE][SIGMA], next[SIZE], Max[SIZE];</div><div class="line">    <span class="keyword">int</span> cur, last;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; cur = last = <span class="number">1</span>; &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">New</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; Max[++cur] = x; <span class="keyword">return</span> cur; &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u = New(Max[last] + <span class="number">1</span>), v = last;</div><div class="line">        <span class="keyword">for</span>(; v &amp;&amp; !ch[v][c]; v = next[v]) ch[v][c] = u;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(!v)</div><div class="line">        &#123;</div><div class="line">            next[u] = <span class="number">1</span>;</div><div class="line">            link(u, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> h = ch[v][c];</div><div class="line">            <span class="keyword">if</span>(Max[h] == Max[v] + <span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                next[u] = h;</div><div class="line">                link(u, h);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> o = New(Max[v] + <span class="number">1</span>);</div><div class="line">                <span class="built_in">memcpy</span>(ch[o], ch[h], <span class="keyword">sizeof</span> ch[h]);</div><div class="line">                next[o] = next[h];</div><div class="line">                link(o, next[h]);</div><div class="line">                next[h] = next[u] = o;</div><div class="line">                cut(h); link(h, o);</div><div class="line">                link(u, o);</div><div class="line">                (nd + h)-&gt;relax();</div><div class="line">                (nd + o)-&gt;val = (nd + h)-&gt;val;</div><div class="line">                <span class="keyword">for</span>(; v &amp;&amp; ch[v][c] == h; v = next[v]) ch[v][c] = o;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        last = u;</div><div class="line">        update(u);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span>* s)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> h = <span class="number">1</span>;</div><div class="line">        rep(i, <span class="number">0</span>, <span class="built_in">strlen</span>(s) - <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!ch[h][s[i] - <span class="string">'A'</span>]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            h = ch[h][s[i] - <span class="string">'A'</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (nd + h)-&gt;relax(), (nd + h)-&gt;val;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SAM;</div><div class="line"> </div><div class="line"><span class="keyword">char</span> op[<span class="number">10</span>], s[SIZE &lt;&lt; <span class="number">1</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> base)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</div><div class="line">    rep(i, <span class="number">0</span>, len - <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        base = (base * <span class="number">131</span> + i) % len;</div><div class="line">        swap(s[i], s[base]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    init();</div><div class="line">    read(q); <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">    rep(i, <span class="number">0</span>, <span class="built_in">strlen</span>(s) - <span class="number">1</span>) extend(s[i] - <span class="string">'A'</span>);</div><div class="line">    <span class="keyword">while</span>(q--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, op, s);</div><div class="line">        decode(s, mask);</div><div class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'A'</span>) rep(i, <span class="number">0</span>, <span class="built_in">strlen</span>(s) - <span class="number">1</span>) extend(s[i] - <span class="string">'A'</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            ans = query(s);</div><div class="line">            mask ^= ans; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-一个字符串，两种操作，强制在线&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-一个字符串，两种操作，强制在线&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:一个字符串，两种操作，强制在线:&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:一个字符串，两种操作，强制在线:&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-1、在当前字符串后接上一个字符串&quot;&gt;&lt;a href=&quot;#emsp-emsp-1、在当前字符串后接上一个字符串&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;1、在当前字符串后接上一个字符串&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;1、在当前字符串后接上一个字符串&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-2、查询某一串在当前字符串的出现次数&quot;&gt;&lt;a href=&quot;#emsp-emsp-2、查询某一串在当前字符串的出现次数&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;2、查询某一串在当前字符串的出现次数&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;2、查询某一串在当前字符串的出现次数&lt;/h3&gt;
    
    </summary>
    
    
      <category term="SAM" scheme="http://xffyjq.github.com/tags/SAM/"/>
    
      <category term="LCT" scheme="http://xffyjq.github.com/tags/LCT/"/>
    
  </entry>
  
  <entry>
    <title>UOJ35 后缀排序</title>
    <link href="http://xffyjq.github.com/2017/05/15/UOJ35/"/>
    <id>http://xffyjq.github.com/2017/05/15/UOJ35/</id>
    <published>2017-05-15T05:22:11.000Z</published>
    <updated>2017-05-15T10:54:04.003Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-造出一个字符串的后缀数组，将sa数组与height数组输出。"><a href="#emsp-emsp-题意-造出一个字符串的后缀数组，将sa数组与height数组输出。" class="headerlink" title="&emsp;&emsp;题意:造出一个字符串的后缀数组，将sa数组与height数组输出。"></a>&emsp;&emsp;题意:造出一个字符串的后缀数组，将sa数组与height数组输出。</h3><a id="more"></a>
<p>&emsp;&emsp;这道题当然是一道后缀数组的模板。但是为了更高的效率，我们不用倍增法，而是使用SAM造出后缀树，再用后缀树造出后缀数组。<br>&emsp;&emsp;关于后缀树的资料可以去网上找，在此不赘述。我们唯一需要知道的是，后缀树每一条边对应的字符串首字符都是互不相同的，仅仅依靠首字符就可以区别从一个节点伸出的所有边。<br>&emsp;&emsp;首先，由于原串的SAM的next链接就是反串的后缀树，于是我们将原串的反串插入SAM，这样造出的后缀树就是原串的后缀树了。但是这样造出的仅仅是只有点和边的空后缀树，我们需要在上面添加信息。<br>&emsp;&emsp;我们对于每个节点记录一个pos——代表其中最长串(反串前缀)在原串后缀中对应的首字符位置，方便以后造sa数组。我们还需要维护一个right数组，这个数组并不代表right集合。对于每个插入字符时为接纳新子串产生的节点(而非分裂出来的节点)，其right值=自身max值。而对于分裂出来的节点，其right值=该轮新产生节点的max。<br>&emsp;&emsp;在造后缀树的时候，节点本身的right值-其next节点的max值=后缀树中next节点到该节点边的首字符在反串中的位置。更进一步地，将反串起始位置到该位置的子串翻转，就是这条边对应的字符串。其实这一点不难理解，结合一下定义就很容易明白，这里不多说了。<br>&emsp;&emsp;将反串中的位置对应到原串上，找到那个字符作为边的首字符，我们就可以区分每条边，也就可以按照字典序遍历后缀树，依照每个节点的pos造出后缀数组了。<br>&emsp;&emsp;上代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(i, u) for(int i = head[u], v = E[i].v; i; i = E[i].nxt, v = E[i].v)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">	<span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>, SIZE = maxn &lt;&lt; <span class="number">2</span>, SIGMA = <span class="number">26</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sa[maxn], sa_cur, rnk[maxn], height[maxn];</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> SAM</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ch[SIZE][SIGMA], next[SIZE], Max[SIZE], pos[SIZE], right[SIZE];</div><div class="line">    <span class="keyword">int</span> cur, last;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; cur = last = <span class="number">1</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">New</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; Max[++cur] = x; <span class="keyword">return</span> cur; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> p)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u = New(Max[last] + <span class="number">1</span>), v = last;</div><div class="line">        pos[u] = p; right[u] = Max[u];</div><div class="line">        <span class="keyword">for</span>(; v &amp;&amp; !ch[v][c]; v = next[v]) ch[v][c] = u;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!v) next[u] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> h = ch[v][c];</div><div class="line">            <span class="keyword">if</span>(Max[h] == Max[v] + <span class="number">1</span>) next[u] = h;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> o = New(Max[v] + <span class="number">1</span>);</div><div class="line">                right[o] = right[u];</div><div class="line">                <span class="built_in">memcpy</span>(ch[o], ch[h], <span class="keyword">sizeof</span> ch[h]);</div><div class="line">                next[o] = next[h];</div><div class="line">                next[h] = next[u] = o;</div><div class="line">                <span class="keyword">for</span>(; v &amp;&amp; ch[v][c] == h; v = next[v]) ch[v][c] = o;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        last = u;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">namespace</span> ST</div><div class="line">    &#123;</div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> u, v, w;</div><div class="line">            <span class="keyword">int</span> nxt;</div><div class="line">        &#125;E[SIZE];</div><div class="line"></div><div class="line">        <span class="keyword">int</span> head[SIZE], en;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ae</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; E[i].nxt = head[E[i].u]; head[E[i].u] = i; &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">build_sa</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(pos[u]) sa[++sa_cur] = pos[u];</div><div class="line">            erep(i, u) build_sa(v);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> sum[SIGMA], t[SIZE];</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">build_ST</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            rep(i, <span class="number">2</span>, cur)</div><div class="line">            &#123;</div><div class="line">                E[++en] = (edge) &#123; next[i], i, s[n - (right[i] - Max[next[i]]) + <span class="number">1</span>] - <span class="string">'a'</span>, <span class="number">0</span> &#125;;</div><div class="line">                ++sum[E[en].w];</div><div class="line">            &#125;</div><div class="line">            rep(i, <span class="number">1</span>, SIGMA - <span class="number">1</span>) sum[i] += sum[i - <span class="number">1</span>];</div><div class="line">            rep(i, <span class="number">1</span>, en) t[sum[E[i].w]--] = i;</div><div class="line">            drep(i, en, <span class="number">1</span>) ae(t[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> ST;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SAM;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_height</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">    rep(i, <span class="number">1</span>, n) <span class="keyword">if</span>(rnk[i] != n)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(s[i + j] == s[sa[rnk[i] + <span class="number">1</span>] + j]) ++j;</div><div class="line">        height[rnk[i]] = j; <span class="keyword">if</span>(j) --j;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    init();</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>); n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</div><div class="line">    drep(i, n, <span class="number">1</span>) extend(s[i] - <span class="string">'a'</span>, i);</div><div class="line"></div><div class="line">    build_ST();</div><div class="line"></div><div class="line">    build_sa(<span class="number">1</span>);</div><div class="line">    rep(i, <span class="number">1</span>, n) rnk[sa[i]] = i;</div><div class="line">    build_height();</div><div class="line"></div><div class="line">    rep(i, <span class="number">1</span>, n) <span class="built_in">printf</span>(<span class="string">"%d "</span>, sa[i]); <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    rep(i, <span class="number">1</span>, n - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d "</span>, height[i]); <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-造出一个字符串的后缀数组，将sa数组与height数组输出。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-造出一个字符串的后缀数组，将sa数组与height数组输出。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:造出一个字符串的后缀数组，将sa数组与height数组输出。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:造出一个字符串的后缀数组，将sa数组与height数组输出。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="SAM" scheme="http://xffyjq.github.com/tags/SAM/"/>
    
      <category term="后缀树" scheme="http://xffyjq.github.com/tags/%E5%90%8E%E7%BC%80%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>UOJ207 共价大爷游长沙</title>
    <link href="http://xffyjq.github.com/2017/05/14/UOJ207/"/>
    <id>http://xffyjq.github.com/2017/05/14/UOJ207/</id>
    <published>2017-05-14T11:50:16.000Z</published>
    <updated>2017-05-14T13:01:12.427Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-一棵树，四个操作"><a href="#emsp-emsp-题意-一棵树，四个操作" class="headerlink" title="&emsp;&emsp;题意: 一棵树，四个操作:"></a>&emsp;&emsp;题意: 一棵树，四个操作:</h3><h3 id="emsp-emsp-1、删边-加边"><a href="#emsp-emsp-1、删边-加边" class="headerlink" title="&emsp;&emsp;1、删边 + 加边"></a>&emsp;&emsp;1、删边 + 加边</h3><h3 id="emsp-emsp-2、加入点对-x-y"><a href="#emsp-emsp-2、加入点对-x-y" class="headerlink" title="&emsp;&emsp;2、加入点对(x, y)"></a>&emsp;&emsp;2、加入点对(x, y)</h3><h3 id="emsp-emsp-3、删除第x个加入的点对"><a href="#emsp-emsp-3、删除第x个加入的点对" class="headerlink" title="&emsp;&emsp;3、删除第x个加入的点对"></a>&emsp;&emsp;3、删除第x个加入的点对</h3><h3 id="emsp-emsp-4、询问当前所有点对之间的路径是否均经过边-x-y"><a href="#emsp-emsp-4、询问当前所有点对之间的路径是否均经过边-x-y" class="headerlink" title="&emsp;&emsp;4、询问当前所有点对之间的路径是否均经过边(x, y)"></a>&emsp;&emsp;4、询问当前所有点对之间的路径是否均经过边(x, y)</h3><a id="more"></a>
<p>&emsp;&emsp;这道题是动态树维护虚边信息的好题。<br>&emsp;&emsp;考察操作4，所有点对路径均经过边(x, y)，就代表着将x作为树根后，所有点对均有且只有一个点在y的子树中。(包括y)<br>&emsp;&emsp;我们将每一条路径随机一个很大的权值，并异或到对应点对的两个点上。则x作为根并access(y)后，y的实子树中只有点x。那么所有路径有且只有一个点在y子树中-&gt;y及其虚子树异或和=所有路径异或和。当然以上成立的条件是随机出的权值没有重复，异或和也不能有重复的。在int范围内随机就可以避免这个问题了。<br>&emsp;&emsp;维护一个所有路径异或和now和每个节点的信息，加入与删除路径点对时记得在总异或和与路径两端点权值中加上(清掉)该路径权值，异或一下就好。<br>&emsp;&emsp;这道题需要维护子树和，由于是第一次练习，为了写得更模板化，我多使用了几个变量:<br>&emsp;&emsp;val –&gt; 节点权值<br>&emsp;&emsp;sum_chain –&gt; 节点实子树权值和(包括节点本身)<br>&emsp;&emsp;val_tree –&gt; 节点虚子树权值和(不包括节点本身)<br>&emsp;&emsp;sum_tree –&gt; 节点及其实子树所有节点的虚子树权值和(不包括实子树节点及本身)<br>&emsp;&emsp;以上所有权值和在本题中均指异或和。<br>&emsp;&emsp;前两项是平时维护的东西，后面多出来的两项是额外维护的东西。<br>&emsp;&emsp;这些东西可以干很多事情,比如: sum_tree + sum_chain = 该节点为根的子树的和<br>&emsp;&emsp;又比如，将加法换成异或，则val ^ val_tree 就是我们要找的节点及虚子树的异或和。<br>&emsp;&emsp;在题目中，有些东西可以合在一起维护，具体问题具体分析。<br>&emsp;&emsp;维护虚边信息的动态树在写法上面有改变，尤其是node中的access操作。要留心。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar getchar_unlocked</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">	<span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>, maxm = <span class="number">300010</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></div><div class="line">&#123;</div><div class="line">	node *p, *c[<span class="number">2</span>];</div><div class="line"></div><div class="line">	<span class="keyword">bool</span> rev;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> val_tree, val;</div><div class="line">	<span class="keyword">int</span> sum_tree, sum_chain;</div><div class="line"></div><div class="line">	node(): p(<span class="number">0</span>), rev(<span class="number">0</span>), val_tree(<span class="number">0</span>), val(<span class="number">0</span>), sum_tree(<span class="number">0</span>), sum_chain(<span class="number">0</span>) &#123; ms(c, <span class="number">0</span>); &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setc</span><span class="params">(node* o, <span class="keyword">bool</span> b)</span> </span>&#123; c[b] = o; <span class="keyword">if</span>(o) o-&gt;p = <span class="keyword">this</span>; &#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> !p || p-&gt;c[<span class="number">0</span>] != <span class="keyword">this</span> &amp;&amp; p-&gt;c[<span class="number">1</span>] != <span class="keyword">this</span>; &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">getpos</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> p-&gt;c[<span class="number">1</span>] == <span class="keyword">this</span>; &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">updrev</span><span class="params">()</span> </span>&#123; rev ^= <span class="number">1</span>; &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		sum_tree = val_tree;</div><div class="line">		sum_chain = val;</div><div class="line">		rep(i, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">if</span>(c[i])</div><div class="line">		&#123;</div><div class="line">			sum_chain ^= c[i]-&gt;sum_chain;</div><div class="line">			sum_tree ^= c[i]-&gt;sum_tree;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(rev)</div><div class="line">		&#123;</div><div class="line">			rep(i, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">if</span>(c[i]) c[i]-&gt;updrev();</div><div class="line">			swap(c[<span class="number">0</span>], c[<span class="number">1</span>]); rev = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rot</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		node *f = p; <span class="keyword">bool</span> b = getpos();</div><div class="line">		<span class="keyword">if</span>(f-&gt;isroot()) p = f-&gt;p;</div><div class="line">		<span class="keyword">else</span> f-&gt;p-&gt;setc(<span class="keyword">this</span>, f-&gt;getpos());</div><div class="line">		f-&gt;setc(c[!b], b); setc(f, !b);</div><div class="line">		f-&gt;pushup();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">relax</span><span class="params">()</span> </span>&#123; <span class="keyword">if</span>(!isroot()) p-&gt;relax(); pushdown(); &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(relax(); !isroot(); rot())</div><div class="line">			<span class="keyword">if</span>(!p-&gt;isroot()) (p-&gt;getpos() == getpos() ? p : <span class="keyword">this</span>)-&gt;rot();</div><div class="line">		pushup();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(node *u = <span class="keyword">this</span>, *v = <span class="number">0</span>; u; v = u, u = u-&gt;p)</div><div class="line">		&#123;</div><div class="line">			u-&gt;splay();</div><div class="line">			<span class="keyword">if</span>(u-&gt;c[<span class="number">1</span>]) u-&gt;val_tree ^= u-&gt;c[<span class="number">1</span>]-&gt;sum_tree ^ u-&gt;c[<span class="number">1</span>]-&gt;sum_chain;</div><div class="line">			<span class="keyword">if</span>(v) u-&gt;val_tree ^= v-&gt;sum_tree ^ v-&gt;sum_chain;</div><div class="line">			u-&gt;setc(v, <span class="number">1</span>), u-&gt;pushup();</div><div class="line">		&#125;</div><div class="line">		splay();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">beroot</span><span class="params">()</span> </span>&#123; access(); updrev(); &#125;</div><div class="line">&#125;nd[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, now;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[maxm], cnt;</div><div class="line"></div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; path[maxm];</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> LCT</div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">	&#123;</div><div class="line">		node *u = nd + x, *v = nd + y;</div><div class="line">		u-&gt;beroot(); v-&gt;access();</div><div class="line">		u-&gt;p = v; v-&gt;val_tree ^= u-&gt;sum_tree ^ u-&gt;sum_chain;</div><div class="line">		v-&gt;pushup();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">	&#123;</div><div class="line">		node *u = nd + x, *v = nd + y;</div><div class="line">		u-&gt;beroot(); v-&gt;access();</div><div class="line">		u-&gt;p = v-&gt;c[<span class="number">0</span>] = <span class="literal">NULL</span>;</div><div class="line">		v-&gt;pushup();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">	&#123;</div><div class="line">		node *u = nd + x;</div><div class="line">		u-&gt;access(); u-&gt;val ^= y; u-&gt;pushup();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">	&#123;</div><div class="line">		node *u = nd + x, *v = nd + y;</div><div class="line">		u-&gt;beroot(); v-&gt;access();</div><div class="line">		<span class="keyword">return</span> (v-&gt;val ^ v-&gt;val_tree) == now;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> LCT;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">	freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	srand(time(<span class="number">0</span>)); <span class="built_in">scanf</span>(<span class="string">"%*d"</span>);</div><div class="line">	read(n); read(m); <span class="keyword">int</span> x, y;</div><div class="line">	rep(i, <span class="number">1</span>, n - <span class="number">1</span>) read(x), read(y), link(x, y);</div><div class="line">	<span class="keyword">while</span>(m--)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> op; read(op);</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(op == <span class="number">1</span>)</div><div class="line">		&#123;</div><div class="line">			read(x); read(y); cut(x, y);</div><div class="line">			read(x); read(y); link(x, y);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(op == <span class="number">2</span>)</div><div class="line">		&#123;</div><div class="line">			read(x); read(y);</div><div class="line">			<span class="keyword">int</span> Hash = rand();</div><div class="line">			now ^= Hash;</div><div class="line">			change(x, Hash); change(y, Hash);</div><div class="line">			path[++cnt] = mp(x, y);</div><div class="line">			a[cnt] = Hash;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(op == <span class="number">3</span>)</div><div class="line">		&#123;</div><div class="line">			read(x);</div><div class="line">			change(path[x].first, a[x]);</div><div class="line">			change(path[x].second, a[x]);</div><div class="line">			now ^= a[x];</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(op == <span class="number">4</span>) read(x), read(y), <span class="built_in">puts</span>(query(x, y) ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-一棵树，四个操作&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-一棵树，四个操作&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意: 一棵树，四个操作:&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意: 一棵树，四个操作:&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-1、删边-加边&quot;&gt;&lt;a href=&quot;#emsp-emsp-1、删边-加边&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;1、删边 + 加边&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;1、删边 + 加边&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-2、加入点对-x-y&quot;&gt;&lt;a href=&quot;#emsp-emsp-2、加入点对-x-y&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;2、加入点对(x, y)&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;2、加入点对(x, y)&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-3、删除第x个加入的点对&quot;&gt;&lt;a href=&quot;#emsp-emsp-3、删除第x个加入的点对&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;3、删除第x个加入的点对&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;3、删除第x个加入的点对&lt;/h3&gt;&lt;h3 id=&quot;emsp-emsp-4、询问当前所有点对之间的路径是否均经过边-x-y&quot;&gt;&lt;a href=&quot;#emsp-emsp-4、询问当前所有点对之间的路径是否均经过边-x-y&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;4、询问当前所有点对之间的路径是否均经过边(x, y)&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;4、询问当前所有点对之间的路径是否均经过边(x, y)&lt;/h3&gt;
    
    </summary>
    
    
      <category term="LCT" scheme="http://xffyjq.github.com/tags/LCT/"/>
    
  </entry>
  
  <entry>
    <title>SPOJ1812 LCS2</title>
    <link href="http://xffyjq.github.com/2017/05/09/SPOJ1812/"/>
    <id>http://xffyjq.github.com/2017/05/09/SPOJ1812/</id>
    <published>2017-05-09T04:38:00.000Z</published>
    <updated>2017-05-11T05:07:57.543Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-给你n个串，求它们的LCS。"><a href="#emsp-emsp-题意-给你n个串，求它们的LCS。" class="headerlink" title="&emsp;&emsp;题意:给你n个串，求它们的LCS。"></a>&emsp;&emsp;题意:给你n个串，求它们的LCS。</h3><a id="more"></a>
<p>&emsp;&emsp;后缀系列的经典问题。<br>&emsp;&emsp;这道题用后缀数组+二分当然可以做。将n个串连接成一个长串，只需要每次二分LCP，看是否有n个后缀LCP大于该值，又正好分属n个串就好。<br>&emsp;&emsp;但这个复杂度显然是$O(n \log n)$的，在这里过不了。我们考虑用SAM解决这个问题。<br>&emsp;&emsp;首先我们从两个串的情况入手: (SPOJ LCS正是两串LCS的题目)<br>&emsp;&emsp;将第一个串$s_1$的SAM构建出来，然后在上面运行第二个串$s_2$。记录一个到当前位的LCS长度，记作len。如果当前到了第i位，节点u有$s_2[i]$的转移边,则走转移边，len长度+1。如果没有该转移边，由于next边上节点所包含的串均为当前点u包含串的后缀，所以沿着next边向前走，走到第一个有该转移边的节点v。根据节点的定义，一个节点有转移边，则其中所有串均可以通过这条转移边到另一个合法子串。于是我们只需要取最长的一个。即走过v的转移边，将len重新赋值为$Max[v] + 1$。如果走到根都没有转移边的话，就从根重新开始，并将len赋值为0。每走一步更新答案即可。<br>&emsp;&emsp;如何处理多个串的情况?我们对于每个节点多记录两个值，一个代表所有串运行到当前点时的LCS值，一个代表当前串运行到当前点时的LCS，即上面的len。注:一个串可能被运行到一个点多次，记录最大值即可。要注意的是，在之前的双串LCS中，我们忽略了一个东西:当我们运行到一个点，即代表这个点包含的串在原串出现时，该节点通过next边连接的所有点，即该串的所有后缀也都在原串出现了，所以之前的点的len值也需要更新。在两个串的情况里，运行到一个点时，其代表串的后缀显然不会更优，并不用在意这一点。但是在多串中，我们需要考虑其他串的影响，就要基数排序排出节点间的拓扑序，按照其逆序更新所有节点的真正len值。运行完一个串后，将每个节点的所有串运行到当前点的LCS值对当前len取min即可。(如果没运行到则len=0，说明该节点代表的串不会参与答案更新)<br>&emsp;&emsp;最后运行完所有串后，所有节点LCS的max值就是答案了。<br>&emsp;&emsp;这道题卡时间，多清空几个数组都会T。不过错误算法(不基数排序)可以水过去。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">	<span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>, SIZE = maxn &lt;&lt; <span class="number">2</span>, SIGMA = <span class="number">26</span>;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> SAM</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ch[SIZE][SIGMA], next[SIZE], Max[SIZE];</div><div class="line">    <span class="keyword">int</span> LCS[SIZE], LEN[SIZE];</div><div class="line">    <span class="keyword">int</span> cur, last;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; cur = last = <span class="number">1</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">New</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; Max[++cur] = x; <span class="keyword">return</span> cur; &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u = New(Max[last] + <span class="number">1</span>), v = last;</div><div class="line">        <span class="keyword">for</span>(; v &amp;&amp; !ch[v][c]; v = next[v]) ch[v][c] = u;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!v) next[u] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> h = ch[v][c];</div><div class="line">            <span class="keyword">if</span>(Max[h] == Max[v] + <span class="number">1</span>) next[u] = h;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> o = New(Max[v] + <span class="number">1</span>);</div><div class="line">                <span class="built_in">memcpy</span>(ch[o], ch[h], <span class="keyword">sizeof</span> ch[h]);</div><div class="line">                next[o] = next[h];</div><div class="line">                next[h] = next[u] = o;</div><div class="line">                <span class="keyword">for</span>(; v &amp;&amp; ch[v][c] == h; v = next[v]) ch[v][c] = o;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        last = u;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SAM;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, ans;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum[maxn], t[SIZE];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    init();</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s); n = <span class="built_in">strlen</span>(s);</div><div class="line">    rep(i, <span class="number">0</span>, n - <span class="number">1</span>) extend(s[i] - <span class="string">'a'</span>);</div><div class="line">    rep(i, <span class="number">1</span>, cur) LCS[i] = Max[i];</div><div class="line"></div><div class="line">    rep(i, <span class="number">1</span>, cur) ++sum[Max[i]];</div><div class="line">    rep(i, <span class="number">1</span>, n) sum[i] += sum[i - <span class="number">1</span>];</div><div class="line">    drep(i, cur, <span class="number">1</span>) t[sum[Max[i]]--] = i;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> h = <span class="number">1</span>, len = <span class="number">0</span>;</div><div class="line">        ms(LEN, <span class="number">0</span>);</div><div class="line">        rep(i, <span class="number">0</span>, <span class="built_in">strlen</span>(s) - <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(ch[h][s[i] - <span class="string">'a'</span>]) ++len, h = ch[h][s[i] - <span class="string">'a'</span>];</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(h &amp;&amp; !ch[h][s[i] - <span class="string">'a'</span>]) h = next[h];</div><div class="line">                <span class="keyword">if</span>(!h) h = <span class="number">1</span>, len = <span class="number">0</span>;</div><div class="line">                <span class="keyword">else</span> len = Max[h] + <span class="number">1</span>, h = ch[h][s[i] - <span class="string">'a'</span>];</div><div class="line">            &#125;</div><div class="line">            chkmax(LEN[h], len);</div><div class="line">        &#125;</div><div class="line">        drep(i, cur, <span class="number">1</span>) chkmax(LEN[next[t[i]]], LEN[t[i]]);</div><div class="line">        rep(i, <span class="number">1</span>, cur) chkmin(LCS[i], LEN[i]);</div><div class="line">    &#125;</div><div class="line">    rep(i, <span class="number">1</span>, cur) chkmax(ans, LCS[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-给你n个串，求它们的LCS。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-给你n个串，求它们的LCS。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:给你n个串，求它们的LCS。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:给你n个串，求它们的LCS。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="SAM" scheme="http://xffyjq.github.com/tags/SAM/"/>
    
  </entry>
  
  <entry>
    <title>POJ1509 Glass Beads</title>
    <link href="http://xffyjq.github.com/2017/05/07/POJ1509/"/>
    <id>http://xffyjq.github.com/2017/05/07/POJ1509/</id>
    <published>2017-05-07T13:16:39.000Z</published>
    <updated>2017-05-07T13:36:12.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-给你一个循环串-首尾相接-，求出使其字典序最小的起始位置。"><a href="#emsp-emsp-题意-给你一个循环串-首尾相接-，求出使其字典序最小的起始位置。" class="headerlink" title="&emsp;&emsp;题意:给你一个循环串(首尾相接)，求出使其字典序最小的起始位置。"></a>&emsp;&emsp;题意:给你一个循环串(首尾相接)，求出使其字典序最小的起始位置。</h3><a id="more"></a>
<p>&emsp;&emsp;后缀自动机(SAM)的第一道题。<br>&emsp;&emsp;看后缀自动机有关的东西看了很久，差不多明白了一些。<br>&emsp;&emsp;这道题其实本来有更加简单的暴力做法，不过就全当练习SAM了。<br>&emsp;&emsp;首先将原串S扩展至两倍SS，这是循环串的惯用套路。<br>&emsp;&emsp;接着将SAM增量构造出来，由于SAM包含了原串的所有子串，所以在SAM上，每次沿着字典序最小的边走，走$|S|$次，到达节点u一定包含要找的字典序最小的串。<br>&emsp;&emsp;那么如何将其提取出来?也就是，如何在u表示的众多串中，找到那个串，并且知道其在原串中的起始位置呢?<br>&emsp;&emsp;其实并不用找到那个串。注意到u表示的最长的串一定是从原串的开头到我们要找的串的末尾的。而根据SAM的性质，我们要找的串一定是最长串的后缀，且长度为n。于是$Max[u]-n+1$便是答案了。<br>&emsp;&emsp;要注意一点:SAM中是否有某个节点是用其对应下标是否为0来判断的。所以SAM的start节点不能设为0。为了方便，设为1即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>, SIZE = (maxn &lt;&lt; <span class="number">3</span>), SIGMA = <span class="number">26</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">	<span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> SAM</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> cur, last;</div><div class="line">    <span class="keyword">int</span> ch[SIZE][SIGMA], next[SIZE], Max[SIZE];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">New</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; Max[++cur] = x; <span class="keyword">return</span> cur; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; ms(next, <span class="number">0</span>); ms(Max, <span class="number">0</span>); ms(ch, <span class="number">0</span>); cur = last = <span class="number">1</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u = New(Max[last] + <span class="number">1</span>), v = last;</div><div class="line">        <span class="keyword">for</span>(; v &amp;&amp; !ch[v][c]; v = next[v]) ch[v][c] = u;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!v) next[u] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> h = ch[v][c];</div><div class="line">            <span class="keyword">if</span>(Max[h] == Max[v] + <span class="number">1</span>) next[u] = h;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> o = New(Max[v] + <span class="number">1</span>);</div><div class="line">                <span class="built_in">memcpy</span>(ch[o], ch[h], <span class="keyword">sizeof</span> ch[h]);</div><div class="line">                next[o] = next[h];</div><div class="line">                next[h] = next[u] = o;</div><div class="line">                <span class="keyword">for</span>(; v &amp;&amp; ch[v][c] == h; v = next[v]) ch[v][c] = o;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        last = u;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SAM;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="keyword">int</span> _; read(_);</div><div class="line">    <span class="keyword">while</span>(_--)</div><div class="line">    &#123;</div><div class="line">        init();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s); n = <span class="built_in">strlen</span>(s);</div><div class="line">        rep(i, <span class="number">0</span>, n - <span class="number">1</span>) extend(s[i] - <span class="string">'a'</span>);</div><div class="line">        rep(i, <span class="number">0</span>, n - <span class="number">1</span>) extend(s[i] - <span class="string">'a'</span>);</div><div class="line">        <span class="keyword">int</span> h = <span class="number">1</span>;</div><div class="line">        rep(i, <span class="number">1</span>, n) rep(c, <span class="number">0</span>, <span class="number">25</span>)</div><div class="line">            <span class="keyword">if</span>(ch[h][c]) &#123; h = ch[h][c]; <span class="keyword">break</span>; &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Max[h] - n + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-给你一个循环串-首尾相接-，求出使其字典序最小的起始位置。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-给你一个循环串-首尾相接-，求出使其字典序最小的起始位置。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:给你一个循环串(首尾相接)，求出使其字典序最小的起始位置。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:给你一个循环串(首尾相接)，求出使其字典序最小的起始位置。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="SAM" scheme="http://xffyjq.github.com/tags/SAM/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ4025 二分图</title>
    <link href="http://xffyjq.github.com/2017/05/04/BZOJ4025/"/>
    <id>http://xffyjq.github.com/2017/05/04/BZOJ4025/</id>
    <published>2017-05-04T11:51:03.000Z</published>
    <updated>2017-05-14T11:51:33.580Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。"><a href="#emsp-emsp-题意-给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。" class="headerlink" title="&emsp;&emsp;题意: 给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。"></a>&emsp;&emsp;题意: 给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。</h3><a id="more"></a>
<p>&emsp;&emsp;这道题可以说是LCT维护动态生成树的集大成题。其中加入了二分图模型，对于以后很多的题目都具有启示意义。<br>&emsp;&emsp;对于这道题，我们考虑维护以删除时间为关键字的最大生成树。对于整个图来说，就是一个最大生成森林。</p>
<p>&emsp;&emsp;在每一时刻，在生成森林中，对于每一条出现的边:<br>&emsp;&emsp;如果该边两端不联通，则加入该边。<br>&emsp;&emsp;如果该边两端联通，将该边连上后会出现一个环。<br>&emsp;&emsp;如果这个环是奇环，那么将该环中删除时间最早(权值最小)的边删除，并加入标记集合，表示该边存在时，图不为二分图。<br>&emsp;&emsp;具体实现的话，就是先将出现边与原路径中的最小边比较，如果比最小边要小，则直接判断是否为奇环加标记即可。<br>&emsp;&emsp;如果比最小边要大，那么就删除最小边，连接上该边，将最小边拿去判断。</p>
<p>&emsp;&emsp;对于每一条删除的边:<br>&emsp;&emsp;如果这条边在树上，直接cut。<br>&emsp;&emsp;如果这条边在删除集合里，直接去掉。</p>
<p>&emsp;&emsp;每一个时刻，当且仅当集合内没有元素时，图为二分图。</p>
<p>&emsp;&emsp;维护生成树中最小/大边，我采用的是维护指针的方法。指针减去初指针就为实际下标了。<br>&emsp;&emsp;判断是否为奇环，就维护LCT的size即可。注意边的size设为0。<br>&emsp;&emsp;注意这道题的联通性不能用普通并查集，因为有cut操作。我直接暴力判断的联通性。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) (int((x).size()))</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">	<span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>, maxm = <span class="number">200010</span>, INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></div><div class="line">&#123;</div><div class="line">    node *p, *c[<span class="number">2</span>], *Min;</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> rev, isdot;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> val, sz;</div><div class="line"></div><div class="line">    node(): p(<span class="number">0</span>), Min(<span class="keyword">this</span>), rev(<span class="number">0</span>), val(INF) &#123; c[<span class="number">0</span>] = c[<span class="number">1</span>] = <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setc</span><span class="params">(node* o, <span class="keyword">bool</span> b)</span> </span>&#123; c[b] = o; <span class="keyword">if</span>(o) o-&gt;p = <span class="keyword">this</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> !p || p-&gt;c[<span class="number">0</span>] != <span class="keyword">this</span> &amp;&amp; p-&gt;c[<span class="number">1</span>] != <span class="keyword">this</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">getpos</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> p-&gt;c[<span class="number">1</span>] == <span class="keyword">this</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updrev</span><span class="params">()</span> </span>&#123; rev ^= <span class="number">1</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        Min = <span class="keyword">this</span>;</div><div class="line">        rep(i, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">if</span>(c[i] &amp;&amp; c[i]-&gt;Min-&gt;val &lt; Min-&gt;val) Min = c[i]-&gt;Min;</div><div class="line">        sz = isdot;</div><div class="line">        rep(i, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">if</span>(c[i]) sz += c[i]-&gt;sz;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(rev)</div><div class="line">        &#123;</div><div class="line">            rep(i, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">if</span>(c[i]) c[i]-&gt;updrev();</div><div class="line">            swap(c[<span class="number">0</span>], c[<span class="number">1</span>]); rev = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rot</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        node* f = p; <span class="keyword">bool</span> b = getpos();</div><div class="line">        <span class="keyword">if</span>(f-&gt;isroot()) p = f-&gt;p;</div><div class="line">        <span class="keyword">else</span> f-&gt;p-&gt;setc(<span class="keyword">this</span>, f-&gt;getpos());</div><div class="line">        f-&gt;setc(c[!b], b); setc(f, !b);</div><div class="line">        f-&gt;pushup();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">relax</span><span class="params">()</span> </span>&#123; <span class="keyword">if</span>(!isroot()) p-&gt;relax(); pushdown(); &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(relax(); !isroot(); rot())</div><div class="line">            <span class="keyword">if</span>(!p-&gt;isroot()) (p-&gt;getpos() == getpos() ? p : <span class="keyword">this</span>)-&gt;rot();</div><div class="line">        pushup();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(node *u = <span class="keyword">this</span>, *v = <span class="number">0</span>; u; v = u, u = u-&gt;p)</div><div class="line">            u-&gt;splay(), u-&gt;setc(v, <span class="number">1</span>), u-&gt;pushup();</div><div class="line">        splay();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beroot</span><span class="params">()</span> </span>&#123; access(); updrev(); &#125;</div><div class="line">&#125;nd[maxn + maxm];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, t;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> LCT</div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        node *u = nd + x, *v = nd + y;</div><div class="line">        <span class="keyword">while</span>(u-&gt;p) u = u-&gt;p;</div><div class="line">        <span class="keyword">while</span>(v-&gt;p) v = v-&gt;p;</div><div class="line">        <span class="keyword">return</span> u == v;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        node *u = nd + x, *v = nd + y;</div><div class="line">        u-&gt;beroot(); u-&gt;p = v;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        node *u = nd + x, *v = nd + y;</div><div class="line">        u-&gt;beroot(); v-&gt;access();</div><div class="line">        u-&gt;p = v-&gt;c[<span class="number">0</span>] = <span class="literal">NULL</span>; v-&gt;pushup();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">node* <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        node *u = nd + x, *v = nd + y;</div><div class="line">        u-&gt;beroot(); v-&gt;access();</div><div class="line">        <span class="keyword">return</span> v-&gt;Min;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> LCT;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> u, v, w;</div><div class="line">&#125;E[maxm];</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Add[maxn], Del[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">bool</span> inTree[maxm], inSet[maxm];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">    freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    read(n); read(m); read(t); <span class="keyword">int</span> st, ed;</div><div class="line">    rep(i, <span class="number">1</span>, m)</div><div class="line">    &#123;</div><div class="line">        read(E[i].u), read(E[i].v), read(st), E[i].w = read(ed);</div><div class="line">        Add[st].pb(i); Del[ed].pb(i);</div><div class="line">    &#125;</div><div class="line">    rep(i, <span class="number">1</span>, n) (nd + i)-&gt;isdot = (nd + i)-&gt;sz = <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, m)</div><div class="line">    &#123;</div><div class="line">        (nd + n + i)-&gt;val = E[i].w;</div><div class="line">        (nd + n + i)-&gt;isdot = (nd + n + i)-&gt;sz = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    rep(k, <span class="number">0</span>, t - <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        rep(i, <span class="number">0</span>, SZ(Add[k]) - <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j = Add[k][i];</div><div class="line">            <span class="keyword">if</span>(E[j].u == E[j].v) &#123; inSet[j] = <span class="number">1</span>; ++cnt; <span class="keyword">continue</span>; &#125;</div><div class="line">            <span class="keyword">if</span>(!check(E[j].u, E[j].v))</div><div class="line">            &#123;</div><div class="line">                link(E[j].u, j + n);</div><div class="line">                link(E[j].v, j + n);</div><div class="line">                inTree[j] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                node* o = query(E[j].u, E[j].v);</div><div class="line">                <span class="keyword">int</span> h = o - nd - n;</div><div class="line">                <span class="keyword">if</span>(E[j].w &gt; o-&gt;val)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>((nd + E[j].v)-&gt;sz &amp; <span class="number">1</span>) inSet[h] = <span class="number">1</span>, ++cnt;</div><div class="line">                    cut(E[h].u, h + n);</div><div class="line">                    cut(E[h].v, h + n);</div><div class="line">                    link(E[j].u, j + n);</div><div class="line">                    link(E[j].v, j + n);</div><div class="line">                    inTree[h] = <span class="number">0</span>; inTree[j] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((nd + E[j].v)-&gt;sz &amp; <span class="number">1</span>) inSet[j] = <span class="number">1</span>, ++cnt;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        rep(i, <span class="number">0</span>, SZ(Del[k]) - <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j = Del[k][i];</div><div class="line">            <span class="keyword">if</span>(inTree[j]) inTree[j] = <span class="number">0</span>, cut(E[j].u, j + n), cut(E[j].v , j + n);</div><div class="line">            <span class="keyword">if</span>(inSet[j]) inSet[j] = <span class="number">0</span>, --cnt;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">puts</span>(cnt ? <span class="string">"No"</span> : <span class="string">"Yes"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意: 给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意: 给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="LCT" scheme="http://xffyjq.github.com/tags/LCT/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="http://xffyjq.github.com/2017/04/22/hello-world/"/>
    <id>http://xffyjq.github.com/2017/04/22/hello-world/</id>
    <published>2017-04-22T08:49:41.000Z</published>
    <updated>2017-05-22T04:57:12.443Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-在新站的第一篇博客。多多关照。"><a href="#emsp-emsp-在新站的第一篇博客。多多关照。" class="headerlink" title="&emsp;&emsp;在新站的第一篇博客。多多关照。"></a>&emsp;&emsp;在新站的第一篇博客。多多关照。</h3><a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-在新站的第一篇博客。多多关照。&quot;&gt;&lt;a href=&quot;#emsp-emsp-在新站的第一篇博客。多多关照。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;在新站的第一篇博客。多多关照。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;在新站的第一篇博客。多多关照。&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
