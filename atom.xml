<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xffyjq&#39;s Page</title>
  <subtitle>Simple, enough.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xffyjq.github.com/"/>
  <updated>2017-05-10T05:27:32.797Z</updated>
  <id>http://xffyjq.github.com/</id>
  
  <author>
    <name>xffyjq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SPOJ1812 LCS2</title>
    <link href="http://xffyjq.github.com/2017/05/09/SPOJ1812/"/>
    <id>http://xffyjq.github.com/2017/05/09/SPOJ1812/</id>
    <published>2017-05-09T04:38:00.000Z</published>
    <updated>2017-05-10T05:27:32.797Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-给你n个串，求它们的LCS。"><a href="#emsp-emsp-题意-给你n个串，求它们的LCS。" class="headerlink" title="&emsp;&emsp;题意:给你n个串，求它们的LCS。"></a>&emsp;&emsp;题意:给你n个串，求它们的LCS。</h3><a id="more"></a>
<p>&emsp;&emsp;后缀系列的经典问题。<br>&emsp;&emsp;这道题用后缀数组+二分当然可以做。将n个串连接成一个长串，只需要每次二分LCP，看是否有n个后缀LCP大于该值，又正好分属n个串就好。<br>&emsp;&emsp;但这个复杂度显然是$O(n \log n)$的，在这里过不了。我们考虑用SAM解决这个问题。<br>&emsp;&emsp;首先我们从两个串的情况入手: (SPOJ LCS正是两串LCS的题目)<br>&emsp;&emsp;将第一个串$s_1$的SAM构建出来，然后在上面运行第二个串$s_2$。记录一个到当前位的LCS长度，记作len。如果当前到了第i位，节点u有$s_2[i]$的转移边,则走转移边，len长度+1。如果没有该转移边，由于next边上节点所包含的串均为当前点u包含串的后缀，所以沿着next边向前走，走到第一个有该转移边的节点v。根据节点的定义，一个节点有转移边，则其中所有串均可以通过这条转移边到另一个合法子串。于是我们只需要取最长的一个。即走过v的转移边，将len重新赋值为$Max[v] + 1$。如果走到根都没有转移边的话，就从根重新开始，并将len赋值为0。每走一步更新答案即可。<br>&emsp;&emsp;如何处理多个串的情况?我们对于每个节点多记录两个值，一个代表所有串运行到当前点时的LCS值，一个代表当前串运行到当前点时的LCS，即上面的len。注:一个串可能被运行到一个点多次，记录最大值即可。要注意的是，在之前的双串LCS中，我们忽略了一个东西:当我们运行到一个点，即代表这个点包含的串在原串出现时，该节点通过next边连接的所有点，即该串的所有后缀也都在原串出现了，所以之前的点的len值也需要更新。在两个串的情况里，运行到一个点时，其代表串的后缀显然不会更优，并不用在意这一点。但是在多串中，我们需要考虑其他串的影响，就要基数排序排出节点间的拓扑序，按照其逆序更新所有节点的真正len值。运行完一个串后，将每个节点的所有串运行到当前点的LCS值对当前len取min即可。(如果没运行到则len=0，说明该节点代表的串不会参与答案更新)<br>&emsp;&emsp;最后运行完所有串后，所有节点LCS的max值就是答案了。<br>&emsp;&emsp;这道题卡时间，多清空几个数组都会T。不过错误算法(不基数排序)可以水过去。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">	<span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>, SIZE = maxn &lt;&lt; <span class="number">2</span>, SIGMA = <span class="number">26</span>;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> SAM</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ch[SIZE][SIGMA], next[SIZE], Max[SIZE];</div><div class="line">    <span class="keyword">int</span> LCS[SIZE], LEN[SIZE];</div><div class="line">    <span class="keyword">int</span> cur, last;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; cur = last = <span class="number">1</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">New</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; Max[++cur] = x; <span class="keyword">return</span> cur; &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u = New(Max[last] + <span class="number">1</span>), v = last;</div><div class="line">        <span class="keyword">for</span>(; v &amp;&amp; !ch[v][c]; v = next[v]) ch[v][c] = u;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!v) next[u] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> h = ch[v][c];</div><div class="line">            <span class="keyword">if</span>(Max[h] == Max[v] + <span class="number">1</span>) next[u] = h;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> o = New(Max[v] + <span class="number">1</span>);</div><div class="line">                <span class="built_in">memcpy</span>(ch[o], ch[h], <span class="keyword">sizeof</span> ch[h]);</div><div class="line">                next[o] = next[h];</div><div class="line">                next[h] = next[u] = o;</div><div class="line">                <span class="keyword">for</span>(; v &amp;&amp; ch[v][c] == h; v = next[v]) ch[v][c] = o;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        last = u;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SAM;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, ans;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum[maxn], t[SIZE];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    init();</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s); n = <span class="built_in">strlen</span>(s);</div><div class="line">    rep(i, <span class="number">0</span>, n - <span class="number">1</span>) extend(s[i] - <span class="string">'a'</span>);</div><div class="line">    rep(i, <span class="number">1</span>, cur) LCS[i] = Max[i];</div><div class="line"></div><div class="line">    rep(i, <span class="number">1</span>, cur) ++sum[Max[i]];</div><div class="line">    rep(i, <span class="number">1</span>, n) sum[i] += sum[i - <span class="number">1</span>];</div><div class="line">    drep(i, cur, <span class="number">1</span>) t[--sum[Max[i]]] = i;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> h = <span class="number">1</span>, len = <span class="number">0</span>;</div><div class="line">        ms(LEN, <span class="number">0</span>);</div><div class="line">        rep(i, <span class="number">0</span>, <span class="built_in">strlen</span>(s) - <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(ch[h][s[i] - <span class="string">'a'</span>]) ++len, h = ch[h][s[i] - <span class="string">'a'</span>];</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">while</span>(h &amp;&amp; !ch[h][s[i] - <span class="string">'a'</span>]) h = next[h];</div><div class="line">                <span class="keyword">if</span>(!h) h = <span class="number">1</span>, len = <span class="number">0</span>;</div><div class="line">                <span class="keyword">else</span> len = Max[h] + <span class="number">1</span>, h = ch[h][s[i] - <span class="string">'a'</span>];</div><div class="line">            &#125;</div><div class="line">            chkmax(LEN[h], len);</div><div class="line">        &#125;</div><div class="line">        drep(i, cur, <span class="number">1</span>) chkmax(LEN[next[t[i]]], LEN[t[i]]);</div><div class="line">        rep(i, <span class="number">1</span>, cur) chkmin(LCS[i], LEN[i]);</div><div class="line">    &#125;</div><div class="line">    rep(i, <span class="number">1</span>, cur) chkmax(ans, LCS[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-给你n个串，求它们的LCS。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-给你n个串，求它们的LCS。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:给你n个串，求它们的LCS。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:给你n个串，求它们的LCS。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="SAM" scheme="http://xffyjq.github.com/tags/SAM/"/>
    
  </entry>
  
  <entry>
    <title>POJ1509 Glass Beads</title>
    <link href="http://xffyjq.github.com/2017/05/07/POJ1509/"/>
    <id>http://xffyjq.github.com/2017/05/07/POJ1509/</id>
    <published>2017-05-07T13:16:39.000Z</published>
    <updated>2017-05-07T13:36:12.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-给你一个循环串-首尾相接-，求出使其字典序最小的起始位置。"><a href="#emsp-emsp-题意-给你一个循环串-首尾相接-，求出使其字典序最小的起始位置。" class="headerlink" title="&emsp;&emsp;题意:给你一个循环串(首尾相接)，求出使其字典序最小的起始位置。"></a>&emsp;&emsp;题意:给你一个循环串(首尾相接)，求出使其字典序最小的起始位置。</h3><a id="more"></a>
<p>&emsp;&emsp;后缀自动机(SAM)的第一道题。<br>&emsp;&emsp;看后缀自动机有关的东西看了很久，差不多明白了一些。<br>&emsp;&emsp;这道题其实本来有更加简单的暴力做法，不过就全当练习SAM了。<br>&emsp;&emsp;首先将原串S扩展至两倍SS，这是循环串的惯用套路。<br>&emsp;&emsp;接着将SAM增量构造出来，由于SAM包含了原串的所有子串，所以在SAM上，每次沿着字典序最小的边走，走$|S|$次，到达节点u一定包含要找的字典序最小的串。<br>&emsp;&emsp;那么如何将其提取出来?也就是，如何在u表示的众多串中，找到那个串，并且知道其在原串中的起始位置呢?<br>&emsp;&emsp;其实并不用找到那个串。注意到u表示的最长的串一定是从原串的开头到我们要找的串的末尾的。而根据SAM的性质，我们要找的串一定是最长串的后缀，且长度为n。于是$Max[u]-n+1$便是答案了。<br>&emsp;&emsp;要注意一点:SAM中是否有某个节点是用其对应下标是否为0来判断的。所以SAM的start节点不能设为0。为了方便，设为1即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>, SIZE = (maxn &lt;&lt; <span class="number">3</span>), SIGMA = <span class="number">26</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">	<span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> SAM</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> cur, last;</div><div class="line">    <span class="keyword">int</span> ch[SIZE][SIGMA], next[SIZE], Max[SIZE];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">New</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; Max[++cur] = x; <span class="keyword">return</span> cur; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; ms(next, <span class="number">0</span>); ms(Max, <span class="number">0</span>); ms(ch, <span class="number">0</span>); cur = last = <span class="number">1</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u = New(Max[last] + <span class="number">1</span>), v = last;</div><div class="line">        <span class="keyword">for</span>(; v &amp;&amp; !ch[v][c]; v = next[v]) ch[v][c] = u;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!v) next[u] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> h = ch[v][c];</div><div class="line">            <span class="keyword">if</span>(Max[h] == Max[v] + <span class="number">1</span>) next[u] = h;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> o = New(Max[v] + <span class="number">1</span>);</div><div class="line">                <span class="built_in">memcpy</span>(ch[o], ch[h], <span class="keyword">sizeof</span> ch[h]);</div><div class="line">                next[o] = next[h];</div><div class="line">                next[h] = next[u] = o;</div><div class="line">                <span class="keyword">for</span>(; v &amp;&amp; ch[v][c] == h; v = next[v]) ch[v][c] = o;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        last = u;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SAM;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="keyword">int</span> _; read(_);</div><div class="line">    <span class="keyword">while</span>(_--)</div><div class="line">    &#123;</div><div class="line">        init();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s); n = <span class="built_in">strlen</span>(s);</div><div class="line">        rep(i, <span class="number">0</span>, n - <span class="number">1</span>) extend(s[i] - <span class="string">'a'</span>);</div><div class="line">        rep(i, <span class="number">0</span>, n - <span class="number">1</span>) extend(s[i] - <span class="string">'a'</span>);</div><div class="line">        <span class="keyword">int</span> h = <span class="number">1</span>;</div><div class="line">        rep(i, <span class="number">1</span>, n) rep(c, <span class="number">0</span>, <span class="number">25</span>)</div><div class="line">            <span class="keyword">if</span>(ch[h][c]) &#123; h = ch[h][c]; <span class="keyword">break</span>; &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Max[h] - n + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-给你一个循环串-首尾相接-，求出使其字典序最小的起始位置。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-给你一个循环串-首尾相接-，求出使其字典序最小的起始位置。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意:给你一个循环串(首尾相接)，求出使其字典序最小的起始位置。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意:给你一个循环串(首尾相接)，求出使其字典序最小的起始位置。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="SAM" scheme="http://xffyjq.github.com/tags/SAM/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ4025 二分图</title>
    <link href="http://xffyjq.github.com/2017/05/04/BZOJ4025/"/>
    <id>http://xffyjq.github.com/2017/05/04/BZOJ4025/</id>
    <published>2017-05-04T11:51:03.000Z</published>
    <updated>2017-05-07T13:18:24.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-题意-给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。"><a href="#emsp-emsp-题意-给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。" class="headerlink" title="&emsp;&emsp;题意: 给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。"></a>&emsp;&emsp;题意: 给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。</h3><a id="more"></a>
<p>&emsp;&emsp;这道题可以说是LCT维护动态生成树的集大成题。其中加入了二分图模型，对于以后很多的题目都具有启示意义。<br>&emsp;&emsp;对于这道题，我们考虑维护以删除时间为关键字的最大生成树。对于整个图来说，就是一个最大生成森林。</p>
<p>&emsp;&emsp;在每一时刻，在生成森林中，对于每一条出现的边:<br>&emsp;&emsp;如果该边两端不联通，则加入该边。<br>&emsp;&emsp;如果该边两端联通，将该边连上后会出现一个环。<br>&emsp;&emsp;如果这个环是奇环，那么将该环中删除时间最早(权值最小)的边删除，并加入标记集合，表示该边存在时，图不为二分图。<br>&emsp;&emsp;具体实现的话，就是先将出现边与原路径中的最小边比较，如果比最小边要小，则直接判断是否为奇环加标记即可。<br>&emsp;&emsp;如果比最小边要大，那么就删除最小边，连接上该边，将最小边拿去判断。</p>
<p>&emsp;&emsp;对于每一条删除的边:<br>&emsp;&emsp;如果这条边在树上，直接cut。<br>&emsp;&emsp;如果这条边在删除集合里，直接去掉。</p>
<p>&emsp;&emsp;每一个时刻，当且仅当集合内没有元素时，图为二分图。</p>
<p>&emsp;&emsp;维护生成树中最小/大边，我采用的是维护指针的方法。指针减去初指针就为实际下标了。<br>&emsp;&emsp;判断是否为奇环，就维护LCT的size即可。注意边的size设为0。<br>&emsp;&emsp;注意这道题的联通性不能用普通并查集，因为有cut操作。我直接暴力判断的联通性。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = l, i##end = r; i &lt;= i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, l, r) for(int i = l, i##end = r; i &gt;= i##end; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset(a, b, sizeof a)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) (int((x).size()))</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> c; <span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c = getchar())) <span class="keyword">if</span>(c == <span class="string">'-'</span>) flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(x = c ^ <span class="number">48</span>; <span class="built_in">isdigit</span>(c = getchar()); x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>));</div><div class="line">	<span class="keyword">if</span>(flag) x = -x; <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>, maxm = <span class="number">200010</span>, INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></div><div class="line">&#123;</div><div class="line">    node *p, *c[<span class="number">2</span>], *Min;</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> rev, isdot;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> val, sz;</div><div class="line"></div><div class="line">    node(): p(<span class="number">0</span>), Min(<span class="keyword">this</span>), rev(<span class="number">0</span>), val(INF) &#123; c[<span class="number">0</span>] = c[<span class="number">1</span>] = <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setc</span><span class="params">(node* o, <span class="keyword">bool</span> b)</span> </span>&#123; c[b] = o; <span class="keyword">if</span>(o) o-&gt;p = <span class="keyword">this</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> !p || p-&gt;c[<span class="number">0</span>] != <span class="keyword">this</span> &amp;&amp; p-&gt;c[<span class="number">1</span>] != <span class="keyword">this</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">getpos</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> p-&gt;c[<span class="number">1</span>] == <span class="keyword">this</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updrev</span><span class="params">()</span> </span>&#123; rev ^= <span class="number">1</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        Min = <span class="keyword">this</span>;</div><div class="line">        rep(i, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">if</span>(c[i] &amp;&amp; c[i]-&gt;Min-&gt;val &lt; Min-&gt;val) Min = c[i]-&gt;Min;</div><div class="line">        sz = isdot;</div><div class="line">        rep(i, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">if</span>(c[i]) sz += c[i]-&gt;sz;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(rev)</div><div class="line">        &#123;</div><div class="line">            rep(i, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">if</span>(c[i]) c[i]-&gt;updrev();</div><div class="line">            swap(c[<span class="number">0</span>], c[<span class="number">1</span>]); rev = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rot</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        node* f = p; <span class="keyword">bool</span> b = getpos();</div><div class="line">        <span class="keyword">if</span>(f-&gt;isroot()) p = f-&gt;p;</div><div class="line">        <span class="keyword">else</span> f-&gt;p-&gt;setc(<span class="keyword">this</span>, f-&gt;getpos());</div><div class="line">        f-&gt;setc(c[!b], b); setc(f, !b);</div><div class="line">        f-&gt;pushup();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">relax</span><span class="params">()</span> </span>&#123; <span class="keyword">if</span>(!isroot()) p-&gt;relax(); pushdown(); &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(relax(); !isroot(); rot())</div><div class="line">            <span class="keyword">if</span>(!p-&gt;isroot()) (p-&gt;getpos() == getpos() ? p : <span class="keyword">this</span>)-&gt;rot();</div><div class="line">        pushup();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(node *u = <span class="keyword">this</span>, *v = <span class="number">0</span>; u; v = u, u = u-&gt;p)</div><div class="line">            u-&gt;splay(), u-&gt;setc(v, <span class="number">1</span>), u-&gt;pushup();</div><div class="line">        splay();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beroot</span><span class="params">()</span> </span>&#123; access(); updrev(); &#125;</div><div class="line">&#125;nd[maxn + maxm];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, t;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> LCT</div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        node *u = nd + x, *v = nd + y;</div><div class="line">        <span class="keyword">while</span>(u-&gt;p) u = u-&gt;p;</div><div class="line">        <span class="keyword">while</span>(v-&gt;p) v = v-&gt;p;</div><div class="line">        <span class="keyword">return</span> u == v;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        node *u = nd + x, *v = nd + y;</div><div class="line">        u-&gt;beroot(); u-&gt;p = v;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        node *u = nd + x, *v = nd + y;</div><div class="line">        u-&gt;beroot(); v-&gt;access();</div><div class="line">        u-&gt;p = v-&gt;c[<span class="number">0</span>] = <span class="literal">NULL</span>; v-&gt;pushup();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">node* <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        node *u = nd + x, *v = nd + y;</div><div class="line">        u-&gt;beroot(); v-&gt;access();</div><div class="line">        <span class="keyword">return</span> v-&gt;Min;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> LCT;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> u, v, w;</div><div class="line">&#125;E[maxm];</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Add[maxn], Del[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">bool</span> inTree[maxm], inSet[maxm];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">    freopen(<span class="string">"exec.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>); freopen(<span class="string">"exec.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    read(n); read(m); read(t); <span class="keyword">int</span> st, ed;</div><div class="line">    rep(i, <span class="number">1</span>, m)</div><div class="line">    &#123;</div><div class="line">        read(E[i].u), read(E[i].v), read(st), E[i].w = read(ed);</div><div class="line">        Add[st].pb(i); Del[ed].pb(i);</div><div class="line">    &#125;</div><div class="line">    rep(i, <span class="number">1</span>, n) (nd + i)-&gt;isdot = (nd + i)-&gt;sz = <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, m)</div><div class="line">    &#123;</div><div class="line">        (nd + n + i)-&gt;val = E[i].w;</div><div class="line">        (nd + n + i)-&gt;isdot = (nd + n + i)-&gt;sz = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    rep(k, <span class="number">0</span>, t - <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        rep(i, <span class="number">0</span>, SZ(Add[k]) - <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j = Add[k][i];</div><div class="line">            <span class="keyword">if</span>(E[j].u == E[j].v) &#123; inSet[j] = <span class="number">1</span>; ++cnt; <span class="keyword">continue</span>; &#125;</div><div class="line">            <span class="keyword">if</span>(!check(E[j].u, E[j].v))</div><div class="line">            &#123;</div><div class="line">                link(E[j].u, j + n);</div><div class="line">                link(E[j].v, j + n);</div><div class="line">                inTree[j] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                node* o = query(E[j].u, E[j].v);</div><div class="line">                <span class="keyword">int</span> h = o - nd - n;</div><div class="line">                <span class="keyword">if</span>(E[j].w &gt; o-&gt;val)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>((nd + E[j].v)-&gt;sz &amp; <span class="number">1</span>) inSet[h] = <span class="number">1</span>, ++cnt;</div><div class="line">                    cut(E[h].u, h + n);</div><div class="line">                    cut(E[h].v, h + n);</div><div class="line">                    link(E[j].u, j + n);</div><div class="line">                    link(E[j].v, j + n);</div><div class="line">                    inTree[h] = <span class="number">0</span>; inTree[j] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((nd + E[j].v)-&gt;sz &amp; <span class="number">1</span>) inSet[j] = <span class="number">1</span>, ++cnt;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        rep(i, <span class="number">0</span>, SZ(Del[k]) - <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j = Del[k][i];</div><div class="line">            <span class="keyword">if</span>(inTree[j]) inTree[j] = <span class="number">0</span>, cut(E[j].u, j + n), cut(E[j].v , j + n);</div><div class="line">            <span class="keyword">if</span>(inSet[j]) inSet[j] = <span class="number">0</span>, --cnt;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">puts</span>(cnt ? <span class="string">"No"</span> : <span class="string">"Yes"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-题意-给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。&quot;&gt;&lt;a href=&quot;#emsp-emsp-题意-给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;题意: 给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;题意: 给你一个图中每个点出现与消失的时刻，求在每一个时刻中该图是否为二分图。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="LCT" scheme="http://xffyjq.github.com/tags/LCT/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="http://xffyjq.github.com/2017/04/22/hello-world/"/>
    <id>http://xffyjq.github.com/2017/04/22/hello-world/</id>
    <published>2017-04-22T08:49:41.000Z</published>
    <updated>2017-05-09T04:40:42.229Z</updated>
    
    <content type="html"><![CDATA[<h3 id="emsp-emsp-在新站的第一篇博客。多多关照。"><a href="#emsp-emsp-在新站的第一篇博客。多多关照。" class="headerlink" title="&emsp;&emsp;在新站的第一篇博客。多多关照。"></a>&emsp;&emsp;在新站的第一篇博客。多多关照。</h3><a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;emsp-emsp-在新站的第一篇博客。多多关照。&quot;&gt;&lt;a href=&quot;#emsp-emsp-在新站的第一篇博客。多多关照。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;在新站的第一篇博客。多多关照。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;在新站的第一篇博客。多多关照。&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
